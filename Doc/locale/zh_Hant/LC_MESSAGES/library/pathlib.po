# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-09 21:33+0800\n"
"PO-Revision-Date: 2015-12-09 17:51+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hant\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pathlib.rst:3
msgid ":mod:`pathlib` --- Object-oriented filesystem paths"
msgstr ""

#: ../../library/pathlib.rst:12
msgid ""
"This module offers classes representing filesystem paths with semantics "
"appropriate for different operating systems.  Path classes are divided "
"between :ref:`pure paths <pure-paths>`, which provide purely computational "
"operations without I/O, and :ref:`concrete paths <concrete-paths>`, which "
"inherit from pure paths but also provide I/O operations."
msgstr ""

#: ../../library/pathlib.rst:21
msgid ""
"If you've never used this module before or just aren't sure which class is "
"right for your task, :class:`Path` is most likely what you need. It "
"instantiates a :ref:`concrete path <concrete-paths>` for the platform the "
"code is running on."
msgstr ""

#: ../../library/pathlib.rst:25
msgid "Pure paths are useful in some special cases; for example:"
msgstr ""

#: ../../library/pathlib.rst:27
msgid ""
"If you want to manipulate Windows paths on a Unix machine (or vice versa). "
"You cannot instantiate a :class:`WindowsPath` when running on Unix, but you "
"can instantiate :class:`PureWindowsPath`."
msgstr ""

#: ../../library/pathlib.rst:30
msgid ""
"You want to make sure that your code only manipulates paths without actually"
" accessing the OS. In this case, instantiating one of the pure classes may "
"be useful since those simply don't have any OS-accessing operations."
msgstr ""

#: ../../library/pathlib.rst:35
msgid ""
"This module has been included in the standard library on a "
":term:`provisional basis <provisional package>`. Backwards incompatible "
"changes (up to and including removal of the package) may occur if deemed "
"necessary by the core developers."
msgstr ""

#: ../../library/pathlib.rst:41
msgid ":pep:`428`: The pathlib module -- object-oriented filesystem paths."
msgstr ""

#: ../../library/pathlib.rst:44
msgid ""
"For low-level path manipulation on strings, you can also use the "
":mod:`os.path` module."
msgstr ""

#: ../../library/pathlib.rst:49
msgid "Basic use"
msgstr ""

#: ../../library/pathlib.rst:51
msgid "Importing the main class::"
msgstr ""

#: ../../library/pathlib.rst:55
msgid "Listing subdirectories::"
msgstr ""

#: ../../library/pathlib.rst:62
msgid "Listing Python source files in this directory tree::"
msgstr ""

#: ../../library/pathlib.rst:69
msgid "Navigating inside a directory tree::"
msgstr ""

#: ../../library/pathlib.rst:78
msgid "Querying path properties::"
msgstr ""

#: ../../library/pathlib.rst:85
msgid "Opening a file::"
msgstr ""

#: ../../library/pathlib.rst:95
msgid "Pure paths"
msgstr ""

#: ../../library/pathlib.rst:97
msgid ""
"Pure path objects provide path-handling operations which don't actually "
"access a filesystem.  There are three ways to access these classes, which we"
" also call *flavours*:"
msgstr ""

#: ../../library/pathlib.rst:103
msgid ""
"A generic class that represents the system's path flavour (instantiating it "
"creates either a :class:`PurePosixPath` or a :class:`PureWindowsPath`)::"
msgstr ""

#: ../../library/pathlib.rst:109
msgid ""
"Each element of *pathsegments* can be either a string representing a path "
"segment, or another path object::"
msgstr ""

#: ../../library/pathlib.rst:117
msgid "When *pathsegments* is empty, the current directory is assumed::"
msgstr ""

#: ../../library/pathlib.rst:122
msgid ""
"When several absolute paths are given, the last is taken as an anchor "
"(mimicking :func:`os.path.join`'s behaviour)::"
msgstr ""

#: ../../library/pathlib.rst:130
msgid ""
"However, in a Windows path, changing the local root doesn't discard the "
"previous drive setting::"
msgstr ""

#: ../../library/pathlib.rst:136
msgid ""
"Spurious slashes and single dots are collapsed, but double dots (``'..'``) "
"are not, since this would change the meaning of a path in the face of "
"symbolic links::"
msgstr ""

#: ../../library/pathlib.rst:147
msgid ""
"(a na√Øve approach would make ``PurePosixPath('foo/../bar')`` equivalent to "
"``PurePosixPath('bar')``, which is wrong if ``foo`` is a symbolic link to "
"another directory)"
msgstr ""

#: ../../library/pathlib.rst:153
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents non-Windows "
"filesystem paths::"
msgstr ""

#: ../../library/pathlib.rst:159 ../../library/pathlib.rst:169
#: ../../library/pathlib.rst:574 ../../library/pathlib.rst:584
#: ../../library/pathlib.rst:594
msgid "*pathsegments* is specified similarly to :class:`PurePath`."
msgstr ""

#: ../../library/pathlib.rst:163
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents Windows "
"filesystem paths::"
msgstr ""

#: ../../library/pathlib.rst:171
msgid ""
"Regardless of the system you're running on, you can instantiate all of these"
" classes, since they don't provide any operation that does system calls."
msgstr ""

#: ../../library/pathlib.rst:176
msgid "General properties"
msgstr ""

#: ../../library/pathlib.rst:178
msgid ""
"Paths are immutable and hashable.  Paths of a same flavour are comparable "
"and orderable.  These properties respect the flavour's case-folding "
"semantics::"
msgstr ""

#: ../../library/pathlib.rst:191
msgid "Paths of a different flavour compare unequal and cannot be ordered::"
msgstr ""

#: ../../library/pathlib.rst:202
msgid "Operators"
msgstr ""

#: ../../library/pathlib.rst:204
msgid ""
"The slash operator helps create child paths, similarly to "
":func:`os.path.join`::"
msgstr ""

#: ../../library/pathlib.rst:215
msgid ""
"The string representation of a path is the raw filesystem path itself (in "
"native form, e.g. with backslashes under Windows), which you can pass to any"
" function taking a file path as a string::"
msgstr ""

#: ../../library/pathlib.rst:226
msgid ""
"Similarly, calling :class:`bytes` on a path gives the raw filesystem path as"
" a bytes object, as encoded by :func:`os.fsencode`::"
msgstr ""

#: ../../library/pathlib.rst:233
msgid ""
"Calling :class:`bytes` is only recommended under Unix.  Under Windows, the "
"unicode form is the canonical representation of filesystem paths."
msgstr ""

#: ../../library/pathlib.rst:238
msgid "Accessing individual parts"
msgstr ""

#: ../../library/pathlib.rst:240
msgid ""
"To access the individual \"parts\" (components) of a path, use the following"
" property:"
msgstr ""

#: ../../library/pathlib.rst:245
msgid "A tuple giving access to the path's various components::"
msgstr ""

#: ../../library/pathlib.rst:255
msgid "(note how the drive and local root are regrouped in a single part)"
msgstr ""

#: ../../library/pathlib.rst:259
msgid "Methods and properties"
msgstr ""

#: ../../library/pathlib.rst:261
msgid "Pure paths provide the following methods and properties:"
msgstr ""

#: ../../library/pathlib.rst:265
msgid "A string representing the drive letter or name, if any::"
msgstr ""

#: ../../library/pathlib.rst:274
msgid "UNC shares are also considered drives::"
msgstr ""

#: ../../library/pathlib.rst:281
msgid "A string representing the (local or global) root, if any::"
msgstr ""

#: ../../library/pathlib.rst:290
msgid "UNC shares always have a root::"
msgstr ""

#: ../../library/pathlib.rst:297
msgid "The concatenation of the drive and root::"
msgstr ""

#: ../../library/pathlib.rst:311
msgid ""
"An immutable sequence providing access to the logical ancestors of the "
"path::"
msgstr ""

#: ../../library/pathlib.rst:325
msgid "The logical parent of the path::"
msgstr ""

#: ../../library/pathlib.rst:331
msgid "You cannot go past an anchor, or empty path::"
msgstr ""

#: ../../library/pathlib.rst:341
msgid "This is a purely lexical operation, hence the following behaviour::"
msgstr ""

#: ../../library/pathlib.rst:347
msgid ""
"If you want to walk an arbitrary filesystem path upwards, it is recommended "
"to first call :meth:`Path.resolve` so as to resolve symlinks and eliminate "
"`\"..\"` components."
msgstr ""

#: ../../library/pathlib.rst:354
msgid ""
"A string representing the final path component, excluding the drive and "
"root, if any::"
msgstr ""

#: ../../library/pathlib.rst:360
msgid "UNC drive names are not considered::"
msgstr ""

#: ../../library/pathlib.rst:370
msgid "The file extension of the final component, if any::"
msgstr ""

#: ../../library/pathlib.rst:382
msgid "A list of the path's file extensions::"
msgstr ""

#: ../../library/pathlib.rst:394
msgid "The final path component, without its suffix::"
msgstr ""

#: ../../library/pathlib.rst:406
msgid ""
"Return a string representation of the path with forward slashes (``/``)::"
msgstr ""

#: ../../library/pathlib.rst:417
msgid ""
"Represent the path as a ``file`` URI.  :exc:`ValueError` is raised if the "
"path isn't absolute."
msgstr ""

#: ../../library/pathlib.rst:430
msgid ""
"Return whether the path is absolute or not.  A path is considered absolute "
"if it has both a root and (if the flavour allows) a drive::"
msgstr ""

#: ../../library/pathlib.rst:450
msgid ""
"With :class:`PureWindowsPath`, return ``True`` if the path is considered "
"reserved under Windows, ``False`` otherwise.  With :class:`PurePosixPath`, "
"``False`` is always returned."
msgstr ""

#: ../../library/pathlib.rst:459
msgid ""
"File system calls on reserved paths can fail mysteriously or have unintended"
" effects."
msgstr ""

#: ../../library/pathlib.rst:465
msgid ""
"Calling this method is equivalent to combining the path with each of the "
"*other* arguments in turn::"
msgstr ""

#: ../../library/pathlib.rst:480
msgid ""
"Match this path against the provided glob-style pattern.  Return ``True`` if"
" matching is successful, ``False`` otherwise."
msgstr ""

#: ../../library/pathlib.rst:483
msgid ""
"If *pattern* is relative, the path can be either relative or absolute, and "
"matching is done from the right::"
msgstr ""

#: ../../library/pathlib.rst:493
msgid ""
"If *pattern* is absolute, the path must be absolute, and the whole path must"
" match::"
msgstr ""

#: ../../library/pathlib.rst:501
msgid "As with other methods, case-sensitivity is observed::"
msgstr ""

#: ../../library/pathlib.rst:509
msgid ""
"Compute a version of this path relative to the path represented by *other*."
"  If it's impossible, ValueError is raised::"
msgstr ""

#: ../../library/pathlib.rst:527
msgid ""
"Return a new path with the :attr:`name` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ""

#: ../../library/pathlib.rst:544
msgid ""
"Return a new path with the :attr:`suffix` changed.  If the original path "
"doesn't have a suffix, the new *suffix* is appended instead::"
msgstr ""

#: ../../library/pathlib.rst:559
msgid "Concrete paths"
msgstr ""

#: ../../library/pathlib.rst:561
msgid ""
"Concrete paths are subclasses of the pure path classes.  In addition to "
"operations provided by the latter, they also provide methods to do system "
"calls on path objects.  There are three ways to instantiate concrete paths:"
msgstr ""

#: ../../library/pathlib.rst:567
msgid ""
"A subclass of :class:`PurePath`, this class represents concrete paths of the"
" system's path flavour (instantiating it creates either a :class:`PosixPath`"
" or a :class:`WindowsPath`)::"
msgstr ""

#: ../../library/pathlib.rst:578
msgid ""
"A subclass of :class:`Path` and :class:`PurePosixPath`, this class "
"represents concrete non-Windows filesystem paths::"
msgstr ""

#: ../../library/pathlib.rst:588
msgid ""
"A subclass of :class:`Path` and :class:`PureWindowsPath`, this class "
"represents concrete Windows filesystem paths::"
msgstr ""

#: ../../library/pathlib.rst:596
msgid ""
"You can only instantiate the class flavour that corresponds to your system "
"(allowing system calls on non-compatible path flavours could lead to bugs or"
" failures in your application)::"
msgstr ""

#: ../../library/pathlib.rst:616
msgid "Methods"
msgstr ""

#: ../../library/pathlib.rst:618
msgid ""
"Concrete paths provide the following methods in addition to pure paths "
"methods.  Many of these methods can raise an :exc:`OSError` if a system call"
" fails (for example because the path doesn't exist):"
msgstr ""

#: ../../library/pathlib.rst:624
msgid ""
"Return a new path object representing the current directory (as returned by "
":func:`os.getcwd`)::"
msgstr ""

#: ../../library/pathlib.rst:633
msgid ""
"Return a new path object representing the user's home directory (as returned"
" by :func:`os.path.expanduser` with ``~`` construct)::"
msgstr ""

#: ../../library/pathlib.rst:644
msgid ""
"Return information about this path (similarly to :func:`os.stat`). The "
"result is looked up at each call to this method."
msgstr ""

#: ../../library/pathlib.rst:656
msgid "Change the file mode and permissions, like :func:`os.chmod`::"
msgstr ""

#: ../../library/pathlib.rst:668
msgid "Whether the path points to an existing file or directory::"
msgstr ""

#: ../../library/pathlib.rst:680
msgid ""
"If the path points to a symlink, :meth:`exists` returns whether the symlink "
"*points to* an existing file or directory."
msgstr ""

#: ../../library/pathlib.rst:686
msgid ""
"Return a new path with expanded ``~`` and ``~user`` constructs, as returned "
"by :meth:`os.path.expanduser`::"
msgstr ""

#: ../../library/pathlib.rst:698
msgid ""
"Glob the given *pattern* in the directory represented by this path, yielding"
" all matching files (of any kind)::"
msgstr ""

#: ../../library/pathlib.rst:706
msgid ""
"The \"``**``\" pattern means \"this directory and all subdirectories, "
"recursively\".  In other words, it enables recursive globbing::"
msgstr ""

#: ../../library/pathlib.rst:717
msgid ""
"Using the \"``**``\" pattern in large directory trees may consume an "
"inordinate amount of time."
msgstr ""

#: ../../library/pathlib.rst:723
msgid ""
"Return the name of the group owning the file.  :exc:`KeyError` is raised if "
"the file's gid isn't found in the system database."
msgstr ""

#: ../../library/pathlib.rst:729
msgid ""
"Return ``True`` if the path points to a directory (or a symbolic link "
"pointing to a directory), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:732 ../../library/pathlib.rst:741
#: ../../library/pathlib.rst:758 ../../library/pathlib.rst:767
#: ../../library/pathlib.rst:776 ../../library/pathlib.rst:785
msgid ""
"``False`` is also returned if the path doesn't exist or is a broken symlink;"
" other errors (such as permission errors) are propagated."
msgstr ""

#: ../../library/pathlib.rst:738
msgid ""
"Return ``True`` if the path points to a regular file (or a symbolic link "
"pointing to a regular file), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:747
msgid ""
"Return ``True`` if the path points to a symbolic link, ``False`` otherwise."
msgstr ""

#: ../../library/pathlib.rst:749
msgid ""
"``False`` is also returned if the path doesn't exist; other errors (such as "
"permission errors) are propagated."
msgstr ""

#: ../../library/pathlib.rst:755
msgid ""
"Return ``True`` if the path points to a Unix socket (or a symbolic link "
"pointing to a Unix socket), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:764
msgid ""
"Return ``True`` if the path points to a FIFO (or a symbolic link pointing to"
" a FIFO), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:773
msgid ""
"Return ``True`` if the path points to a block device (or a symbolic link "
"pointing to a block device), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:782
msgid ""
"Return ``True`` if the path points to a character device (or a symbolic link"
" pointing to a character device), ``False`` if it points to another kind of "
"file."
msgstr ""

#: ../../library/pathlib.rst:791
msgid ""
"When the path points to a directory, yield path objects of the directory "
"contents::"
msgstr ""

#: ../../library/pathlib.rst:807
msgid ""
"Like :meth:`Path.chmod` but, if the path points to a symbolic link, the "
"symbolic link's mode is changed rather than its target's."
msgstr ""

#: ../../library/pathlib.rst:813
msgid ""
"Like :meth:`Path.stat` but, if the path points to a symbolic link, return "
"the symbolic link's information rather than its target's."
msgstr ""

#: ../../library/pathlib.rst:819
msgid ""
"Create a new directory at this given path.  If *mode* is given, it is "
"combined with the process' ``umask`` value to determine the file mode and "
"access flags.  If the path already exists, :exc:`FileExistsError` is raised."
msgstr ""

#: ../../library/pathlib.rst:824
msgid ""
"If *parents* is true, any missing parents of this path are created as "
"needed; they are created with the default permissions without taking *mode* "
"into account (mimicking the POSIX ``mkdir -p`` command)."
msgstr ""

#: ../../library/pathlib.rst:828
msgid ""
"If *parents* is false (the default), a missing parent raises "
":exc:`FileNotFoundError`."
msgstr ""

#: ../../library/pathlib.rst:831
msgid ""
"If *exist_ok* is false (the default), an :exc:`FileExistsError` is raised if"
" the target directory already exists."
msgstr ""

#: ../../library/pathlib.rst:834
msgid ""
"If *exist_ok* is true, :exc:`FileExistsError` exceptions will be ignored "
"(same behavior as the POSIX ``mkdir -p`` command), but only if the last path"
" component is not an existing non-directory file."
msgstr ""

#: ../../library/pathlib.rst:838
msgid "The *exist_ok* parameter was added."
msgstr ""

#: ../../library/pathlib.rst:844
msgid ""
"Open the file pointed to by the path, like the built-in :func:`open` "
"function does::"
msgstr ""

#: ../../library/pathlib.rst:856
msgid ""
"Return the name of the user owning the file.  :exc:`KeyError` is raised if "
"the file's uid isn't found in the system database."
msgstr ""

#: ../../library/pathlib.rst:862
msgid "Return the binary contents of the pointed-to file as a bytes object::"
msgstr ""

#: ../../library/pathlib.rst:875
msgid "Return the decoded contents of the pointed-to file as a string::"
msgstr ""

#: ../../library/pathlib.rst:883
msgid "The optional parameters have the same meaning as in :func:`open`."
msgstr ""

#: ../../library/pathlib.rst:890
msgid ""
"Rename this file or directory to the given *target*.  *target* can be either"
" a string or another path object::"
msgstr ""

#: ../../library/pathlib.rst:904
msgid ""
"Rename this file or directory to the given *target*.  If *target* points to "
"an existing file or directory, it will be unconditionally replaced."
msgstr ""

#: ../../library/pathlib.rst:910
msgid ""
"Make the path absolute, resolving any symlinks.  A new path object is "
"returned::"
msgstr ""

#: ../../library/pathlib.rst:919
msgid ""
"`\"..\"` components are also eliminated (this is the only method to do so)::"
msgstr ""

#: ../../library/pathlib.rst:925
msgid ""
"If the path doesn't exist, :exc:`FileNotFoundError` is raised.  If an "
"infinite loop is encountered along the resolution path, :exc:`RuntimeError` "
"is raised."
msgstr ""

#: ../../library/pathlib.rst:932
msgid ""
"This is like calling :meth:`glob` with \"``**``\" added in front of the "
"given *pattern*:"
msgstr ""

#: ../../library/pathlib.rst:945
msgid "Remove this directory.  The directory must be empty."
msgstr ""

#: ../../library/pathlib.rst:950
msgid ""
"Return whether this path points to the same file as *other_path*, which can "
"be either a Path object, or a string.  The semantics are similar to "
":func:`os.path.samefile` and :func:`os.path.samestat`."
msgstr ""

#: ../../library/pathlib.rst:954
msgid ""
"An :exc:`OSError` can be raised if either file cannot be accessed for some "
"reason."
msgstr ""

#: ../../library/pathlib.rst:969
msgid ""
"Make this path a symbolic link to *target*.  Under Windows, "
"*target_is_directory* must be true (default ``False``) if the link's target "
"is a directory.  Under POSIX, *target_is_directory*'s value is ignored."
msgstr ""

#: ../../library/pathlib.rst:983
msgid ""
"The order of arguments (link, target) is the reverse of "
":func:`os.symlink`'s."
msgstr ""

#: ../../library/pathlib.rst:989
msgid ""
"Create a file at this given path.  If *mode* is given, it is combined with "
"the process' ``umask`` value to determine the file mode and access flags.  "
"If the file already exists, the function succeeds if *exist_ok* is true (and"
" its modification time is updated to the current time), otherwise "
":exc:`FileExistsError` is raised."
msgstr ""

#: ../../library/pathlib.rst:998
msgid ""
"Remove this file or symbolic link.  If the path points to a directory, use "
":func:`Path.rmdir` instead."
msgstr ""

#: ../../library/pathlib.rst:1004
msgid ""
"Open the file pointed to in bytes mode, write *data* to it, and close the "
"file::"
msgstr ""

#: ../../library/pathlib.rst:1013
msgid "An existing file of the same name is overwritten."
msgstr ""

#: ../../library/pathlib.rst:1020
msgid ""
"Open the file pointed to in text mode, write *data* to it, and close the "
"file::"
msgstr ""
