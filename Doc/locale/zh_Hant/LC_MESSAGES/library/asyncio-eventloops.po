# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-31 15:04+0800\n"
"PO-Revision-Date: 2015-12-09 17:51+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-"
"doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../library/asyncio-eventloops.rst:4
msgid "Event loops"
msgstr ""

#: ../../library/asyncio-eventloops.rst:7
msgid "Event loop functions"
msgstr ""

#: ../../library/asyncio-eventloops.rst:9
msgid ""
"The following functions are convenient shortcuts to accessing the methods"
" of the global policy. Note that this provides access to the default "
"policy, unless an alternative policy was set by calling "
":func:`set_event_loop_policy` earlier in the execution of the process."
msgstr ""

#: ../../library/asyncio-eventloops.rst:16
msgid "Equivalent to calling ``get_event_loop_policy().get_event_loop()``."
msgstr ""

#: ../../library/asyncio-eventloops.rst:20
msgid "Equivalent to calling ``get_event_loop_policy().set_event_loop(loop)``."
msgstr ""

#: ../../library/asyncio-eventloops.rst:24
msgid "Equivalent to calling ``get_event_loop_policy().new_event_loop()``."
msgstr ""

#: ../../library/asyncio-eventloops.rst:30
msgid "Available event loops"
msgstr ""

#: ../../library/asyncio-eventloops.rst:32
msgid ""
"asyncio currently provides two implementations of event loops: "
":class:`SelectorEventLoop` and :class:`ProactorEventLoop`."
msgstr ""

#: ../../library/asyncio-eventloops.rst:37
msgid ""
"Event loop based on the :mod:`selectors` module. Subclass of "
":class:`BaseEventLoop`."
msgstr ""

#: ../../library/asyncio-eventloops.rst:40
msgid "Use the most efficient selector available on the platform."
msgstr ""

#: ../../library/asyncio-eventloops.rst:42
msgid ""
"On Windows, only sockets are supported (ex: pipes are not supported): see"
" the `MSDN documentation of select <http://msdn.microsoft.com/en-"
"us/library/windows/desktop/ms740141%28v=vs.85%29.aspx>`_."
msgstr ""

#: ../../library/asyncio-eventloops.rst:48
msgid ""
"Proactor event loop for Windows using \"I/O Completion Ports\" aka IOCP. "
"Subclass of :class:`BaseEventLoop`."
msgstr ""

#: ../../library/asyncio-eventloops.rst:51
msgid "Availability: Windows."
msgstr ""

#: ../../library/asyncio-eventloops.rst:55
msgid ""
"`MSDN documentation on I/O Completion Ports <http://msdn.microsoft.com"
"/en-us/library/windows/desktop/aa365198%28v=vs.85%29.aspx>`_."
msgstr ""

#: ../../library/asyncio-eventloops.rst:58
msgid "Example to use a :class:`ProactorEventLoop` on Windows::"
msgstr ""

#: ../../library/asyncio-eventloops.rst:69
msgid "Platform support"
msgstr ""

#: ../../library/asyncio-eventloops.rst:71
msgid ""
"The :mod:`asyncio` module has been designed to be portable, but each "
"platform still has subtle differences and may not support all "
":mod:`asyncio` features."
msgstr ""

#: ../../library/asyncio-eventloops.rst:75
msgid "Windows"
msgstr ""

#: ../../library/asyncio-eventloops.rst:77
msgid "Common limits of Windows event loops:"
msgstr ""

#: ../../library/asyncio-eventloops.rst:79
msgid ""
":meth:`~BaseEventLoop.create_unix_connection` and "
":meth:`~BaseEventLoop.create_unix_server` are not supported: the socket "
"family :data:`socket.AF_UNIX` is specific to UNIX"
msgstr ""

#: ../../library/asyncio-eventloops.rst:82
msgid ""
":meth:`~BaseEventLoop.add_signal_handler` and "
":meth:`~BaseEventLoop.remove_signal_handler` are not supported"
msgstr ""

#: ../../library/asyncio-eventloops.rst:84
msgid ""
":meth:`EventLoopPolicy.set_child_watcher` is not supported. "
":class:`ProactorEventLoop` supports subprocesses. It has only one "
"implementation to watch child processes, there is no need to configure "
"it."
msgstr ""

#: ../../library/asyncio-eventloops.rst:88
msgid ":class:`SelectorEventLoop` specific limits:"
msgstr ""

#: ../../library/asyncio-eventloops.rst:90
msgid ""
":class:`~selectors.SelectSelector` is used which only supports sockets "
"and is limited to 512 sockets."
msgstr ""

#: ../../library/asyncio-eventloops.rst:92
msgid ""
":meth:`~BaseEventLoop.add_reader` and :meth:`~BaseEventLoop.add_writer` "
"only accept file descriptors of sockets"
msgstr ""

#: ../../library/asyncio-eventloops.rst:94
msgid ""
"Pipes are not supported (ex: :meth:`~BaseEventLoop.connect_read_pipe`, "
":meth:`~BaseEventLoop.connect_write_pipe`)"
msgstr ""

#: ../../library/asyncio-eventloops.rst:97
msgid ""
":ref:`Subprocesses <asyncio-subprocess>` are not supported (ex: "
":meth:`~BaseEventLoop.subprocess_exec`, "
":meth:`~BaseEventLoop.subprocess_shell`)"
msgstr ""

#: ../../library/asyncio-eventloops.rst:101
msgid ":class:`ProactorEventLoop` specific limits:"
msgstr ""

#: ../../library/asyncio-eventloops.rst:103
msgid ":meth:`~BaseEventLoop.create_datagram_endpoint` (UDP) is not supported"
msgstr ""

#: ../../library/asyncio-eventloops.rst:104
msgid ""
":meth:`~BaseEventLoop.add_reader` and :meth:`~BaseEventLoop.add_writer` "
"are not supported"
msgstr ""

#: ../../library/asyncio-eventloops.rst:107
msgid ""
"The resolution of the monotonic clock on Windows is usually around 15.6 "
"msec. The best resolution is 0.5 msec. The resolution depends on the "
"hardware (availability of `HPET "
"<http://fr.wikipedia.org/wiki/High_Precision_Event_Timer>`_) and on the "
"Windows configuration. See :ref:`asyncio delayed calls <asyncio-delayed-"
"calls>`."
msgstr ""

#: ../../library/asyncio-eventloops.rst:115
msgid ":class:`ProactorEventLoop` now supports SSL."
msgstr ""

#: ../../library/asyncio-eventloops.rst:119
msgid "Mac OS X"
msgstr ""

#: ../../library/asyncio-eventloops.rst:121
msgid ""
"Character devices like PTY are only well supported since Mavericks (Mac "
"OS 10.9). They are not supported at all on Mac OS 10.5 and older."
msgstr ""

#: ../../library/asyncio-eventloops.rst:124
msgid ""
"On Mac OS 10.6, 10.7 and 10.8, the default event loop is "
":class:`SelectorEventLoop` which uses :class:`selectors.KqueueSelector`. "
":class:`selectors.KqueueSelector` does not support character devices on "
"these versions.  The :class:`SelectorEventLoop` can be used with "
":class:`~selectors.SelectSelector` or :class:`~selectors.PollSelector` to"
" support character devices on these versions of Mac OS X. Example::"
msgstr ""

#: ../../library/asyncio-eventloops.rst:140
msgid "Event loop policies and the default policy"
msgstr ""

#: ../../library/asyncio-eventloops.rst:142
msgid ""
"Event loop management is abstracted with a *policy* pattern, to provide "
"maximal flexibility for custom platforms and frameworks. Throughout the "
"execution of a process, a single global policy object manages the event "
"loops available to the process based on the calling context. A policy is "
"an object implementing the :class:`AbstractEventLoopPolicy` interface."
msgstr ""

#: ../../library/asyncio-eventloops.rst:148
msgid ""
"For most users of :mod:`asyncio`, policies never have to be dealt with "
"explicitly, since the default global policy is sufficient."
msgstr ""

#: ../../library/asyncio-eventloops.rst:151
msgid ""
"The default policy defines context as the current thread, and manages an "
"event loop per thread that interacts with :mod:`asyncio`. The module-"
"level functions :func:`get_event_loop` and :func:`set_event_loop` provide"
" convenient access to event loops managed by the default policy."
msgstr ""

#: ../../library/asyncio-eventloops.rst:158
msgid "Event loop policy interface"
msgstr ""

#: ../../library/asyncio-eventloops.rst:160
msgid "An event loop policy must implement the following interface:"
msgstr ""

#: ../../library/asyncio-eventloops.rst:164
msgid "Event loop policy."
msgstr ""

#: ../../library/asyncio-eventloops.rst:168
msgid "Get the event loop for the current context."
msgstr ""

#: ../../library/asyncio-eventloops.rst:170
msgid ""
"Returns an event loop object implementing the :class:`BaseEventLoop` "
"interface."
msgstr ""

#: ../../library/asyncio-eventloops.rst:173
msgid ""
"Raises an exception in case no event loop has been set for the current "
"context and the current policy does not specify to create one. It must "
"never return ``None``."
msgstr ""

#: ../../library/asyncio-eventloops.rst:179
msgid "Set the event loop for the current context to *loop*."
msgstr ""

#: ../../library/asyncio-eventloops.rst:183
msgid ""
"Create and return a new event loop object according to this policy's "
"rules."
msgstr ""

#: ../../library/asyncio-eventloops.rst:186
msgid ""
"If there's need to set this loop as the event loop for the current "
"context, :meth:`set_event_loop` must be called explicitly."
msgstr ""

#: ../../library/asyncio-eventloops.rst:191
msgid "Access to the global loop policy"
msgstr ""

#: ../../library/asyncio-eventloops.rst:195
msgid "Get the current event loop policy."
msgstr ""

#: ../../library/asyncio-eventloops.rst:199
msgid ""
"Set the current event loop policy. If *policy* is ``None``, the default "
"policy is restored."
msgstr ""

#~ msgid ""
#~ "The resolution of the monotonic clock"
#~ " on Windows is usually around 15.6"
#~ " msec. The best resolution is 0.5 "
#~ "msec. The resolution depends on the "
#~ "hardware (availability of `HPET "
#~ "<http://en.wikipedia.org/wiki/High_Precision_Event_Timer>`_) and"
#~ " on the Windows configuration. See "
#~ ":ref:`asyncio delayed calls <asyncio-"
#~ "delayed-calls>`."
#~ msgstr ""

