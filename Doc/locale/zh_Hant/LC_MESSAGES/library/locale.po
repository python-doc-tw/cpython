# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-09 21:33+0800\n"
"PO-Revision-Date: 2015-12-09 17:51+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hant\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/locale.rst:2
msgid ":mod:`locale` --- Internationalization services"
msgstr ""

#: ../../library/locale.rst:10
msgid ""
"The :mod:`locale` module opens access to the POSIX locale database and "
"functionality. The POSIX locale mechanism allows programmers to deal with "
"certain cultural issues in an application, without requiring the programmer "
"to know all the specifics of each country where the software is executed."
msgstr ""

#: ../../library/locale.rst:17
msgid ""
"The :mod:`locale` module is implemented on top of the :mod:`_locale` module,"
" which in turn uses an ANSI C locale implementation if available."
msgstr ""

#: ../../library/locale.rst:20
msgid ""
"The :mod:`locale` module defines the following exception and functions:"
msgstr ""

#: ../../library/locale.rst:25
msgid ""
"Exception raised when the locale passed to :func:`setlocale` is not "
"recognized."
msgstr ""

#: ../../library/locale.rst:31
msgid ""
"If *locale* is given and not ``None``, :func:`setlocale` modifies the locale"
" setting for the *category*. The available categories are listed in the data"
" description below. *locale* may be a string, or an iterable of two strings "
"(language code and encoding). If it's an iterable, it's converted to a "
"locale name using the locale aliasing engine. An empty string specifies the "
"user's default settings. If the modification of the locale fails, the "
"exception :exc:`Error` is raised. If successful, the new locale setting is "
"returned."
msgstr ""

#: ../../library/locale.rst:39
msgid ""
"If *locale* is omitted or ``None``, the current setting for *category* is "
"returned."
msgstr ""

#: ../../library/locale.rst:42
msgid ""
":func:`setlocale` is not thread-safe on most systems. Applications typically"
" start with a call of ::"
msgstr ""

#: ../../library/locale.rst:48
msgid ""
"This sets the locale for all categories to the user's default setting "
"(typically specified in the :envvar:`LANG` environment variable).  If the "
"locale is not changed thereafter, using multithreading should not cause "
"problems."
msgstr ""

#: ../../library/locale.rst:55
msgid ""
"Returns the database of the local conventions as a dictionary. This "
"dictionary has the following strings as keys:"
msgstr ""

#: ../../library/locale.rst:61
msgid "Category"
msgstr ""

#: ../../library/locale.rst:61
msgid "Key"
msgstr ""

#: ../../library/locale.rst:61
msgid "Meaning"
msgstr ""

#: ../../library/locale.rst:63
msgid ":const:`LC_NUMERIC`"
msgstr ""

#: ../../library/locale.rst:63
msgid "``'decimal_point'``"
msgstr ""

#: ../../library/locale.rst:63
msgid "Decimal point character."
msgstr ""

#: ../../library/locale.rst:65
msgid "``'grouping'``"
msgstr ""

#: ../../library/locale.rst:65
msgid ""
"Sequence of numbers specifying which relative positions the "
"``'thousands_sep'`` is expected.  If the sequence is terminated with "
":const:`CHAR_MAX`, no further grouping is performed. If the sequence "
"terminates with a ``0``,  the last group size is repeatedly used."
msgstr ""

#: ../../library/locale.rst:76
msgid "``'thousands_sep'``"
msgstr ""

#: ../../library/locale.rst:76
msgid "Character used between groups."
msgstr ""

#: ../../library/locale.rst:78
msgid ":const:`LC_MONETARY`"
msgstr ""

#: ../../library/locale.rst:78
msgid "``'int_curr_symbol'``"
msgstr ""

#: ../../library/locale.rst:78
msgid "International currency symbol."
msgstr ""

#: ../../library/locale.rst:80
msgid "``'currency_symbol'``"
msgstr ""

#: ../../library/locale.rst:80
msgid "Local currency symbol."
msgstr ""

#: ../../library/locale.rst:82
msgid "``'p_cs_precedes/n_cs_precedes'``"
msgstr ""

#: ../../library/locale.rst:82
msgid ""
"Whether the currency symbol precedes the value (for positive resp. negative "
"values)."
msgstr ""

#: ../../library/locale.rst:87
msgid "``'p_sep_by_space/n_sep_by_space'``"
msgstr ""

#: ../../library/locale.rst:87
msgid ""
"Whether the currency symbol is separated from the value  by a space (for "
"positive resp. negative values)."
msgstr ""

#: ../../library/locale.rst:92
msgid "``'mon_decimal_point'``"
msgstr ""

#: ../../library/locale.rst:92
msgid "Decimal point used for monetary values."
msgstr ""

#: ../../library/locale.rst:95
msgid "``'frac_digits'``"
msgstr ""

#: ../../library/locale.rst:95
msgid ""
"Number of fractional digits used in local formatting of monetary values."
msgstr ""

#: ../../library/locale.rst:99
msgid "``'int_frac_digits'``"
msgstr ""

#: ../../library/locale.rst:99
msgid ""
"Number of fractional digits used in international formatting of monetary "
"values."
msgstr ""

#: ../../library/locale.rst:103
msgid "``'mon_thousands_sep'``"
msgstr ""

#: ../../library/locale.rst:103
msgid "Group separator used for monetary values."
msgstr ""

#: ../../library/locale.rst:106
msgid "``'mon_grouping'``"
msgstr ""

#: ../../library/locale.rst:106
msgid "Equivalent to ``'grouping'``, used for monetary values."
msgstr ""

#: ../../library/locale.rst:109
msgid "``'positive_sign'``"
msgstr ""

#: ../../library/locale.rst:109
msgid "Symbol used to annotate a positive monetary value."
msgstr ""

#: ../../library/locale.rst:112
msgid "``'negative_sign'``"
msgstr ""

#: ../../library/locale.rst:112
msgid "Symbol used to annotate a negative monetary value."
msgstr ""

#: ../../library/locale.rst:115
msgid "``'p_sign_posn/n_sign_posn'``"
msgstr ""

#: ../../library/locale.rst:115
msgid ""
"The position of the sign (for positive resp. negative values), see below."
msgstr ""

#: ../../library/locale.rst:120
msgid ""
"All numeric values can be set to :const:`CHAR_MAX` to indicate that there is"
" no value specified in this locale."
msgstr ""

#: ../../library/locale.rst:123
msgid ""
"The possible values for ``'p_sign_posn'`` and ``'n_sign_posn'`` are given "
"below."
msgstr ""

#: ../../library/locale.rst:126
msgid "Value"
msgstr ""

#: ../../library/locale.rst:126
msgid "Explanation"
msgstr ""

#: ../../library/locale.rst:128
msgid "``0``"
msgstr ""

#: ../../library/locale.rst:128
msgid "Currency and value are surrounded by parentheses."
msgstr ""

#: ../../library/locale.rst:131
msgid "``1``"
msgstr ""

#: ../../library/locale.rst:131
msgid "The sign should precede the value and currency symbol."
msgstr ""

#: ../../library/locale.rst:134
msgid "``2``"
msgstr ""

#: ../../library/locale.rst:134
msgid "The sign should follow the value and currency symbol."
msgstr ""

#: ../../library/locale.rst:137
msgid "``3``"
msgstr ""

#: ../../library/locale.rst:137
msgid "The sign should immediately precede the value."
msgstr ""

#: ../../library/locale.rst:140
msgid "``4``"
msgstr ""

#: ../../library/locale.rst:140
msgid "The sign should immediately follow the value."
msgstr ""

#: ../../library/locale.rst:143
msgid "``CHAR_MAX``"
msgstr ""

#: ../../library/locale.rst:143
msgid "Nothing is specified in this locale."
msgstr ""

#: ../../library/locale.rst:149
msgid ""
"Return some locale-specific information as a string.  This function is not "
"available on all systems, and the set of possible options might also vary "
"across platforms.  The possible argument values are numbers, for which "
"symbolic constants are available in the locale module."
msgstr ""

#: ../../library/locale.rst:154
msgid ""
"The :func:`nl_langinfo` function accepts one of the following keys.  Most "
"descriptions are taken from the corresponding description in the GNU C "
"library."
msgstr ""

#: ../../library/locale.rst:160
msgid ""
"Get a string with the name of the character encoding used in the selected "
"locale."
msgstr ""

#: ../../library/locale.rst:165
msgid ""
"Get a string that can be used as a format string for :func:`time.strftime` "
"to represent date and time in a locale-specific way."
msgstr ""

#: ../../library/locale.rst:170
msgid ""
"Get a string that can be used as a format string for :func:`time.strftime` "
"to represent a date in a locale-specific way."
msgstr ""

#: ../../library/locale.rst:175
msgid ""
"Get a string that can be used as a format string for :func:`time.strftime` "
"to represent a time in a locale-specific way."
msgstr ""

#: ../../library/locale.rst:180
msgid ""
"Get a format string for :func:`time.strftime` to represent time in the am/pm"
" format."
msgstr ""

#: ../../library/locale.rst:185
msgid "Get the name of the n-th day of the week."
msgstr ""

#: ../../library/locale.rst:189
msgid ""
"This follows the US convention of :const:`DAY_1` being Sunday, not the "
"international convention (ISO 8601) that Monday is the first day of the "
"week."
msgstr ""

#: ../../library/locale.rst:195
msgid "Get the abbreviated name of the n-th day of the week."
msgstr ""

#: ../../library/locale.rst:199
msgid "Get the name of the n-th month."
msgstr ""

#: ../../library/locale.rst:203
msgid "Get the abbreviated name of the n-th month."
msgstr ""

#: ../../library/locale.rst:207
msgid "Get the radix character (decimal dot, decimal comma, etc.)."
msgstr ""

#: ../../library/locale.rst:211
msgid "Get the separator character for thousands (groups of three digits)."
msgstr ""

#: ../../library/locale.rst:215
msgid ""
"Get a regular expression that can be used with the regex function to "
"recognize a positive response to a yes/no question."
msgstr ""

#: ../../library/locale.rst:220
msgid ""
"The expression is in the syntax suitable for the :c:func:`regex` function "
"from the C library, which might differ from the syntax used in :mod:`re`."
msgstr ""

#: ../../library/locale.rst:225
msgid ""
"Get a regular expression that can be used with the regex(3) function to "
"recognize a negative response to a yes/no question."
msgstr ""

#: ../../library/locale.rst:230
msgid ""
"Get the currency symbol, preceded by \"-\" if the symbol should appear "
"before the value, \"+\" if the symbol should appear after the value, or "
"\".\" if the symbol should replace the radix character."
msgstr ""

#: ../../library/locale.rst:236
msgid "Get a string that represents the era used in the current locale."
msgstr ""

#: ../../library/locale.rst:238
msgid ""
"Most locales do not define this value.  An example of a locale which does "
"define this value is the Japanese one.  In Japan, the traditional "
"representation of dates includes the name of the era corresponding to the "
"then-emperor's reign."
msgstr ""

#: ../../library/locale.rst:243
msgid ""
"Normally it should not be necessary to use this value directly. Specifying "
"the ``E`` modifier in their format strings causes the :func:`time.strftime` "
"function to use this information.  The format of the returned string is not "
"specified, and therefore you should not assume knowledge of it on different "
"systems."
msgstr ""

#: ../../library/locale.rst:251
msgid ""
"Get a format string for :func:`time.strftime` to represent date and time in "
"a locale-specific era-based way."
msgstr ""

#: ../../library/locale.rst:256
msgid ""
"Get a format string for :func:`time.strftime` to represent a date in a "
"locale-specific era-based way."
msgstr ""

#: ../../library/locale.rst:261
msgid ""
"Get a format string for :func:`time.strftime` to represent a time in a "
"locale-specific era-based way."
msgstr ""

#: ../../library/locale.rst:266
msgid ""
"Get a representation of up to 100 values used to represent the values 0 to "
"99."
msgstr ""

#: ../../library/locale.rst:272
msgid ""
"Tries to determine the default locale settings and returns them as a tuple "
"of the form ``(language code, encoding)``."
msgstr ""

#: ../../library/locale.rst:275
msgid ""
"According to POSIX, a program which has not called ``setlocale(LC_ALL, '')``"
" runs using the portable ``'C'`` locale.  Calling ``setlocale(LC_ALL, '')`` "
"lets it use the default locale as defined by the :envvar:`LANG` variable.  "
"Since we do not want to interfere with the current locale setting we thus "
"emulate the behavior in the way described above."
msgstr ""

#: ../../library/locale.rst:281
msgid ""
"To maintain compatibility with other platforms, not only the :envvar:`LANG` "
"variable is tested, but a list of variables given as envvars parameter.  The"
" first found to be defined will be used.  *envvars* defaults to the search "
"path used in GNU gettext; it must always contain the variable name "
"``'LANG'``.  The GNU gettext search path contains ``'LC_ALL'``, "
"``'LC_CTYPE'``, ``'LANG'`` and ``'LANGUAGE'``, in that order."
msgstr ""

#: ../../library/locale.rst:288 ../../library/locale.rst:299
msgid ""
"Except for the code ``'C'``, the language code corresponds to :rfc:`1766`. "
"*language code* and *encoding* may be ``None`` if their values cannot be "
"determined."
msgstr ""

#: ../../library/locale.rst:295
msgid ""
"Returns the current setting for the given locale category as sequence "
"containing *language code*, *encoding*. *category* may be one of the "
":const:`LC_\\*` values except :const:`LC_ALL`.  It defaults to "
":const:`LC_CTYPE`."
msgstr ""

#: ../../library/locale.rst:306
msgid ""
"Return the encoding used for text data, according to user preferences.  User"
" preferences are expressed differently on different systems, and might not "
"be available programmatically on some systems, so this function only returns"
" a guess."
msgstr ""

#: ../../library/locale.rst:311
msgid ""
"On some systems, it is necessary to invoke :func:`setlocale` to obtain the "
"user preferences, so this function is not thread-safe. If invoking setlocale"
" is not necessary or desired, *do_setlocale* should be set to ``False``."
msgstr ""

#: ../../library/locale.rst:318
msgid ""
"Returns a normalized locale code for the given locale name.  The returned "
"locale code is formatted for use with :func:`setlocale`.  If normalization "
"fails, the original name is returned unchanged."
msgstr ""

#: ../../library/locale.rst:322
msgid ""
"If the given encoding is not known, the function defaults to the default "
"encoding for the locale code just like :func:`setlocale`."
msgstr ""

#: ../../library/locale.rst:328
msgid "Sets the locale for *category* to the default setting."
msgstr ""

#: ../../library/locale.rst:330
msgid ""
"The default setting is determined by calling :func:`getdefaultlocale`. "
"*category* defaults to :const:`LC_ALL`."
msgstr ""

#: ../../library/locale.rst:336
msgid ""
"Compares two strings according to the current :const:`LC_COLLATE` setting. "
"As any other compare function, returns a negative, or a positive value, or "
"``0``, depending on whether *string1* collates before or after *string2* or "
"is equal to it."
msgstr ""

#: ../../library/locale.rst:344
msgid ""
"Transforms a string to one that can be used in locale-aware comparisons.  "
"For example, ``strxfrm(s1) < strxfrm(s2)`` is equivalent to ``strcoll(s1, "
"s2) < 0``.  This function can be used when the same string is compared "
"repeatedly, e.g. when collating a sequence of strings."
msgstr ""

#: ../../library/locale.rst:353
msgid ""
"Formats a number *val* according to the current :const:`LC_NUMERIC` setting."
" The format follows the conventions of the ``%`` operator.  For floating "
"point values, the decimal point is modified if appropriate.  If *grouping* "
"is true, also takes the grouping into account."
msgstr ""

#: ../../library/locale.rst:358
msgid ""
"If *monetary* is true, the conversion uses monetary thousands separator and "
"grouping strings."
msgstr ""

#: ../../library/locale.rst:361
msgid ""
"Please note that this function will only work for exactly one %char "
"specifier. For whole format strings, use :func:`format_string`."
msgstr ""

#: ../../library/locale.rst:367
msgid ""
"Processes formatting specifiers as in ``format % val``, but takes the "
"current locale settings into account."
msgstr ""

#: ../../library/locale.rst:373
msgid ""
"Formats a number *val* according to the current :const:`LC_MONETARY` "
"settings."
msgstr ""

#: ../../library/locale.rst:375
msgid ""
"The returned string includes the currency symbol if *symbol* is true, which "
"is the default. If *grouping* is true (which is not the default), grouping "
"is done with the value. If *international* is true (which is not the "
"default), the international currency symbol is used."
msgstr ""

#: ../../library/locale.rst:380
msgid ""
"Note that this function will not work with the 'C' locale, so you have to "
"set a locale via :func:`setlocale` first."
msgstr ""

#: ../../library/locale.rst:386
msgid ""
"Formats a floating point number using the same format as the built-in "
"function ``str(float)``, but takes the decimal point into account."
msgstr ""

#: ../../library/locale.rst:392
msgid ""
"Converts a string into a normalized number string, following the "
":const:`LC_NUMERIC` settings."
msgstr ""

#: ../../library/locale.rst:400
msgid ""
"Converts a string to a floating point number, following the "
":const:`LC_NUMERIC` settings."
msgstr ""

#: ../../library/locale.rst:406
msgid ""
"Converts a string to an integer, following the :const:`LC_NUMERIC` "
"conventions."
msgstr ""

#: ../../library/locale.rst:413
msgid ""
"Locale category for the character type functions.  Depending on the settings"
" of this category, the functions of module :mod:`string` dealing with case "
"change their behaviour."
msgstr ""

#: ../../library/locale.rst:420
msgid ""
"Locale category for sorting strings.  The functions :func:`strcoll` and "
":func:`strxfrm` of the :mod:`locale` module are affected."
msgstr ""

#: ../../library/locale.rst:426
msgid ""
"Locale category for the formatting of time.  The function "
":func:`time.strftime` follows these conventions."
msgstr ""

#: ../../library/locale.rst:432
msgid ""
"Locale category for formatting of monetary values.  The available options "
"are available from the :func:`localeconv` function."
msgstr ""

#: ../../library/locale.rst:438
msgid ""
"Locale category for message display. Python currently does not support "
"application specific locale-aware messages.  Messages displayed by the "
"operating system, like those returned by :func:`os.strerror` might be "
"affected by this category."
msgstr ""

#: ../../library/locale.rst:446
msgid ""
"Locale category for formatting numbers.  The functions :func:`.format`, "
":func:`atoi`, :func:`atof` and :func:`.str` of the :mod:`locale` module are "
"affected by that category.  All other numeric formatting operations are not "
"affected."
msgstr ""

#: ../../library/locale.rst:454
msgid ""
"Combination of all locale settings.  If this flag is used when the locale is"
" changed, setting the locale for all categories is attempted. If that fails "
"for any category, no category is changed at all.  When the locale is "
"retrieved using this flag, a string indicating the setting for all "
"categories is returned. This string can be later used to restore the "
"settings."
msgstr ""

#: ../../library/locale.rst:463
msgid ""
"This is a symbolic constant used for different values returned by "
":func:`localeconv`."
msgstr ""

#: ../../library/locale.rst:467
msgid "Example::"
msgstr ""

#: ../../library/locale.rst:480
msgid "Background, details, hints, tips and caveats"
msgstr ""

#: ../../library/locale.rst:482
msgid ""
"The C standard defines the locale as a program-wide property that may be "
"relatively expensive to change.  On top of that, some implementation are "
"broken in such a way that frequent locale changes may cause core dumps.  "
"This makes the locale somewhat painful to use correctly."
msgstr ""

#: ../../library/locale.rst:487
msgid ""
"Initially, when a program is started, the locale is the ``C`` locale, no "
"matter what the user's preferred locale is.  There is one exception: the "
":data:`LC_CTYPE` category is changed at startup to set the current locale "
"encoding to the user's preferred locale encoding. The program must "
"explicitly say that it wants the user's preferred locale settings for other "
"categories by calling ``setlocale(LC_ALL, '')``."
msgstr ""

#: ../../library/locale.rst:494
msgid ""
"It is generally a bad idea to call :func:`setlocale` in some library "
"routine, since as a side effect it affects the entire program.  Saving and "
"restoring it is almost as bad: it is expensive and affects other threads "
"that happen to run before the settings have been restored."
msgstr ""

#: ../../library/locale.rst:499
msgid ""
"If, when coding a module for general use, you need a locale independent "
"version of an operation that is affected by the locale (such as certain "
"formats used with :func:`time.strftime`), you will have to find a way to do "
"it without using the standard library routine.  Even better is convincing "
"yourself that using locale settings is okay.  Only as a last resort should "
"you document that your module is not compatible with non-\\ ``C`` locale "
"settings."
msgstr ""

#: ../../library/locale.rst:506
msgid ""
"The only way to perform numeric operations according to the locale is to use"
" the special functions defined by this module: :func:`atof`, :func:`atoi`, "
":func:`.format`, :func:`.str`."
msgstr ""

#: ../../library/locale.rst:510
msgid ""
"There is no way to perform case conversions and character classifications "
"according to the locale.  For (Unicode) text strings these are done "
"according to the character value only, while for byte strings, the "
"conversions and classifications are done according to the ASCII value of the"
" byte, and bytes whose high bit is set (i.e., non-ASCII bytes) are never "
"converted or considered part of a character class such as letter or "
"whitespace."
msgstr ""

#: ../../library/locale.rst:521
msgid "For extension writers and programs that embed Python"
msgstr ""

#: ../../library/locale.rst:523
msgid ""
"Extension modules should never call :func:`setlocale`, except to find out "
"what the current locale is.  But since the return value can only be used "
"portably to restore it, that is not very useful (except perhaps to find out "
"whether or not the locale is ``C``)."
msgstr ""

#: ../../library/locale.rst:528
msgid ""
"When Python code uses the :mod:`locale` module to change the locale, this "
"also affects the embedding application.  If the embedding application "
"doesn't want this to happen, it should remove the :mod:`_locale` extension "
"module (which does all the work) from the table of built-in modules in the "
":file:`config.c` file, and make sure that the :mod:`_locale` module is not "
"accessible as a shared library."
msgstr ""

#: ../../library/locale.rst:539
msgid "Access to message catalogs"
msgstr ""

#: ../../library/locale.rst:541
msgid ""
"The locale module exposes the C library's gettext interface on systems that "
"provide this interface.  It consists of the functions :func:`gettext`, "
":func:`dgettext`, :func:`dcgettext`, :func:`textdomain`, "
":func:`bindtextdomain`, and :func:`bind_textdomain_codeset`.  These are "
"similar to the same functions in the :mod:`gettext` module, but use the C "
"library's binary format for message catalogs, and the C library's search "
"algorithms for locating message catalogs."
msgstr ""

#: ../../library/locale.rst:548
msgid ""
"Python applications should normally find no need to invoke these functions, "
"and should use :mod:`gettext` instead.  A known exception to this rule are "
"applications that link with additional C libraries which internally invoke "
":c:func:`gettext` or :func:`dcgettext`.  For these applications, it may be "
"necessary to bind the text domain, so that the libraries can properly locate"
" their message catalogs."
msgstr ""
