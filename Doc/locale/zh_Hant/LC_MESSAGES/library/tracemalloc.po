# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-09 21:33+0800\n"
"PO-Revision-Date: 2015-12-09 17:51+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hant\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/tracemalloc.rst:2
msgid ":mod:`tracemalloc` --- Trace memory allocations"
msgstr ""

#: ../../library/tracemalloc.rst:9
msgid ""
"The tracemalloc module is a debug tool to trace memory blocks allocated by "
"Python. It provides the following information:"
msgstr ""

#: ../../library/tracemalloc.rst:12
msgid "Traceback where an object was allocated"
msgstr ""

#: ../../library/tracemalloc.rst:13
msgid ""
"Statistics on allocated memory blocks per filename and per line number: "
"total size, number and average size of allocated memory blocks"
msgstr ""

#: ../../library/tracemalloc.rst:15
msgid "Compute the differences between two snapshots to detect memory leaks"
msgstr ""

#: ../../library/tracemalloc.rst:17
msgid ""
"To trace most memory blocks allocated by Python, the module should be "
"started as early as possible by setting the :envvar:`PYTHONTRACEMALLOC` "
"environment variable to ``1``, or by using :option:`-X` ``tracemalloc`` "
"command line option. The :func:`tracemalloc.start` function can be called at"
" runtime to start tracing Python memory allocations."
msgstr ""

#: ../../library/tracemalloc.rst:23
msgid ""
"By default, a trace of an allocated memory block only stores the most recent"
" frame (1 frame). To store 25 frames at startup: set the "
":envvar:`PYTHONTRACEMALLOC` environment variable to ``25``, or use the "
":option:`-X` ``tracemalloc=25`` command line option."
msgstr ""

#: ../../library/tracemalloc.rst:30
msgid "Examples"
msgstr ""

#: ../../library/tracemalloc.rst:33
msgid "Display the top 10"
msgstr ""

#: ../../library/tracemalloc.rst:35
msgid "Display the 10 files allocating the most memory::"
msgstr ""

#: ../../library/tracemalloc.rst:51 ../../library/tracemalloc.rst:223
msgid "Example of output of the Python test suite::"
msgstr ""

#: ../../library/tracemalloc.rst:65
msgid ""
"We can see that Python loaded ``4.8 MiB`` data (bytecode and constants) from"
" modules and that the :mod:`collections` module allocated ``244 KiB`` to "
"build :class:`~collections.namedtuple` types."
msgstr ""

#: ../../library/tracemalloc.rst:69 ../../library/tracemalloc.rst:248
msgid "See :meth:`Snapshot.statistics` for more options."
msgstr ""

#: ../../library/tracemalloc.rst:73
msgid "Compute differences"
msgstr ""

#: ../../library/tracemalloc.rst:75
msgid "Take two snapshots and display the differences::"
msgstr ""

#: ../../library/tracemalloc.rst:91
msgid ""
"Example of output before/after running some tests of the Python test suite::"
msgstr ""

#: ../../library/tracemalloc.rst:105
msgid ""
"We can see that Python has loaded ``8.2 MiB`` of module data (bytecode and "
"constants), and that this is ``4.4 MiB`` more than had been loaded before "
"the tests, when the previous snapshot was taken. Similarly, the "
":mod:`linecache` module has cached ``940 KiB`` of Python source code to "
"format tracebacks, all of it since the previous snapshot."
msgstr ""

#: ../../library/tracemalloc.rst:111
msgid ""
"If the system has little free memory, snapshots can be written on disk using"
" the :meth:`Snapshot.dump` method to analyze the snapshot offline. Then use "
"the :meth:`Snapshot.load` method reload the snapshot."
msgstr ""

#: ../../library/tracemalloc.rst:117
msgid "Get the traceback of a memory block"
msgstr ""

#: ../../library/tracemalloc.rst:119
msgid "Code to display the traceback of the biggest memory block::"
msgstr ""

#: ../../library/tracemalloc.rst:137
msgid ""
"Example of output of the Python test suite (traceback limited to 25 "
"frames)::"
msgstr ""

#: ../../library/tracemalloc.rst:174
msgid ""
"We can see that the most memory was allocated in the :mod:`importlib` module"
" to load data (bytecode and constants) from modules: ``870 KiB``. The "
"traceback is where the :mod:`importlib` loaded data most recently: on the "
"``import pdb`` line of the :mod:`doctest` module. The traceback may change "
"if a new module is loaded."
msgstr ""

#: ../../library/tracemalloc.rst:182
msgid "Pretty top"
msgstr ""

#: ../../library/tracemalloc.rst:184
msgid ""
"Code to display the 10 lines allocating the most memory with a pretty "
"output, ignoring ``<frozen importlib._bootstrap>`` and ``<unknown>`` files::"
msgstr ""

#: ../../library/tracemalloc.rst:252
msgid "API"
msgstr ""

#: ../../library/tracemalloc.rst:255
msgid "Functions"
msgstr ""

#: ../../library/tracemalloc.rst:259
msgid "Clear traces of memory blocks allocated by Python."
msgstr ""

#: ../../library/tracemalloc.rst:261
msgid "See also :func:`stop`."
msgstr ""

#: ../../library/tracemalloc.rst:266
msgid ""
"Get the traceback where the Python object *obj* was allocated. Return a "
":class:`Traceback` instance, or ``None`` if the :mod:`tracemalloc` module is"
" not tracing memory allocations or did not trace the allocation of the "
"object."
msgstr ""

#: ../../library/tracemalloc.rst:271
msgid "See also :func:`gc.get_referrers` and :func:`sys.getsizeof` functions."
msgstr ""

#: ../../library/tracemalloc.rst:276
msgid "Get the maximum number of frames stored in the traceback of a trace."
msgstr ""

#: ../../library/tracemalloc.rst:278
msgid ""
"The :mod:`tracemalloc` module must be tracing memory allocations to get the "
"limit, otherwise an exception is raised."
msgstr ""

#: ../../library/tracemalloc.rst:281
msgid "The limit is set by the :func:`start` function."
msgstr ""

#: ../../library/tracemalloc.rst:286
msgid ""
"Get the current size and peak size of memory blocks traced by the "
":mod:`tracemalloc` module as a tuple: ``(current: int, peak: int)``."
msgstr ""

#: ../../library/tracemalloc.rst:292
msgid ""
"Get the memory usage in bytes of the :mod:`tracemalloc` module used to store"
" traces of memory blocks. Return an :class:`int`."
msgstr ""

#: ../../library/tracemalloc.rst:299
msgid ""
"``True`` if the :mod:`tracemalloc` module is tracing Python memory "
"allocations, ``False`` otherwise."
msgstr ""

#: ../../library/tracemalloc.rst:302
msgid "See also :func:`start` and :func:`stop` functions."
msgstr ""

#: ../../library/tracemalloc.rst:307
msgid ""
"Start tracing Python memory allocations: install hooks on Python memory "
"allocators. Collected tracebacks of traces will be limited to *nframe* "
"frames. By default, a trace of a memory block only stores the most recent "
"frame: the limit is ``1``. *nframe* must be greater or equal to ``1``."
msgstr ""

#: ../../library/tracemalloc.rst:312
msgid ""
"Storing more than ``1`` frame is only useful to compute statistics grouped "
"by ``'traceback'`` or to compute cumulative statistics: see the "
":meth:`Snapshot.compare_to` and :meth:`Snapshot.statistics` methods."
msgstr ""

#: ../../library/tracemalloc.rst:316
msgid ""
"Storing more frames increases the memory and CPU overhead of the "
":mod:`tracemalloc` module. Use the :func:`get_tracemalloc_memory` function "
"to measure how much memory is used by the :mod:`tracemalloc` module."
msgstr ""

#: ../../library/tracemalloc.rst:320
msgid ""
"The :envvar:`PYTHONTRACEMALLOC` environment variable "
"(``PYTHONTRACEMALLOC=NFRAME``) and the :option:`-X` ``tracemalloc=NFRAME`` "
"command line option can be used to start tracing at startup."
msgstr ""

#: ../../library/tracemalloc.rst:324
msgid ""
"See also :func:`stop`, :func:`is_tracing` and :func:`get_traceback_limit` "
"functions."
msgstr ""

#: ../../library/tracemalloc.rst:330
msgid ""
"Stop tracing Python memory allocations: uninstall hooks on Python memory "
"allocators. Also clears all previously collected traces of memory blocks "
"allocated by Python."
msgstr ""

#: ../../library/tracemalloc.rst:334
msgid ""
"Call :func:`take_snapshot` function to take a snapshot of traces before "
"clearing them."
msgstr ""

#: ../../library/tracemalloc.rst:337
msgid ""
"See also :func:`start`, :func:`is_tracing` and :func:`clear_traces` "
"functions."
msgstr ""

#: ../../library/tracemalloc.rst:343
msgid ""
"Take a snapshot of traces of memory blocks allocated by Python. Return a new"
" :class:`Snapshot` instance."
msgstr ""

#: ../../library/tracemalloc.rst:346
msgid ""
"The snapshot does not include memory blocks allocated before the "
":mod:`tracemalloc` module started to trace memory allocations."
msgstr ""

#: ../../library/tracemalloc.rst:349
msgid ""
"Tracebacks of traces are limited to :func:`get_traceback_limit` frames. Use "
"the *nframe* parameter of the :func:`start` function to store more frames."
msgstr ""

#: ../../library/tracemalloc.rst:352
msgid ""
"The :mod:`tracemalloc` module must be tracing memory allocations to take a "
"snapshot, see the :func:`start` function."
msgstr ""

#: ../../library/tracemalloc.rst:355
msgid "See also the :func:`get_object_traceback` function."
msgstr ""

#: ../../library/tracemalloc.rst:359
msgid "Filter"
msgstr ""

#: ../../library/tracemalloc.rst:363
msgid "Filter on traces of memory blocks."
msgstr ""

#: ../../library/tracemalloc.rst:365
msgid ""
"See the :func:`fnmatch.fnmatch` function for the syntax of "
"*filename_pattern*. The ``'.pyc'`` file extension is replaced with "
"``'.py'``."
msgstr ""

#: ../../library/tracemalloc.rst:369
msgid "Examples:"
msgstr ""

#: ../../library/tracemalloc.rst:371
msgid ""
"``Filter(True, subprocess.__file__)`` only includes traces of the "
":mod:`subprocess` module"
msgstr ""

#: ../../library/tracemalloc.rst:373
msgid ""
"``Filter(False, tracemalloc.__file__)`` excludes traces of the "
":mod:`tracemalloc` module"
msgstr ""

#: ../../library/tracemalloc.rst:375
msgid "``Filter(False, \"<unknown>\")`` excludes empty tracebacks"
msgstr ""

#: ../../library/tracemalloc.rst:378
msgid "The ``'.pyo'`` file extension is no longer replaced with ``'.py'``."
msgstr ""

#: ../../library/tracemalloc.rst:383
msgid ""
"If *inclusive* is ``True`` (include), only trace memory blocks allocated in "
"a file with a name matching :attr:`filename_pattern` at line number "
":attr:`lineno`."
msgstr ""

#: ../../library/tracemalloc.rst:387
msgid ""
"If *inclusive* is ``False`` (exclude), ignore memory blocks allocated in a "
"file with a name matching :attr:`filename_pattern` at line number "
":attr:`lineno`."
msgstr ""

#: ../../library/tracemalloc.rst:393
msgid ""
"Line number (``int``) of the filter. If *lineno* is ``None``, the filter "
"matches any line number."
msgstr ""

#: ../../library/tracemalloc.rst:398
msgid "Filename pattern of the filter (``str``)."
msgstr ""

#: ../../library/tracemalloc.rst:402
msgid ""
"If *all_frames* is ``True``, all frames of the traceback are checked. If "
"*all_frames* is ``False``, only the most recent frame is checked."
msgstr ""

#: ../../library/tracemalloc.rst:405
msgid ""
"This attribute has no effect if the traceback limit is ``1``.  See the "
":func:`get_traceback_limit` function and :attr:`Snapshot.traceback_limit` "
"attribute."
msgstr ""

#: ../../library/tracemalloc.rst:411
msgid "Frame"
msgstr ""

#: ../../library/tracemalloc.rst:415
msgid "Frame of a traceback."
msgstr ""

#: ../../library/tracemalloc.rst:417
msgid ""
"The :class:`Traceback` class is a sequence of :class:`Frame` instances."
msgstr ""

#: ../../library/tracemalloc.rst:421
msgid "Filename (``str``)."
msgstr ""

#: ../../library/tracemalloc.rst:425
msgid "Line number (``int``)."
msgstr ""

#: ../../library/tracemalloc.rst:429
msgid "Snapshot"
msgstr ""

#: ../../library/tracemalloc.rst:433
msgid "Snapshot of traces of memory blocks allocated by Python."
msgstr ""

#: ../../library/tracemalloc.rst:435
msgid "The :func:`take_snapshot` function creates a snapshot instance."
msgstr ""

#: ../../library/tracemalloc.rst:439
msgid ""
"Compute the differences with an old snapshot. Get statistics as a sorted "
"list of :class:`StatisticDiff` instances grouped by *group_by*."
msgstr ""

#: ../../library/tracemalloc.rst:442
msgid ""
"See the :meth:`Snapshot.statistics` method for *group_by* and *cumulative* "
"parameters."
msgstr ""

#: ../../library/tracemalloc.rst:445
msgid ""
"The result is sorted from the biggest to the smallest by: absolute value of "
":attr:`StatisticDiff.size_diff`, :attr:`StatisticDiff.size`, absolute value "
"of :attr:`StatisticDiff.count_diff`, :attr:`Statistic.count` and then by "
":attr:`StatisticDiff.traceback`."
msgstr ""

#: ../../library/tracemalloc.rst:453
msgid "Write the snapshot into a file."
msgstr ""

#: ../../library/tracemalloc.rst:455
msgid "Use :meth:`load` to reload the snapshot."
msgstr ""

#: ../../library/tracemalloc.rst:460
msgid ""
"Create a new :class:`Snapshot` instance with a filtered :attr:`traces` "
"sequence, *filters* is a list of :class:`Filter` instances.  If *filters* is"
" an empty list, return a new :class:`Snapshot` instance with a copy of the "
"traces."
msgstr ""

#: ../../library/tracemalloc.rst:465
msgid ""
"All inclusive filters are applied at once, a trace is ignored if no "
"inclusive filters match it. A trace is ignored if at least one exclusive "
"filter matches it."
msgstr ""

#: ../../library/tracemalloc.rst:472
msgid "Load a snapshot from a file."
msgstr ""

#: ../../library/tracemalloc.rst:474
msgid "See also :meth:`dump`."
msgstr ""

#: ../../library/tracemalloc.rst:479
msgid ""
"Get statistics as a sorted list of :class:`Statistic` instances grouped by "
"*group_by*:"
msgstr ""

#: ../../library/tracemalloc.rst:483
msgid "group_by"
msgstr ""

#: ../../library/tracemalloc.rst:483
msgid "description"
msgstr ""

#: ../../library/tracemalloc.rst:485
msgid "``'filename'``"
msgstr ""

#: ../../library/tracemalloc.rst:485
msgid "filename"
msgstr ""

#: ../../library/tracemalloc.rst:486
msgid "``'lineno'``"
msgstr ""

#: ../../library/tracemalloc.rst:486
msgid "filename and line number"
msgstr ""

#: ../../library/tracemalloc.rst:487
msgid "``'traceback'``"
msgstr ""

#: ../../library/tracemalloc.rst:487
msgid "traceback"
msgstr ""

#: ../../library/tracemalloc.rst:490
msgid ""
"If *cumulative* is ``True``, cumulate size and count of memory blocks of all"
" frames of the traceback of a trace, not only the most recent frame. The "
"cumulative mode can only be used with *group_by* equals to ``'filename'`` "
"and ``'lineno'``."
msgstr ""

#: ../../library/tracemalloc.rst:495
msgid ""
"The result is sorted from the biggest to the smallest by: "
":attr:`Statistic.size`, :attr:`Statistic.count` and then by "
":attr:`Statistic.traceback`."
msgstr ""

#: ../../library/tracemalloc.rst:502
msgid ""
"Maximum number of frames stored in the traceback of :attr:`traces`: result "
"of the :func:`get_traceback_limit` when the snapshot was taken."
msgstr ""

#: ../../library/tracemalloc.rst:507
msgid ""
"Traces of all memory blocks allocated by Python: sequence of :class:`Trace` "
"instances."
msgstr ""

#: ../../library/tracemalloc.rst:510
msgid ""
"The sequence has an undefined order. Use the :meth:`Snapshot.statistics` "
"method to get a sorted list of statistics."
msgstr ""

#: ../../library/tracemalloc.rst:515
msgid "Statistic"
msgstr ""

#: ../../library/tracemalloc.rst:519
msgid "Statistic on memory allocations."
msgstr ""

#: ../../library/tracemalloc.rst:521
msgid ""
":func:`Snapshot.statistics` returns a list of :class:`Statistic` instances."
msgstr ""

#: ../../library/tracemalloc.rst:523
msgid "See also the :class:`StatisticDiff` class."
msgstr ""

#: ../../library/tracemalloc.rst:527
msgid "Number of memory blocks (``int``)."
msgstr ""

#: ../../library/tracemalloc.rst:531
msgid "Total size of memory blocks in bytes (``int``)."
msgstr ""

#: ../../library/tracemalloc.rst:535 ../../library/tracemalloc.rst:594
msgid ""
"Traceback where the memory block was allocated, :class:`Traceback` instance."
msgstr ""

#: ../../library/tracemalloc.rst:540
msgid "StatisticDiff"
msgstr ""

#: ../../library/tracemalloc.rst:544
msgid ""
"Statistic difference on memory allocations between an old and a new "
":class:`Snapshot` instance."
msgstr ""

#: ../../library/tracemalloc.rst:547
msgid ""
":func:`Snapshot.compare_to` returns a list of :class:`StatisticDiff` "
"instances. See also the :class:`Statistic` class."
msgstr ""

#: ../../library/tracemalloc.rst:552
msgid ""
"Number of memory blocks in the new snapshot (``int``): ``0`` if the memory "
"blocks have been released in the new snapshot."
msgstr ""

#: ../../library/tracemalloc.rst:557
msgid ""
"Difference of number of memory blocks between the old and the new snapshots "
"(``int``): ``0`` if the memory blocks have been allocated in the new "
"snapshot."
msgstr ""

#: ../../library/tracemalloc.rst:563
msgid ""
"Total size of memory blocks in bytes in the new snapshot (``int``): ``0`` if"
" the memory blocks have been released in the new snapshot."
msgstr ""

#: ../../library/tracemalloc.rst:568
msgid ""
"Difference of total size of memory blocks in bytes between the old and the "
"new snapshots (``int``): ``0`` if the memory blocks have been allocated in "
"the new snapshot."
msgstr ""

#: ../../library/tracemalloc.rst:574
msgid ""
"Traceback where the memory blocks were allocated, :class:`Traceback` "
"instance."
msgstr ""

#: ../../library/tracemalloc.rst:579
msgid "Trace"
msgstr ""

#: ../../library/tracemalloc.rst:583
msgid "Trace of a memory block."
msgstr ""

#: ../../library/tracemalloc.rst:585
msgid ""
"The :attr:`Snapshot.traces` attribute is a sequence of :class:`Trace` "
"instances."
msgstr ""

#: ../../library/tracemalloc.rst:590
msgid "Size of the memory block in bytes (``int``)."
msgstr ""

#: ../../library/tracemalloc.rst:599
msgid "Traceback"
msgstr ""

#: ../../library/tracemalloc.rst:603
msgid ""
"Sequence of :class:`Frame` instances sorted from the most recent frame to "
"the oldest frame."
msgstr ""

#: ../../library/tracemalloc.rst:606
msgid ""
"A traceback contains at least ``1`` frame. If the ``tracemalloc`` module "
"failed to get a frame, the filename ``\"<unknown>\"`` at line number ``0`` "
"is used."
msgstr ""

#: ../../library/tracemalloc.rst:610
msgid ""
"When a snapshot is taken, tracebacks of traces are limited to "
":func:`get_traceback_limit` frames. See the :func:`take_snapshot` function."
msgstr ""

#: ../../library/tracemalloc.rst:613
msgid ""
"The :attr:`Trace.traceback` attribute is an instance of :class:`Traceback` "
"instance."
msgstr ""

#: ../../library/tracemalloc.rst:618
msgid ""
"Format the traceback as a list of lines with newlines.  Use the "
":mod:`linecache` module to retrieve lines from the source code.  If *limit* "
"is set, only format the *limit* most recent frames."
msgstr ""

#: ../../library/tracemalloc.rst:622
msgid ""
"Similar to the :func:`traceback.format_tb` function, except that "
":meth:`format` does not include newlines."
msgstr ""

#: ../../library/tracemalloc.rst:625
msgid "Example::"
msgstr ""

#: ../../library/tracemalloc.rst:631
msgid "Output::"
msgstr ""
