# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-18 18:19-0600\n"
"PO-Revision-Date: 2016-11-19 00:28+0000\n"
"Last-Translator: Liang Bo Wang <me@liang2.tw>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hant\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-eventloop.rst:6
msgid "Base Event Loop"
msgstr ""

#: ../../library/asyncio-eventloop.rst:8
msgid ""
"The event loop is the central execution device provided by :mod:`asyncio`. "
"It provides multiple facilities, including:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:11
msgid "Registering, executing and cancelling delayed calls (timeouts)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:13
msgid ""
"Creating client and server :ref:`transports <asyncio-transport>` for various"
" kinds of communication."
msgstr ""

#: ../../library/asyncio-eventloop.rst:16
msgid ""
"Launching subprocesses and the associated :ref:`transports <asyncio-"
"transport>` for communication with an external program."
msgstr ""

#: ../../library/asyncio-eventloop.rst:19
msgid "Delegating costly function calls to a pool of threads."
msgstr ""

#: ../../library/asyncio-eventloop.rst:23
msgid "Base class of event loops."
msgstr ""

#: ../../library/asyncio-eventloop.rst:25
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:28
msgid "Run an event loop"
msgstr ""

#: ../../library/asyncio-eventloop.rst:32
msgid ""
"Run until :meth:`stop` is called.  If :meth:`stop` is called before "
":meth:`run_forever()` is called, this polls the I/O selector once with a "
"timeout of zero, runs all callbacks scheduled in response to I/O events (and"
" those that were already scheduled), and then exits. If :meth:`stop` is "
"called while :meth:`run_forever` is running, this will run the current batch"
" of callbacks and then exit.  Note that callbacks scheduled by callbacks "
"will not run in that case; they will run the next time :meth:`run_forever` "
"is called."
msgstr ""

#: ../../library/asyncio-eventloop.rst:45
msgid "Run until the :class:`Future` is done."
msgstr ""

#: ../../library/asyncio-eventloop.rst:47
msgid ""
"If the argument is a :ref:`coroutine object <coroutine>`, it is wrapped by "
":func:`ensure_future`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:50
msgid "Return the Future's result, or raise its exception."
msgstr ""

#: ../../library/asyncio-eventloop.rst:54
msgid "Returns running status of event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:58
msgid "Stop running the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:60
msgid ""
"This causes :meth:`run_forever` to exit at the next suitable opportunity "
"(see there for more details)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:67
msgid "Returns ``True`` if the event loop was closed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:73
msgid ""
"Close the event loop. The loop must not be running.  Pending callbacks will "
"be lost."
msgstr ""

#: ../../library/asyncio-eventloop.rst:76
msgid ""
"This clears the queues and shuts down the executor, but does not wait for "
"the executor to finish."
msgstr ""

#: ../../library/asyncio-eventloop.rst:79
msgid ""
"This is idempotent and irreversible. No other methods should be called after"
" this one."
msgstr ""

#: ../../library/asyncio-eventloop.rst:85
msgid "Calls"
msgstr ""

#: ../../library/asyncio-eventloop.rst:87
msgid ""
"Most :mod:`asyncio` functions don't accept keywords. If you want to pass "
"keywords to your callback, use :func:`functools.partial`. For example, "
"``loop.call_soon(functools.partial(print, \"Hello\", flush=True))`` will "
"call ``print(\"Hello\", flush=True)``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:93
msgid ""
":func:`functools.partial` is better than ``lambda`` functions, because "
":mod:`asyncio` can inspect :func:`functools.partial` object to display "
"parameters in debug mode, whereas ``lambda`` functions have a poor "
"representation."
msgstr ""

#: ../../library/asyncio-eventloop.rst:100
msgid ""
"Arrange for a callback to be called as soon as possible.  The callback is "
"called after :meth:`call_soon` returns, when control returns to the event "
"loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:104
msgid ""
"This operates as a FIFO queue, callbacks are called in the order in which "
"they are registered.  Each callback will be called exactly once."
msgstr ""

#: ../../library/asyncio-eventloop.rst:107
msgid ""
"Any positional arguments after the callback will be passed to the callback "
"when it is called."
msgstr ""

#: ../../library/asyncio-eventloop.rst:110
#: ../../library/asyncio-eventloop.rst:144
#: ../../library/asyncio-eventloop.rst:166
msgid ""
"An instance of :class:`asyncio.Handle` is returned, which can be used to "
"cancel the callback."
msgstr ""

#: ../../library/asyncio-eventloop.rst:113
#: ../../library/asyncio-eventloop.rst:155
#: ../../library/asyncio-eventloop.rst:169
#: ../../library/asyncio-eventloop.rst:465
#: ../../library/asyncio-eventloop.rst:477
#: ../../library/asyncio-eventloop.rst:631
msgid ""
":ref:`Use functools.partial to pass keywords to the callback <asyncio-pass-"
"keywords>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:118
msgid "Like :meth:`call_soon`, but thread safe."
msgstr ""

#: ../../library/asyncio-eventloop.rst:120
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""

#: ../../library/asyncio-eventloop.rst:127
msgid "Delayed calls"
msgstr ""

#: ../../library/asyncio-eventloop.rst:129
msgid ""
"The event loop has its own internal clock for computing timeouts. Which "
"clock is used depends on the (platform-specific) event loop implementation; "
"ideally it is a monotonic clock.  This will generally be a different clock "
"than :func:`time.time`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:136
msgid ""
"Timeouts (relative *delay* or absolute *when*) should not exceed one day."
msgstr ""

#: ../../library/asyncio-eventloop.rst:141
msgid ""
"Arrange for the *callback* to be called after the given *delay* seconds "
"(either an int or float)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:147
msgid ""
"*callback* will be called exactly once per call to :meth:`call_later`. If "
"two callbacks are scheduled for exactly the same time, it is undefined which"
" will be called first."
msgstr ""

#: ../../library/asyncio-eventloop.rst:151
msgid ""
"The optional positional *args* will be passed to the callback when it is "
"called. If you want the callback to be called with some named arguments, use"
" a closure or :func:`functools.partial`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:160
msgid ""
"Arrange for the *callback* to be called at the given absolute timestamp "
"*when* (an int or float), using the same time reference as "
":meth:`BaseEventLoop.time`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:164
msgid "This method's behavior is the same as :meth:`call_later`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:174
msgid ""
"Return the current time, as a :class:`float` value, according to the event "
"loop's internal clock."
msgstr ""

#: ../../library/asyncio-eventloop.rst:179
msgid "The :func:`asyncio.sleep` function."
msgstr ""

#: ../../library/asyncio-eventloop.rst:183
msgid "Futures"
msgstr ""

#: ../../library/asyncio-eventloop.rst:187
msgid "Create an :class:`asyncio.Future` object attached to the loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:189
msgid ""
"This is a preferred way to create futures in asyncio, as event loop "
"implementations can provide alternative implementations of the Future class "
"(with better performance or instrumentation)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:197
msgid "Tasks"
msgstr ""

#: ../../library/asyncio-eventloop.rst:201
msgid ""
"Schedule the execution of a :ref:`coroutine object <coroutine>`: wrap it in "
"a future. Return a :class:`Task` object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:204
msgid ""
"Third-party event loops can use their own subclass of :class:`Task` for "
"interoperability. In this case, the result type is a subclass of "
":class:`Task`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:208
msgid ""
"This method was added in Python 3.4.2. Use the :func:`async` function to "
"support also older Python versions."
msgstr ""

#: ../../library/asyncio-eventloop.rst:215
msgid ""
"Set a task factory that will be used by :meth:`BaseEventLoop.create_task`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:218
msgid "If *factory* is ``None`` the default task factory will be set."
msgstr ""

#: ../../library/asyncio-eventloop.rst:220
msgid ""
"If *factory* is a *callable*, it should have a signature matching ``(loop, "
"coro)``, where *loop* will be a reference to the active event loop, *coro* "
"will be a coroutine object.  The callable must return an "
":class:`asyncio.Future` compatible object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:229
msgid "Return a task factory, or ``None`` if the default one is in use."
msgstr ""

#: ../../library/asyncio-eventloop.rst:235
msgid "Creating connections"
msgstr ""

#: ../../library/asyncio-eventloop.rst:239
msgid ""
"Create a streaming transport connection to a given Internet *host* and "
"*port*: socket family :py:data:`~socket.AF_INET` or "
":py:data:`~socket.AF_INET6` depending on *host* (or *family* if specified), "
"socket type :py:data:`~socket.SOCK_STREAM`.  *protocol_factory* must be a "
"callable returning a :ref:`protocol <asyncio-protocol>` instance."
msgstr ""

#: ../../library/asyncio-eventloop.rst:245
#: ../../library/asyncio-eventloop.rst:319
#: ../../library/asyncio-eventloop.rst:370
msgid ""
"This method is a :ref:`coroutine <coroutine>` which will try to establish "
"the connection in the background.  When successful, the coroutine returns a "
"``(transport, protocol)`` pair."
msgstr ""

#: ../../library/asyncio-eventloop.rst:249
msgid "The chronological synopsis of the underlying operation is as follows:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:251
msgid ""
"The connection is established, and a :ref:`transport <asyncio-transport>` is"
" created to represent it."
msgstr ""

#: ../../library/asyncio-eventloop.rst:254
msgid ""
"*protocol_factory* is called without arguments and must return a "
":ref:`protocol <asyncio-protocol>` instance."
msgstr ""

#: ../../library/asyncio-eventloop.rst:257
msgid ""
"The protocol instance is tied to the transport, and its "
":meth:`connection_made` method is called."
msgstr ""

#: ../../library/asyncio-eventloop.rst:260
msgid ""
"The coroutine returns successfully with the ``(transport, protocol)`` pair."
msgstr ""

#: ../../library/asyncio-eventloop.rst:263
msgid ""
"The created transport is an implementation-dependent bidirectional stream."
msgstr ""

#: ../../library/asyncio-eventloop.rst:266
msgid ""
"*protocol_factory* can be any kind of callable, not necessarily a class.  "
"For example, if you want to use a pre-created protocol instance, you can "
"pass ``lambda: my_protocol``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:270
msgid "Options that change how the connection is created:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:272
msgid ""
"*ssl*: if given and not false, a SSL/TLS transport is created (by default a "
"plain TCP transport is created).  If *ssl* is a :class:`ssl.SSLContext` "
"object, this context is used to create the transport; if *ssl* is "
":const:`True`, a context with some unspecified default settings is used."
msgstr ""

#: ../../library/asyncio-eventloop.rst:278
msgid ":ref:`SSL/TLS security considerations <ssl-security>`"
msgstr ""

#: ../../library/asyncio-eventloop.rst:280
msgid ""
"*server_hostname*, is only for use together with *ssl*, and sets or "
"overrides the hostname that the target server's certificate will be matched "
"against.  By default the value of the *host* argument is used.  If *host* is"
" empty, there is no default and you must pass a value for *server_hostname*."
"  If *server_hostname* is an empty string, hostname matching is disabled "
"(which is a serious security risk, allowing for man-in-the-middle-attacks)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:288
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to getaddrinfo() for *host* resolution. If given,"
" these should all be integers from the corresponding :mod:`socket` module "
"constants."
msgstr ""

#: ../../library/asyncio-eventloop.rst:293
msgid ""
"*sock*, if given, should be an existing, already connected "
":class:`socket.socket` object to be used by the transport. If *sock* is "
"given, none of *host*, *port*, *family*, *proto*, *flags* and *local_addr* "
"should be specified."
msgstr ""

#: ../../library/asyncio-eventloop.rst:298
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind"
" the socket to locally.  The *local_host* and *local_port* are looked up "
"using getaddrinfo(), similarly to *host* and *port*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:304
#: ../../library/asyncio-eventloop.rst:430
msgid "On Windows with :class:`ProactorEventLoop`, SSL/TLS is now supported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:308
msgid ""
"The :func:`open_connection` function can be used to get a pair of "
"(:class:`StreamReader`, :class:`StreamWriter`) instead of a protocol."
msgstr ""

#: ../../library/asyncio-eventloop.rst:314
msgid ""
"Create datagram connection: socket family :py:data:`~socket.AF_INET` or "
":py:data:`~socket.AF_INET6` depending on *host* (or *family* if specified), "
"socket type :py:data:`~socket.SOCK_DGRAM`. *protocol_factory* must be a "
"callable returning a :ref:`protocol <asyncio-protocol>` instance."
msgstr ""

#: ../../library/asyncio-eventloop.rst:323
msgid "Options changing how the connection is created:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:325
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind"
" the socket to locally.  The *local_host* and *local_port* are looked up "
"using :meth:`getaddrinfo`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:329
msgid ""
"*remote_addr*, if given, is a ``(remote_host, remote_port)`` tuple used to "
"connect the socket to a remote address.  The *remote_host* and *remote_port*"
" are looked up using :meth:`getaddrinfo`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:333
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to :meth:`getaddrinfo` for *host* resolution. If "
"given, these should all be integers from the corresponding :mod:`socket` "
"module constants."
msgstr ""

#: ../../library/asyncio-eventloop.rst:338
#: ../../library/asyncio-eventloop.rst:416
msgid ""
"*reuse_address* tells the kernel to reuse a local socket in TIME_WAIT state,"
" without waiting for its natural timeout to expire. If not specified will "
"automatically be set to True on UNIX."
msgstr ""

#: ../../library/asyncio-eventloop.rst:343
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same"
" port as other existing endpoints are bound to, so long as they all set this"
" flag when being created. This option is not supported on Windows and some "
"UNIX's. If the :py:data:`~socket.SO_REUSEPORT` constant is not defined then "
"this capability is unsupported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:349
msgid ""
"*allow_broadcast* tells the kernel to allow this endpoint to send messages "
"to the broadcast address."
msgstr ""

#: ../../library/asyncio-eventloop.rst:352
msgid ""
"*sock* can optionally be specified in order to use a preexisting, already "
"connected, :class:`socket.socket` object to be used by the transport. If "
"specified, *local_addr* and *remote_addr* should be omitted (must be "
":const:`None`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:357
msgid ""
"On Windows with :class:`ProactorEventLoop`, this method is not supported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:359
msgid ""
"See :ref:`UDP echo client protocol <asyncio-udp-echo-client-protocol>` and "
":ref:`UDP echo server protocol <asyncio-udp-echo-server-protocol>` examples."
msgstr ""

#: ../../library/asyncio-eventloop.rst:365
msgid ""
"Create UNIX connection: socket family :py:data:`~socket.AF_UNIX`, socket "
"type :py:data:`~socket.SOCK_STREAM`. The :py:data:`~socket.AF_UNIX` socket "
"family is used to communicate between processes on the same machine "
"efficiently."
msgstr ""

#: ../../library/asyncio-eventloop.rst:374
msgid "See the :meth:`BaseEventLoop.create_connection` method for parameters."
msgstr ""

#: ../../library/asyncio-eventloop.rst:376
#: ../../library/asyncio-eventloop.rst:449
msgid "Availability: UNIX."
msgstr ""

#: ../../library/asyncio-eventloop.rst:380
msgid "Creating listening connections"
msgstr ""

#: ../../library/asyncio-eventloop.rst:384
msgid ""
"Create a TCP server (socket type :data:`~socket.SOCK_STREAM`) bound to "
"*host* and *port*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:387
msgid ""
"Return a :class:`Server` object, its :attr:`~Server.sockets` attribute "
"contains created sockets. Use the :meth:`Server.close` method to stop the "
"server: close listening sockets."
msgstr ""

#: ../../library/asyncio-eventloop.rst:391
msgid "Parameters:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:393
msgid ""
"The *host* parameter can be a string, in that case the TCP server is bound "
"to *host* and *port*. The *host* parameter can also be a sequence of strings"
" and in that case the TCP server is bound to all hosts of the sequence. If "
"*host* is an empty string or ``None``, all interfaces are assumed and a list"
" of multiple sockets will be returned (most likely one for IPv4 and another "
"one for IPv6)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:400
msgid ""
"*family* can be set to either :data:`socket.AF_INET` or "
":data:`~socket.AF_INET6` to force the socket to use IPv4 or IPv6. If not set"
" it will be determined from host (defaults to :data:`socket.AF_UNSPEC`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:404
msgid "*flags* is a bitmask for :meth:`getaddrinfo`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:406
msgid ""
"*sock* can optionally be specified in order to use a preexisting socket "
"object. If specified, *host* and *port* should be omitted (must be "
":const:`None`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:410
msgid ""
"*backlog* is the maximum number of queued connections passed to "
":meth:`~socket.socket.listen` (defaults to 100)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:413
msgid ""
"*ssl* can be set to an :class:`~ssl.SSLContext` to enable SSL over the "
"accepted connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:421
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same"
" port as other existing endpoints are bound to, so long as they all set this"
" flag when being created. This option is not supported on Windows."
msgstr ""

#: ../../library/asyncio-eventloop.rst:426
#: ../../library/asyncio-eventloop.rst:447
#: ../../library/asyncio-eventloop.rst:504
#: ../../library/asyncio-eventloop.rst:520
#: ../../library/asyncio-eventloop.rst:530
#: ../../library/asyncio-eventloop.rst:558
#: ../../library/asyncio-eventloop.rst:597
#: ../../library/asyncio-eventloop.rst:611
#: ../../library/asyncio-eventloop.rst:662
#: ../../library/asyncio-eventloop.rst:774
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:434
msgid ""
"The function :func:`start_server` creates a (:class:`StreamReader`, "
":class:`StreamWriter`) pair and calls back a function with this pair."
msgstr ""

#: ../../library/asyncio-eventloop.rst:439
msgid "The *host* parameter can now be a sequence of strings."
msgstr ""

#: ../../library/asyncio-eventloop.rst:444
msgid ""
"Similar to :meth:`BaseEventLoop.create_server`, but specific to the socket "
"family :py:data:`~socket.AF_UNIX`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:453
msgid "Watch file descriptors"
msgstr ""

#: ../../library/asyncio-eventloop.rst:455
msgid ""
"On Windows with :class:`SelectorEventLoop`, only socket handles are "
"supported (ex: pipe file descriptors are not supported)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:458
msgid ""
"On Windows with :class:`ProactorEventLoop`, these methods are not supported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:462
msgid ""
"Start watching the file descriptor for read availability and then call the "
"*callback* with specified arguments."
msgstr ""

#: ../../library/asyncio-eventloop.rst:470
msgid "Stop watching the file descriptor for read availability."
msgstr ""

#: ../../library/asyncio-eventloop.rst:474
msgid ""
"Start watching the file descriptor for write availability and then call the "
"*callback* with specified arguments."
msgstr ""

#: ../../library/asyncio-eventloop.rst:482
msgid "Stop watching the file descriptor for write availability."
msgstr ""

#: ../../library/asyncio-eventloop.rst:484
msgid ""
"The :ref:`watch a file descriptor for read events <asyncio-watch-read-"
"event>` example uses the low-level :meth:`BaseEventLoop.add_reader` method "
"to register the file descriptor of a socket."
msgstr ""

#: ../../library/asyncio-eventloop.rst:490
msgid "Low-level socket operations"
msgstr ""

#: ../../library/asyncio-eventloop.rst:494
msgid ""
"Receive data from the socket.  Modeled after blocking "
":meth:`socket.socket.recv` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:497
msgid ""
"The return value is a bytes object representing the data received.  The "
"maximum amount of data to be received at once is specified by *nbytes*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:501
#: ../../library/asyncio-eventloop.rst:517
#: ../../library/asyncio-eventloop.rst:527
msgid ""
"With :class:`SelectorEventLoop` event loop, the socket *sock* must be non-"
"blocking."
msgstr ""

#: ../../library/asyncio-eventloop.rst:508
msgid ""
"Send data to the socket.  Modeled after blocking "
":meth:`socket.socket.sendall` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:511
msgid ""
"The socket must be connected to a remote socket. This method continues to "
"send data from *data* until either all data has been sent or an error "
"occurs.  ``None`` is returned on success.  On error, an exception is raised,"
" and there is no way to determine how much data, if any, was successfully "
"processed by the receiving end of the connection."
msgstr ""

#: ../../library/asyncio-eventloop.rst:524
msgid ""
"Connect to a remote socket at *address*.  Modeled after blocking "
":meth:`socket.socket.connect` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:532
msgid ""
"``address`` no longer needs to be resolved.  ``sock_connect`` will try to "
"check if the *address* is already resolved by calling "
":func:`socket.inet_pton`.  If not, :meth:`BaseEventLoop.getaddrinfo` will be"
" used to resolve the *address*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:541
msgid ""
":meth:`BaseEventLoop.create_connection` and  "
":func:`asyncio.open_connection() <open_connection>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:547
msgid ""
"Accept a connection.  Modeled after blocking :meth:`socket.socket.accept`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:550
msgid ""
"The socket must be bound to an address and listening for connections. The "
"return value is a pair ``(conn, address)`` where *conn* is a *new* socket "
"object usable to send and receive data on the connection, and *address* is "
"the address bound to the socket on the other end of the connection."
msgstr ""

#: ../../library/asyncio-eventloop.rst:556
msgid "The socket *sock* must be non-blocking."
msgstr ""

#: ../../library/asyncio-eventloop.rst:562
msgid ":meth:`BaseEventLoop.create_server` and :func:`start_server`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:566
msgid "Resolve host name"
msgstr ""

#: ../../library/asyncio-eventloop.rst:570
msgid ""
"This method is a :ref:`coroutine <coroutine>`, similar to "
":meth:`socket.getaddrinfo` function but non-blocking."
msgstr ""

#: ../../library/asyncio-eventloop.rst:575
msgid ""
"This method is a :ref:`coroutine <coroutine>`, similar to "
":meth:`socket.getnameinfo` function but non-blocking."
msgstr ""

#: ../../library/asyncio-eventloop.rst:580
msgid "Connect pipes"
msgstr ""

#: ../../library/asyncio-eventloop.rst:582
msgid ""
"On Windows with :class:`SelectorEventLoop`, these methods are not supported."
" Use :class:`ProactorEventLoop` to support pipes on Windows."
msgstr ""

#: ../../library/asyncio-eventloop.rst:587
msgid "Register read pipe in eventloop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:589
msgid ""
"*protocol_factory* should instantiate object with :class:`Protocol` "
"interface.  *pipe* is a :term:`file-like object <file object>`. Return pair "
"``(transport, protocol)``, where *transport* supports the "
":class:`ReadTransport` interface."
msgstr ""

#: ../../library/asyncio-eventloop.rst:594
#: ../../library/asyncio-eventloop.rst:608
msgid ""
"With :class:`SelectorEventLoop` event loop, the *pipe* is set to non-"
"blocking mode."
msgstr ""

#: ../../library/asyncio-eventloop.rst:601
msgid "Register write pipe in eventloop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:603
msgid ""
"*protocol_factory* should instantiate object with :class:`BaseProtocol` "
"interface. *pipe* is :term:`file-like object <file object>`. Return pair "
"``(transport, protocol)``, where *transport* supports "
":class:`WriteTransport` interface."
msgstr ""

#: ../../library/asyncio-eventloop.rst:615
msgid ""
"The :meth:`BaseEventLoop.subprocess_exec` and "
":meth:`BaseEventLoop.subprocess_shell` methods."
msgstr ""

#: ../../library/asyncio-eventloop.rst:620
msgid "UNIX signals"
msgstr ""

#: ../../library/asyncio-eventloop.rst:622
msgid "Availability: UNIX only."
msgstr ""

#: ../../library/asyncio-eventloop.rst:626
msgid "Add a handler for a signal."
msgstr ""

#: ../../library/asyncio-eventloop.rst:628
msgid ""
"Raise :exc:`ValueError` if the signal number is invalid or uncatchable. "
"Raise :exc:`RuntimeError` if there is a problem setting up the handler."
msgstr ""

#: ../../library/asyncio-eventloop.rst:636
msgid "Remove a handler for a signal."
msgstr ""

#: ../../library/asyncio-eventloop.rst:638
msgid "Return ``True`` if a signal handler was removed, ``False`` if not."
msgstr ""

#: ../../library/asyncio-eventloop.rst:642
msgid "The :mod:`signal` module."
msgstr ""

#: ../../library/asyncio-eventloop.rst:646
msgid "Executor"
msgstr ""

#: ../../library/asyncio-eventloop.rst:648
msgid ""
"Call a function in an :class:`~concurrent.futures.Executor` (pool of threads"
" or pool of processes). By default, an event loop uses a thread pool "
"executor (:class:`~concurrent.futures.ThreadPoolExecutor`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:654
msgid "Arrange for a *func* to be called in the specified executor."
msgstr ""

#: ../../library/asyncio-eventloop.rst:656
msgid ""
"The *executor* argument should be an :class:`~concurrent.futures.Executor` "
"instance. The default executor is used if *executor* is ``None``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:659
msgid ""
":ref:`Use functools.partial to pass keywords to the *func* <asyncio-pass-"
"keywords>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:666
msgid "Set the default executor used by :meth:`run_in_executor`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:670
msgid "Error Handling API"
msgstr ""

#: ../../library/asyncio-eventloop.rst:672
msgid "Allows customizing how exceptions are handled in the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:676
msgid "Set *handler* as the new event loop exception handler."
msgstr ""

#: ../../library/asyncio-eventloop.rst:678
msgid "If *handler* is ``None``, the default exception handler will be set."
msgstr ""

#: ../../library/asyncio-eventloop.rst:681
msgid ""
"If *handler* is a callable object, it should have a matching signature to "
"``(loop, context)``, where ``loop`` will be a reference to the active event "
"loop, ``context`` will be a ``dict`` object (see "
":meth:`call_exception_handler` documentation for details about context)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:689
msgid ""
"Return the exception handler, or ``None`` if the default one is in use."
msgstr ""

#: ../../library/asyncio-eventloop.rst:696
msgid "Default exception handler."
msgstr ""

#: ../../library/asyncio-eventloop.rst:698
msgid ""
"This is called when an exception occurs and no exception handler is set, and"
" can be called by a custom exception handler that wants to defer to the "
"default behavior."
msgstr ""

#: ../../library/asyncio-eventloop.rst:702
msgid ""
"*context* parameter has the same meaning as in "
":meth:`call_exception_handler`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:707
msgid "Call the current event loop exception handler."
msgstr ""

#: ../../library/asyncio-eventloop.rst:709
msgid ""
"*context* is a ``dict`` object containing the following keys (new keys may "
"be introduced later):"
msgstr ""

#: ../../library/asyncio-eventloop.rst:712
msgid "'message': Error message;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:713
msgid "'exception' (optional): Exception object;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:714
msgid "'future' (optional): :class:`asyncio.Future` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:715
msgid "'handle' (optional): :class:`asyncio.Handle` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:716
msgid "'protocol' (optional): :ref:`Protocol <asyncio-protocol>` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:717
msgid "'transport' (optional): :ref:`Transport <asyncio-transport>` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:718
msgid "'socket' (optional): :class:`socket.socket` instance."
msgstr ""

#: ../../library/asyncio-eventloop.rst:722
msgid ""
"Note: this method should not be overloaded in subclassed event loops.  For "
"any custom exception handling, use :meth:`set_exception_handler()` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:727
msgid "Debug mode"
msgstr ""

#: ../../library/asyncio-eventloop.rst:731
msgid "Get the debug mode (:class:`bool`) of the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:733
msgid ""
"The default value is ``True`` if the environment variable "
":envvar:`PYTHONASYNCIODEBUG` is set to a non-empty string, ``False`` "
"otherwise."
msgstr ""

#: ../../library/asyncio-eventloop.rst:741
msgid "Set the debug mode of the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:747
msgid "The :ref:`debug mode of asyncio <asyncio-debug-mode>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:750
msgid "Server"
msgstr ""

#: ../../library/asyncio-eventloop.rst:754
msgid "Server listening on sockets."
msgstr ""

#: ../../library/asyncio-eventloop.rst:756
msgid ""
"Object created by the :meth:`BaseEventLoop.create_server` method and the "
":func:`start_server` function. Don't instantiate the class directly."
msgstr ""

#: ../../library/asyncio-eventloop.rst:761
msgid ""
"Stop serving: close listening sockets and set the :attr:`sockets` attribute "
"to ``None``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:764
msgid ""
"The sockets that represent existing incoming client connections are left "
"open."
msgstr ""

#: ../../library/asyncio-eventloop.rst:767
msgid ""
"The server is closed asynchronously, use the :meth:`wait_closed` coroutine "
"to wait until the server is closed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:772
msgid "Wait until the :meth:`close` method completes."
msgstr ""

#: ../../library/asyncio-eventloop.rst:778
msgid ""
"List of :class:`socket.socket` objects the server is listening to, or "
"``None`` if the server is closed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:783
msgid "Handle"
msgstr ""

#: ../../library/asyncio-eventloop.rst:787
msgid ""
"A callback wrapper object returned by :func:`BaseEventLoop.call_soon`, "
":func:`BaseEventLoop.call_soon_threadsafe`, "
":func:`BaseEventLoop.call_later`, and :func:`BaseEventLoop.call_at`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:793
msgid ""
"Cancel the call.  If the callback is already canceled or executed, this "
"method has no effect."
msgstr ""

#: ../../library/asyncio-eventloop.rst:798
msgid "Event loop examples"
msgstr ""

#: ../../library/asyncio-eventloop.rst:803
msgid "Hello World with call_soon()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:805
msgid ""
"Example using the :meth:`BaseEventLoop.call_soon` method to schedule a "
"callback. The callback displays ``\"Hello World\"`` and then stops the event"
" loop::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:826
msgid ""
"The :ref:`Hello World coroutine <asyncio-hello-world-coroutine>` example "
"uses a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:833
msgid "Display the current date with call_later()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:835
msgid ""
"Example of callback displaying the current date every second. The callback "
"uses the :meth:`BaseEventLoop.call_later` method to reschedule itself during"
" 5 seconds, and then stops the event loop::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:861
msgid ""
"The :ref:`coroutine displaying the current date <asyncio-date-coroutine>` "
"example uses a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:869
msgid "Watch a file descriptor for read events"
msgstr ""

#: ../../library/asyncio-eventloop.rst:871
msgid ""
"Wait until a file descriptor received some data using the "
":meth:`BaseEventLoop.add_reader` method and then close the event loop::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:908
msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio-register-socket>` example uses a low-level protocol created by the "
":meth:`BaseEventLoop.create_connection` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:912
msgid ""
"The :ref:`register an open socket to wait for data using streams <asyncio-"
"register-socket-streams>` example uses high-level streams created by the "
":func:`open_connection` function in a coroutine."
msgstr ""

#: ../../library/asyncio-eventloop.rst:918
msgid "Set signal handlers for SIGINT and SIGTERM"
msgstr ""

#: ../../library/asyncio-eventloop.rst:920
msgid ""
"Register handlers for signals :py:data:`SIGINT` and :py:data:`SIGTERM` using"
" the :meth:`BaseEventLoop.add_signal_handler` method::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:944
msgid "This example only works on UNIX."
msgstr ""
