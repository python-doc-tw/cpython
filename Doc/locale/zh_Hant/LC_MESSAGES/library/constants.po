# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# Leon Hung, 2017
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-18 18:19-0600\n"
"PO-Revision-Date: 2017-06-23 14:06+0000\n"
"Last-Translator: Leon Hung\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hant\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/constants.rst:4
msgid "Built-in Constants"
msgstr "內建常數"

#: ../../library/constants.rst:6
msgid "A small number of constants live in the built-in namespace.  They are:"
msgstr ""

#: ../../library/constants.rst:10
msgid ""
"The false value of the :class:`bool` type. Assignments to ``False`` are "
"illegal and raise a :exc:`SyntaxError`."
msgstr ""

#: ../../library/constants.rst:16
msgid ""
"The true value of the :class:`bool` type. Assignments to ``True`` are "
"illegal and raise a :exc:`SyntaxError`."
msgstr ""

#: ../../library/constants.rst:22
msgid ""
"The sole value of the type ``NoneType``.  ``None`` is frequently used to "
"represent the absence of a value, as when default arguments are not passed "
"to a function. Assignments to ``None`` are illegal and raise a "
":exc:`SyntaxError`."
msgstr ""

#: ../../library/constants.rst:29
msgid ""
"Special value which should be returned by the binary special methods (e.g. "
":meth:`__eq__`, :meth:`__lt__`, :meth:`__add__`, :meth:`__rsub__`, etc.) to "
"indicate that the operation is not implemented with respect to the other "
"type; may be returned by the in-place binary special methods (e.g. "
":meth:`__imul__`, :meth:`__iand__`, etc.) for the same purpose. Its truth "
"value is true."
msgstr ""

#: ../../library/constants.rst:38
msgid ""
"When ``NotImplemented`` is returned, the interpreter will then try the "
"reflected operation on the other type, or some other fallback, depending on "
"the operator.  If all attempted operations return ``NotImplemented``, the "
"interpreter will raise an appropriate exception."
msgstr ""

#: ../../library/constants.rst:43
msgid "See :ref:`implementing-the-arithmetic-operations` for more details."
msgstr ""

#: ../../library/constants.rst:50
msgid ""
"The same as ``...``.  Special value used mostly in conjunction with extended"
" slicing syntax for user-defined container data types."
msgstr ""

#: ../../library/constants.rst:56
msgid ""
"This constant is true if Python was not started with an :option:`-O` option."
" See also the :keyword:`assert` statement."
msgstr ""

#: ../../library/constants.rst:62
msgid ""
"The names :data:`None`, :data:`False`, :data:`True` and :data:`__debug__` "
"cannot be reassigned (assignments to them, even as an attribute name, raise "
":exc:`SyntaxError`), so they can be considered \"true\" constants."
msgstr ""

#: ../../library/constants.rst:68
msgid "Constants added by the :mod:`site` module"
msgstr ""

#: ../../library/constants.rst:70
msgid ""
"The :mod:`site` module (which is imported automatically during startup, "
"except if the :option:`-S` command-line option is given) adds several "
"constants to the built-in namespace.  They are useful for the interactive "
"interpreter shell and should not be used in programs."
msgstr ""

#: ../../library/constants.rst:78
msgid ""
"Objects that when printed, print a message like \"Use quit() or Ctrl-D (i.e."
" EOF) to exit\", and when called, raise :exc:`SystemExit` with the specified"
" exit code."
msgstr ""

#: ../../library/constants.rst:86
msgid ""
"Objects that when printed, print a message like \"Type license() to see the "
"full license text\", and when called, display the corresponding text in a "
"pager-like fashion (one screen at a time)."
msgstr ""
