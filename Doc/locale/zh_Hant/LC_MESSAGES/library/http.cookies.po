# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-31 15:04+0800\n"
"PO-Revision-Date: 2015-12-09 17:51+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-"
"doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../library/http.cookies.rst:2
msgid ":mod:`http.cookies` --- HTTP state management"
msgstr ""

#: ../../library/http.cookies.rst:9
msgid "**Source code:** :source:`Lib/http/cookies.py`"
msgstr ""

#: ../../library/http.cookies.rst:13
msgid ""
"The :mod:`http.cookies` module defines classes for abstracting the "
"concept of cookies, an HTTP state management mechanism. It supports both "
"simple string-only cookies, and provides an abstraction for having any "
"serializable data-type as cookie value."
msgstr ""

#: ../../library/http.cookies.rst:18
msgid ""
"The module formerly strictly applied the parsing rules described in the "
":rfc:`2109` and :rfc:`2068` specifications.  It has since been discovered"
" that MSIE 3.0x doesn't follow the character rules outlined in those "
"specs and also many current day browsers and servers have relaxed parsing"
" rules when comes to Cookie handling.  As a result, the parsing rules "
"used are a bit less strict."
msgstr ""

#: ../../library/http.cookies.rst:24
msgid ""
"The character set, :data:`string.ascii_letters`, :data:`string.digits` "
"and ``!#$%&'*+-.^_`|~:`` denote the set of valid characters allowed by "
"this module in Cookie name (as :attr:`~Morsel.key`)."
msgstr ""

#: ../../library/http.cookies.rst:28
msgid "Allowed ':' as a valid Cookie name character."
msgstr ""

#: ../../library/http.cookies.rst:34
msgid ""
"On encountering an invalid cookie, :exc:`CookieError` is raised, so if "
"your cookie data comes from a browser you should always prepare for "
"invalid data and catch :exc:`CookieError` on parsing."
msgstr ""

#: ../../library/http.cookies.rst:41
msgid ""
"Exception failing because of :rfc:`2109` invalidity: incorrect "
"attributes, incorrect :mailheader:`Set-Cookie` header, etc."
msgstr ""

#: ../../library/http.cookies.rst:47
msgid ""
"This class is a dictionary-like object whose keys are strings and whose "
"values are :class:`Morsel` instances. Note that upon setting a key to a "
"value, the value is first converted to a :class:`Morsel` containing the "
"key and the value."
msgstr ""

#: ../../library/http.cookies.rst:51
msgid "If *input* is given, it is passed to the :meth:`load` method."
msgstr ""

#: ../../library/http.cookies.rst:56
msgid ""
"This class derives from :class:`BaseCookie` and overrides "
":meth:`value_decode` and :meth:`value_encode` to be the identity and "
":func:`str` respectively."
msgstr ""

#: ../../library/http.cookies.rst:64
msgid "Module :mod:`http.cookiejar`"
msgstr ""

#: ../../library/http.cookies.rst:63
msgid ""
"HTTP cookie handling for web *clients*.  The :mod:`http.cookiejar` and "
":mod:`http.cookies` modules do not depend on each other."
msgstr ""

#: ../../library/http.cookies.rst:66
msgid ":rfc:`2109` - HTTP State Management Mechanism"
msgstr ""

#: ../../library/http.cookies.rst:67
msgid "This is the state management specification implemented by this module."
msgstr ""

#: ../../library/http.cookies.rst:73
msgid "Cookie Objects"
msgstr ""

#: ../../library/http.cookies.rst:78
msgid ""
"Return a decoded value from a string representation. Return value can be "
"any type. This method does nothing in :class:`BaseCookie` --- it exists "
"so it can be overridden."
msgstr ""

#: ../../library/http.cookies.rst:85
msgid ""
"Return an encoded value. *val* can be any type, but return value must be "
"a string. This method does nothing in :class:`BaseCookie` --- it exists "
"so it can be overridden."
msgstr ""

#: ../../library/http.cookies.rst:89
msgid ""
"In general, it should be the case that :meth:`value_encode` and "
":meth:`value_decode` are inverses on the range of *value_decode*."
msgstr ""

#: ../../library/http.cookies.rst:95
msgid ""
"Return a string representation suitable to be sent as HTTP headers. "
"*attrs* and *header* are sent to each :class:`Morsel`'s :meth:`output` "
"method. *sep* is used to join the headers together, and is by default the"
" combination ``'\\r\\n'`` (CRLF)."
msgstr ""

#: ../../library/http.cookies.rst:103
msgid ""
"Return an embeddable JavaScript snippet, which, if run on a browser which"
" supports JavaScript, will act the same as if the HTTP headers was sent."
msgstr ""

#: ../../library/http.cookies.rst:106 ../../library/http.cookies.rst:202
#: ../../library/http.cookies.rst:210
msgid "The meaning for *attrs* is the same as in :meth:`output`."
msgstr ""

#: ../../library/http.cookies.rst:111
msgid ""
"If *rawdata* is a string, parse it as an ``HTTP_COOKIE`` and add the "
"values found there as :class:`Morsel`\\ s. If it is a dictionary, it is "
"equivalent to::"
msgstr ""

#: ../../library/http.cookies.rst:121
msgid "Morsel Objects"
msgstr ""

#: ../../library/http.cookies.rst:126
msgid "Abstract a key/value pair, which has some :rfc:`2109` attributes."
msgstr ""

#: ../../library/http.cookies.rst:128
msgid ""
"Morsels are dictionary-like objects, whose set of keys is constant --- "
"the valid :rfc:`2109` attributes, which are"
msgstr ""

#: ../../library/http.cookies.rst:131
msgid "``expires``"
msgstr ""

#: ../../library/http.cookies.rst:132
msgid "``path``"
msgstr ""

#: ../../library/http.cookies.rst:133
msgid "``comment``"
msgstr ""

#: ../../library/http.cookies.rst:134
msgid "``domain``"
msgstr ""

#: ../../library/http.cookies.rst:135
msgid "``max-age``"
msgstr ""

#: ../../library/http.cookies.rst:136
msgid "``secure``"
msgstr ""

#: ../../library/http.cookies.rst:137
msgid "``version``"
msgstr ""

#: ../../library/http.cookies.rst:138
msgid "``httponly``"
msgstr ""

#: ../../library/http.cookies.rst:140
msgid ""
"The attribute :attr:`httponly` specifies that the cookie is only "
"transferred in HTTP requests, and is not accessible through JavaScript. "
"This is intended to mitigate some forms of cross-site scripting."
msgstr ""

#: ../../library/http.cookies.rst:144
msgid "The keys are case-insensitive."
msgstr ""

#: ../../library/http.cookies.rst:146
msgid ""
":meth:`~Morsel.__eq__` now takes :attr:`~Morsel.key` and "
":attr:`~Morsel.value` into account."
msgstr ""

#: ../../library/http.cookies.rst:153
msgid "The value of the cookie."
msgstr ""

#: ../../library/http.cookies.rst:155
msgid "assigning to ``value``; use :meth:`~Morsel.set` instead."
msgstr ""

#: ../../library/http.cookies.rst:161
msgid "The encoded value of the cookie --- this is what should be sent."
msgstr ""

#: ../../library/http.cookies.rst:163
msgid "assigning to ``coded_value``; use :meth:`~Morsel.set` instead."
msgstr ""

#: ../../library/http.cookies.rst:169
msgid "The name of the cookie."
msgstr ""

#: ../../library/http.cookies.rst:171
msgid "assigning to ``key``; use :meth:`~Morsel.set` instead."
msgstr ""

#: ../../library/http.cookies.rst:177
msgid "Set the *key*, *value* and *coded_value* attributes."
msgstr ""

#: ../../library/http.cookies.rst:179
msgid ""
"The undocumented *LegalChars* parameter is ignored and will be removed in"
" a future version."
msgstr ""

#: ../../library/http.cookies.rst:186
msgid "Whether *K* is a member of the set of keys of a :class:`Morsel`."
msgstr ""

#: ../../library/http.cookies.rst:191
msgid ""
"Return a string representation of the Morsel, suitable to be sent as an "
"HTTP header. By default, all the attributes are included, unless *attrs* "
"is given, in which case it should be a list of attributes to use. "
"*header* is by default ``\"Set-Cookie:\"``."
msgstr ""

#: ../../library/http.cookies.rst:199
msgid ""
"Return an embeddable JavaScript snippet, which, if run on a browser which"
" supports JavaScript, will act the same as if the HTTP header was sent."
msgstr ""

#: ../../library/http.cookies.rst:207
msgid ""
"Return a string representing the Morsel, without any surrounding HTTP or "
"JavaScript."
msgstr ""

#: ../../library/http.cookies.rst:215
msgid ""
"Update the values in the Morsel dictionary with the values in the "
"dictionary *values*.  Raise an error if any of the keys in the *values* "
"dict is not a valid :rfc:`2109` attribute."
msgstr ""

#: ../../library/http.cookies.rst:219
msgid "an error is raised for invalid keys."
msgstr ""

#: ../../library/http.cookies.rst:225
msgid "Return a shallow copy of the Morsel object."
msgstr ""

#: ../../library/http.cookies.rst:227
msgid "return a Morsel object instead of a dict."
msgstr ""

#: ../../library/http.cookies.rst:233
msgid ""
"Raise an error if key is not a valid :rfc:`2109` attribute, otherwise "
"behave the same as :meth:`dict.setdefault`."
msgstr ""

#: ../../library/http.cookies.rst:240
msgid "Example"
msgstr ""

#: ../../library/http.cookies.rst:242
msgid ""
"The following example demonstrates how to use the :mod:`http.cookies` "
"module."
msgstr ""

#~ msgid "Module http.cookiejar"
#~ msgstr ""

#~ msgid "RFC 2109 - HTTP State Management Mechanism"
#~ msgstr ""

