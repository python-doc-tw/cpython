# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-09 21:33+0800\n"
"PO-Revision-Date: 2015-12-09 17:51+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hant\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/msvcrt.rst:2
msgid ":mod:`msvcrt` -- Useful routines from the MS VC++ runtime"
msgstr ""

#: ../../library/msvcrt.rst:10
msgid ""
"These functions provide access to some useful capabilities on Windows "
"platforms. Some higher-level modules use these functions to build the  "
"Windows implementations of their services.  For example, the :mod:`getpass` "
"module uses this in the implementation of the :func:`getpass` function."
msgstr ""

#: ../../library/msvcrt.rst:15
msgid ""
"Further documentation on these functions can be found in the Platform API "
"documentation."
msgstr ""

#: ../../library/msvcrt.rst:18
msgid ""
"The module implements both the normal and wide char variants of the console "
"I/O api. The normal API deals only with ASCII characters and is of limited "
"use for internationalized applications. The wide char API should be used "
"where ever possible."
msgstr ""

#: ../../library/msvcrt.rst:23
msgid ""
"Operations in this module now raise :exc:`OSError` where :exc:`IOError` was "
"raised."
msgstr ""

#: ../../library/msvcrt.rst:31
msgid "File Operations"
msgstr ""

#: ../../library/msvcrt.rst:36
msgid ""
"Lock part of a file based on file descriptor *fd* from the C runtime.  "
"Raises :exc:`OSError` on failure.  The locked region of the file extends "
"from the current file position for *nbytes* bytes, and may continue beyond "
"the end of the file.  *mode* must be one of the :const:`LK_\\*` constants "
"listed below. Multiple regions in a file may be locked at the same time, but"
" may not overlap.  Adjacent regions are not merged; they must be unlocked "
"individually."
msgstr ""

#: ../../library/msvcrt.rst:47
msgid ""
"Locks the specified bytes. If the bytes cannot be locked, the program "
"immediately tries again after 1 second.  If, after 10 attempts, the bytes "
"cannot be locked, :exc:`OSError` is raised."
msgstr ""

#: ../../library/msvcrt.rst:55
msgid ""
"Locks the specified bytes. If the bytes cannot be locked, :exc:`OSError` is "
"raised."
msgstr ""

#: ../../library/msvcrt.rst:61
msgid "Unlocks the specified bytes, which must have been previously locked."
msgstr ""

#: ../../library/msvcrt.rst:66
msgid ""
"Set the line-end translation mode for the file descriptor *fd*. To set it to"
" text mode, *flags* should be :const:`os.O_TEXT`; for binary, it should be "
":const:`os.O_BINARY`."
msgstr ""

#: ../../library/msvcrt.rst:73
msgid ""
"Create a C runtime file descriptor from the file handle *handle*.  The "
"*flags* parameter should be a bitwise OR of :const:`os.O_APPEND`, "
":const:`os.O_RDONLY`, and :const:`os.O_TEXT`.  The returned file descriptor "
"may be used as a parameter to :func:`os.fdopen` to create a file object."
msgstr ""

#: ../../library/msvcrt.rst:81
msgid ""
"Return the file handle for the file descriptor *fd*.  Raises :exc:`OSError` "
"if *fd* is not recognized."
msgstr ""

#: ../../library/msvcrt.rst:88
msgid "Console I/O"
msgstr ""

#: ../../library/msvcrt.rst:93
msgid "Return true if a keypress is waiting to be read."
msgstr ""

#: ../../library/msvcrt.rst:98
msgid ""
"Read a keypress and return the resulting character as a byte string. Nothing"
" is echoed to the console.  This call will block if a keypress is not "
"already available, but will not wait for :kbd:`Enter` to be pressed. If the "
"pressed key was a special function key, this will return ``'\\000'`` or "
"``'\\xe0'``; the next call will return the keycode. The :kbd:`Control-C` "
"keypress cannot be read with this function."
msgstr ""

#: ../../library/msvcrt.rst:108
msgid "Wide char variant of :func:`getch`, returning a Unicode value."
msgstr ""

#: ../../library/msvcrt.rst:113
msgid ""
"Similar to :func:`getch`, but the keypress will be echoed if it  represents "
"a printable character."
msgstr ""

#: ../../library/msvcrt.rst:119
msgid "Wide char variant of :func:`getche`, returning a Unicode value."
msgstr ""

#: ../../library/msvcrt.rst:124
msgid "Print the byte string *char* to the console without buffering."
msgstr ""

#: ../../library/msvcrt.rst:129
msgid "Wide char variant of :func:`putch`, accepting a Unicode value."
msgstr ""

#: ../../library/msvcrt.rst:134
msgid ""
"Cause the byte string *char* to be \"pushed back\" into the console buffer; "
"it will be the next character read by :func:`getch` or :func:`getche`."
msgstr ""

#: ../../library/msvcrt.rst:140
msgid "Wide char variant of :func:`ungetch`, accepting a Unicode value."
msgstr ""

#: ../../library/msvcrt.rst:146
msgid "Other Functions"
msgstr ""

#: ../../library/msvcrt.rst:151
msgid ""
"Force the :c:func:`malloc` heap to clean itself up and return unused blocks "
"to the operating system.  On failure, this raises :exc:`OSError`."
msgstr ""
