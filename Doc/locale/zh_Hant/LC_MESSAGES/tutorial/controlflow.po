# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# Liang Bo Wang <me@liang2.tw>, 2015
# Liang Bo Wang <me@liang2.tw>, 2016
# hsiao yi <hsiaoyi0504@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-18 18:19-0600\n"
"PO-Revision-Date: 2016-11-28 19:01+0000\n"
"Last-Translator: Liang Bo Wang <me@liang2.tw>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hant\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "深入了解流程控制"

#: ../../tutorial/controlflow.rst:7
msgid ""
"Besides the :keyword:`while` statement just introduced, Python knows the "
"usual control flow statements known from other languages, with some twists."
msgstr "除了剛才介紹的 :keyword:`while`，Python 擁有在其他程式語言中常用的流程控制語法，並有ㄧ些不一樣的改變。"

#: ../../tutorial/controlflow.rst:14
msgid ":keyword:`if` Statements"
msgstr ":keyword:`if` 陳述式"

#: ../../tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr "或許最常見的陳述式種類就是 :keyword:`if` 了。舉例來說：\n\n::"

#: ../../tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`elif`' is short for 'else if', and"
" is useful to avoid excessive indentation.  An  :keyword:`if` ... "
":keyword:`elif` ... :keyword:`elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr "可以有零個或多個 :keyword:`elif` 段落，且 :keyword:`else` 段落可有可無。關鍵字 :keyword:`elif` 只是「else if」的縮寫，並且用來避免過多的縮排。一個 :keyword:`if` ... :keyword:`elif` ... :keyword:`elif` ... 序列可以用來替代其他語言中出現的 ``switch`` 或 ``case`` 陳述式。"

#: ../../tutorial/controlflow.rst:43
msgid ":keyword:`for` Statements"
msgstr ":keyword:`for` 陳述式"

#: ../../tutorial/controlflow.rst:48
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's "
":keyword:`for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr "在 Python 中的 :keyword:`for` 陳述式可能不同於在 C 或 Pascal 中所看到的使用方式。與其只能选代 (iterate) 一個等差級數（如 Pascal），或給與使用者定義选代步進方式與結束條件（如 C），Python 的 :keyword:`for` 陳述选代任何序列（list 或者字串）的元素，以他們出現在序列中的順序。例如（無意雙關）：\n\n::"

#: ../../tutorial/controlflow.rst:69
msgid ""
"If you need to modify the sequence you are iterating over while inside the "
"loop (for example to duplicate selected items), it is recommended that you "
"first make a copy.  Iterating over a sequence does not implicitly make a "
"copy.  The slice notation makes this especially convenient::"
msgstr "如果你在迴圈中需要修改一個你正在选代的序列（例如重複一些選擇的元素），那麼會建議你先建立一個序列的拷貝。选代序列並不暗示建立新的拷貝。此時 slice 語法就讓這件事十分容易完成：\n\n::"

#: ../../tutorial/controlflow.rst:85
msgid "The :func:`range` Function"
msgstr ":func:`range` 函式"

#: ../../tutorial/controlflow.rst:87
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function "
":func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr "如果你需要选代一個數列的話，使用內建 :func:`range` 函式就很方便。它可以生成一等差級數：\n\n::"

#: ../../tutorial/controlflow.rst:99
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length 10."
"  It is possible to let the range start at another number, or to specify a "
"different increment (even negative; sometimes this is called the 'step')::"
msgstr "給定的結束值永遠不會出現在生成的序列中；\\ ``range(10)`` 生成的 10 個數值，即對應存取一個長度為 10 的序列內每一個元素的索引值。也可以讓 range 從其他數值計數，或者給定不同的級距（甚至為負；有時稱之為 'step'）：\n\n::"

#: ../../tutorial/controlflow.rst:113
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` and"
" :func:`len` as follows::"
msgstr "欲选代一個序列的索引值們，你可以搭配使用 :func:`range` 和 :func:`len` 如下：\n\n::"

#: ../../tutorial/controlflow.rst:126
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr "然而，在多數的情況，使用 :func:`enumerate` 函式將更為方便，詳見\\ :ref:`tut-loopidioms`。"

#: ../../tutorial/controlflow.rst:129
msgid "A strange thing happens if you just print a range::"
msgstr "如果直接印出一個 range 則會出現奇怪的輸出：\n\n::"

#: ../../tutorial/controlflow.rst:134
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr "在很多情況下，由 :func:`range` 回傳的物件的行為如同一個 list，但實際上它並不是。它是一個物件在你选代時會回傳想要的序列的連續元素，並不會真正建出這個序列的 list，以節省空間。"

#: ../../tutorial/controlflow.rst:139
msgid ""
"We say such an object is *iterable*, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted. We have seen that the "
":keyword:`for` statement is such an *iterator*. The function :func:`list` is"
" another; it creates lists from iterables::"
msgstr "我們稱這樣的物件為 *iterable*\\ （可选代的），意即能作為函式、陳述式中能一直獲取連續元素直到用盡的部件。我們已經看過 :keyword:`for` 陳述式可做為如此的 *iterator*\\ （选代器）。:func:`list` 函式為另一個例子，他可以自 iterable（可选代物件）建立 list：\n\n::"

#: ../../tutorial/controlflow.rst:149
msgid ""
"Later we will see more functions that return iterables and take iterables as"
" argument."
msgstr "待會我們可以看到更多函式回傳 iterable 和接受 iterable 為引數。"

#: ../../tutorial/controlflow.rst:155
msgid ""
":keyword:`break` and :keyword:`continue` Statements, and :keyword:`else` "
"Clauses on Loops"
msgstr ":keyword:`break` 和 :keyword:`continue` 陳述、迴圈內 :keyword:`else` 段落"

#: ../../tutorial/controlflow.rst:157
msgid ""
"The :keyword:`break` statement, like in C, breaks out of the smallest "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ":keyword:`break` 陳述式，如 C 語言，跳脫最內層的 :keyword:`for` 或 :keyword:`while` 迴圈。"

#: ../../tutorial/controlflow.rst:160
msgid ""
"Loop statements may have an ``else`` clause; it is executed when the loop "
"terminates through exhaustion of the list (with :keyword:`for`) or when the "
"condition becomes false (with :keyword:`while`), but not when the loop is "
"terminated by a :keyword:`break` statement.  This is exemplified by the "
"following loop, which searches for prime numbers::"
msgstr "迴圈可以帶有一個 ``else`` 段落。當迴圈歷遍选代的 list （在 :keyword:`for` 中）或條件為偽（在 :keyword:`while` 中）時，這個段落會被執行；但迴圈被 :keyword:`break` 陳述終止時則不會。底下尋找質數的迴圈即示範了這個行為：\n\n::"

#: ../../tutorial/controlflow.rst:184
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr "（沒錯，這是正確的程式碼。請看仔細：``else`` 段落屬於 :keyword:`for` 迴圈，\\ **並非** :keyword:`if` 陳述。）"

#: ../../tutorial/controlflow.rst:187
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does that of "
":keyword:`if` statements: a :keyword:`try` statement's ``else`` clause runs "
"when no exception occurs, and a loop's ``else`` clause runs when no "
"``break`` occurs. For more on the :keyword:`try` statement and exceptions, "
"see :ref:`tut-handling`."
msgstr "當 ``else`` 段落與迴圈使用時，相較於搭配 :keyword:`if` 陳述使用，它的行為與搭配 :keyword:`try` 陳述使用時更為相似：\\ :keyword:`try` 的 ``else`` 段落在沒有任何例外 (exception) 時執行，而迴圈的 ``else`` 段落在沒有任何 ``break`` 時執行。更多有關 :keyword:`try` 陳述和例外的介紹，見\\ :ref:`tut-handling`\\ 。"

#: ../../tutorial/controlflow.rst:194
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ":keyword:`continue` 陳述，亦承襲於 C 語言，讓迴圈於下個选代起繼續執行：\n\n::"

#: ../../tutorial/controlflow.rst:214
msgid ":keyword:`pass` Statements"
msgstr ":keyword:`pass` 陳述式"

#: ../../tutorial/controlflow.rst:216
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ":keyword:`pass` 陳述不執行任何動作。它用在語法上需要一個陳述但不需要執行任何動作的時候。例如：\n\n::"

#: ../../tutorial/controlflow.rst:223
msgid "This is commonly used for creating minimal classes::"
msgstr "這經常用於定義一個最簡單的類別：\n\n::"

#: ../../tutorial/controlflow.rst:229
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`pass` is silently "
"ignored::"
msgstr ":keyword:`pass` 亦可作為一個函式或條件判斷主體的預留位置，它可幫助你以更宏觀的角度思考並撰寫新的程式碼。\\ :keyword:`pass` 可自動忽略：\n\n::"

#: ../../tutorial/controlflow.rst:240
msgid "Defining Functions"
msgstr "定義函式 (function)"

#: ../../tutorial/controlflow.rst:242
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""

#: ../../tutorial/controlflow.rst:262
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""

#: ../../tutorial/controlflow.rst:267
msgid ""
"The first statement of the function body can optionally be a string literal;"
" this string literal is the function's documentation string, or "
":dfn:`docstring`. (More about docstrings can be found in the section :ref"
":`tut-docstrings`.) There are tools which use docstrings to automatically "
"produce online or printed documentation, or to let the user interactively "
"browse through code; it's good practice to include docstrings in code that "
"you write, so make a habit of it."
msgstr ""

#: ../../tutorial/controlflow.rst:274
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables cannot be directly "
"assigned a value within a function (unless named in a :keyword:`global` "
"statement), although they may be referenced."
msgstr ""

#: ../../tutorial/controlflow.rst:283
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments"
" are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, a new local symbol table is created for that call."
msgstr ""

#: ../../tutorial/controlflow.rst:289
msgid ""
"A function definition introduces the function name in the current symbol "
"table. The value of the function name has a type that is recognized by the "
"interpreter as a user-defined function.  This value can be assigned to "
"another name which can then also be used as a function.  This serves as a "
"general renaming mechanism::"
msgstr ""

#: ../../tutorial/controlflow.rst:301
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function"
" but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using "
":func:`print`::"
msgstr ""

#: ../../tutorial/controlflow.rst:312
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""

#: ../../tutorial/controlflow.rst:328
msgid "This example, as usual, demonstrates some new Python features:"
msgstr ""

#: ../../tutorial/controlflow.rst:330
msgid ""
"The :keyword:`return` statement returns with a value from a function. "
":keyword:`return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""

#: ../../tutorial/controlflow.rst:334
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named"
" ``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see "
":ref:`tut-classes`) The method :meth:`append` shown in the example is "
"defined for list objects; it adds a new element at the end of the list.  In "
"this example it is equivalent to ``result = result + [a]``, but more "
"efficient."
msgstr ""

#: ../../tutorial/controlflow.rst:349
msgid "More on Defining Functions"
msgstr ""

#: ../../tutorial/controlflow.rst:351
msgid ""
"It is also possible to define functions with a variable number of arguments."
" There are three forms, which can be combined."
msgstr ""

#: ../../tutorial/controlflow.rst:358
msgid "Default Argument Values"
msgstr ""

#: ../../tutorial/controlflow.rst:360
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""

#: ../../tutorial/controlflow.rst:376
msgid "This function can be called in several ways:"
msgstr ""

#: ../../tutorial/controlflow.rst:378
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to "
"quit?')``"
msgstr ""

#: ../../tutorial/controlflow.rst:380
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""

#: ../../tutorial/controlflow.rst:382
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come"
" on, only yes or no!')``"
msgstr ""

#: ../../tutorial/controlflow.rst:385
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""

#: ../../tutorial/controlflow.rst:388
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""

#: ../../tutorial/controlflow.rst:399
msgid "will print ``5``."
msgstr ""

#: ../../tutorial/controlflow.rst:401
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes"
" a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""

#: ../../tutorial/controlflow.rst:414
msgid "This will print ::"
msgstr ""

#: ../../tutorial/controlflow.rst:420
msgid ""
"If you don't want the default to be shared between subsequent calls, you can"
" write the function like this instead::"
msgstr ""

#: ../../tutorial/controlflow.rst:433
msgid "Keyword Arguments"
msgstr ""

#: ../../tutorial/controlflow.rst:435
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""

#: ../../tutorial/controlflow.rst:444
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""

#: ../../tutorial/controlflow.rst:455
msgid "but all the following calls would be invalid::"
msgstr ""

#: ../../tutorial/controlflow.rst:462
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the"
" function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument"
" may receive a value more than once. Here's an example that fails due to "
"this restriction::"
msgstr ""

#: ../../tutorial/controlflow.rst:478
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives"
" a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a tuple containing the positional arguments "
"beyond the formal parameter list.  (``*name`` must occur before ``**name``.)"
" For example, if we define a function like this::"
msgstr ""

#: ../../tutorial/controlflow.rst:496
msgid "It could be called like this::"
msgstr ""

#: ../../tutorial/controlflow.rst:504
msgid "and of course it would print::"
msgstr ""

#: ../../tutorial/controlflow.rst:515
msgid ""
"Note that the list of keyword argument names is created by sorting the "
"result of the keywords dictionary's ``keys()`` method before printing its "
"contents; if this is not done, the order in which the arguments are printed "
"is undefined."
msgstr ""

#: ../../tutorial/controlflow.rst:522
msgid "Arbitrary Argument Lists"
msgstr ""

#: ../../tutorial/controlflow.rst:527
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""

#: ../../tutorial/controlflow.rst:536
msgid ""
"Normally, these ``variadic`` arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only"
" be used as keywords rather than positional arguments. ::"
msgstr ""

#: ../../tutorial/controlflow.rst:553
msgid "Unpacking Argument Lists"
msgstr ""

#: ../../tutorial/controlflow.rst:555
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""

#: ../../tutorial/controlflow.rst:571
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""

#: ../../tutorial/controlflow.rst:587
msgid "Lambda Expressions"
msgstr ""

#: ../../tutorial/controlflow.rst:589
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword."
" This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are"
" just syntactic sugar for a normal function definition.  Like nested "
"function definitions, lambda functions can reference variables from the "
"containing scope::"
msgstr ""

#: ../../tutorial/controlflow.rst:606
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""

#: ../../tutorial/controlflow.rst:618
msgid "Documentation Strings"
msgstr "說明文件字串"

#: ../../tutorial/controlflow.rst:625
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""

#: ../../tutorial/controlflow.rst:628
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""

#: ../../tutorial/controlflow.rst:634
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description."
"  The following lines should be one or more paragraphs describing the "
"object's calling conventions, its side effects, etc."
msgstr ""

#: ../../tutorial/controlflow.rst:639
msgid ""
"The Python parser does not strip indentation from multi-line string literals"
" in Python, so tools that process documentation have to strip indentation if"
" desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""

#: ../../tutorial/controlflow.rst:651
msgid "Here is an example of a multi-line docstring::"
msgstr ""

#: ../../tutorial/controlflow.rst:669
msgid "Function Annotations"
msgstr ""

#: ../../tutorial/controlflow.rst:676
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`484` "
"for more information)."
msgstr ""

#: ../../tutorial/controlflow.rst:680
msgid ""
"Annotations are stored in the :attr:`__annotations__` attribute of the "
"function as a dictionary and have no effect on any other part of the "
"function.  Parameter annotations are defined by a colon after the parameter "
"name, followed by an expression evaluating to the value of the annotation.  "
"Return annotations are defined by a literal ``->``, followed by an "
"expression, between the parameter list and the colon denoting the end of the"
" :keyword:`def` statement.  The following example has a positional argument,"
" a keyword argument, and the return value annotated::"
msgstr ""

#: ../../tutorial/controlflow.rst:702
msgid "Intermezzo: Coding Style"
msgstr ""

#: ../../tutorial/controlflow.rst:707
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is"
" a good time to talk about *coding style*.  Most languages can be written "
"(or more concise, *formatted*) in different styles; some are more readable "
"than others. Making it easy for others to read your code is always a good "
"idea, and adopting a nice coding style helps tremendously for that."
msgstr ""

#: ../../tutorial/controlflow.rst:713
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every"
" Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""

#: ../../tutorial/controlflow.rst:718
msgid "Use 4-space indentation, and no tabs."
msgstr ""

#: ../../tutorial/controlflow.rst:720
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""

#: ../../tutorial/controlflow.rst:724
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr ""

#: ../../tutorial/controlflow.rst:726
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""

#: ../../tutorial/controlflow.rst:729
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code"
" inside functions."
msgstr ""

#: ../../tutorial/controlflow.rst:732
msgid "When possible, put comments on a line of their own."
msgstr ""

#: ../../tutorial/controlflow.rst:734
msgid "Use docstrings."
msgstr ""

#: ../../tutorial/controlflow.rst:736
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""

#: ../../tutorial/controlflow.rst:739
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``CamelCase`` for classes and ``lower_case_with_underscores`` for functions "
"and methods.  Always use ``self`` as the name for the first method argument "
"(see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""

#: ../../tutorial/controlflow.rst:744
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any"
" case."
msgstr ""

#: ../../tutorial/controlflow.rst:748
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the"
" slightest chance people speaking a different language will read or maintain"
" the code."
msgstr ""

#: ../../tutorial/controlflow.rst:754
msgid "Footnotes"
msgstr "註解"

#: ../../tutorial/controlflow.rst:755
msgid ""
"Actually, *call by object reference* would be a better description, since if"
" a mutable object is passed, the caller will see any changes the callee "
"makes to it (items inserted into a list)."
msgstr ""
