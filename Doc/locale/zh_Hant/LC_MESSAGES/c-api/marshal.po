# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-09 21:33+0800\n"
"PO-Revision-Date: 2015-12-09 17:51+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hant\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/marshal.rst:6
msgid "Data marshalling support"
msgstr ""

#: ../../c-api/marshal.rst:8
msgid ""
"These routines allow C code to work with serialized objects using the same "
"data format as the :mod:`marshal` module.  There are functions to write data"
" into the serialization format, and additional functions that can be used to"
" read the data back.  Files used to store marshalled data must be opened in "
"binary mode."
msgstr ""

#: ../../c-api/marshal.rst:14
msgid "Numeric values are stored with the least significant byte first."
msgstr ""

#: ../../c-api/marshal.rst:16
msgid ""
"The module supports two versions of the data format: version 0 is the "
"historical version, version 1 shares interned strings in the file, and upon "
"unmarshalling.  Version 2 uses a binary format for floating point numbers. "
"*Py_MARSHAL_VERSION* indicates the current file format (currently 2)."
msgstr ""

#: ../../c-api/marshal.rst:24
msgid ""
"Marshal a :c:type:`long` integer, *value*, to *file*.  This will only write "
"the least-significant 32 bits of *value*; regardless of the size of the "
"native :c:type:`long` type.  *version* indicates the file format."
msgstr ""

#: ../../c-api/marshal.rst:31
msgid ""
"Marshal a Python object, *value*, to *file*. *version* indicates the file "
"format."
msgstr ""

#: ../../c-api/marshal.rst:37
msgid ""
"Return a string object containing the marshalled representation of *value*. "
"*version* indicates the file format."
msgstr ""

#: ../../c-api/marshal.rst:41
msgid "The following functions allow marshalled values to be read back in."
msgstr ""

#: ../../c-api/marshal.rst:43
msgid ""
"XXX What about error detection?  It appears that reading past the end of the"
" file will always result in a negative numeric value (where that's "
"relevant), but it's not clear that negative values won't be handled properly"
" when there's no error.  What's the right way to tell? Should only non-"
"negative values be written using these routines?"
msgstr ""

#: ../../c-api/marshal.rst:52
msgid ""
"Return a C :c:type:`long` from the data stream in a :c:type:`FILE\\*` opened"
" for reading.  Only a 32-bit value can be read in using this function, "
"regardless of the native size of :c:type:`long`."
msgstr ""

#: ../../c-api/marshal.rst:56 ../../c-api/marshal.rst:65
msgid "On error, raise an exception and return ``-1``."
msgstr ""

#: ../../c-api/marshal.rst:61
msgid ""
"Return a C :c:type:`short` from the data stream in a :c:type:`FILE\\*` "
"opened for reading.  Only a 16-bit value can be read in using this function,"
" regardless of the native size of :c:type:`short`."
msgstr ""

#: ../../c-api/marshal.rst:70
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE\\*` opened "
"for reading."
msgstr ""

#: ../../c-api/marshal.rst:73 ../../c-api/marshal.rst:87
#: ../../c-api/marshal.rst:96
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError` or "
":exc:`TypeError`) and returns *NULL*."
msgstr ""

#: ../../c-api/marshal.rst:79
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE\\*` opened "
"for reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this function "
"assumes that no further objects will be read from the file, allowing it to "
"aggressively load file data into memory so that the de-serialization can "
"operate from data in memory rather than reading a byte at a time from the "
"file.  Only use these variant if you are certain that you won't be reading "
"anything else from the file."
msgstr ""

#: ../../c-api/marshal.rst:93
msgid ""
"Return a Python object from the data stream in a character buffer containing"
" *len* bytes pointed to by *string*."
msgstr ""
