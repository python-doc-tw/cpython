# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# Ching-Lung Chuang, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-09 21:33+0800\n"
"PO-Revision-Date: 2015-12-11 17:42+0000\n"
"Last-Translator: Ching-Lung Chuang\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hant\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../faq/gui.rst:5
msgid "Graphic User Interface FAQ"
msgstr "圖形化使用者界面常見問答集"

#: ../../faq/gui.rst:15
msgid "General GUI Questions"
msgstr "常見圖形化使用者界面(GUI) 問題"

#: ../../faq/gui.rst:18
msgid "What platform-independent GUI toolkits exist for Python?"
msgstr ""

#: ../../faq/gui.rst:20
msgid ""
"Depending on what platform(s) you are aiming at, there are several.  Some of"
" them haven't been ported to Python 3 yet.  At least `Tkinter`_ and `Qt`_ "
"are known to be Python 3-compatible."
msgstr ""

#: ../../faq/gui.rst:27
msgid "Tkinter"
msgstr ""

#: ../../faq/gui.rst:29
msgid ""
"Standard builds of Python include an object-oriented interface to the Tcl/Tk"
" widget set, called :ref:`tkinter <Tkinter>`.  This is probably the easiest "
"to install (since it comes included with most `binary distributions "
"<https://www.python.org/download/>`_ of Python) and use. For more info about"
" Tk, including pointers to the source, see the `Tcl/Tk home page "
"<http://www.tcl.tk>`_.  Tcl/Tk is fully portable to the Mac OS X, Windows, "
"and Unix platforms."
msgstr ""

#: ../../faq/gui.rst:38
msgid "wxWidgets"
msgstr ""

#: ../../faq/gui.rst:40
msgid ""
"wxWidgets (http://www.wxwidgets.org) is a free, portable GUI class library "
"written in C++ that provides a native look and feel on a number of "
"platforms, with Windows, Mac OS X, GTK, X11, all listed as current stable "
"targets.  Language bindings are available for a number of languages "
"including Python, Perl, Ruby, etc."
msgstr ""

#: ../../faq/gui.rst:46
msgid ""
"wxPython (http://www.wxpython.org) is the Python binding for wxwidgets.  "
"While it often lags slightly behind the official wxWidgets releases, it also"
" offers a number of features via pure Python extensions that are not "
"available in other language bindings.  There is an active wxPython user and "
"developer community."
msgstr ""

#: ../../faq/gui.rst:52
msgid ""
"Both wxWidgets and wxPython are free, open source, software with permissive "
"licences that allow their use in commercial products as well as in freeware "
"or shareware."
msgstr ""

#: ../../faq/gui.rst:58
msgid "Qt"
msgstr "Qt"

#: ../../faq/gui.rst:60
msgid ""
"There are bindings available for the Qt toolkit (using either `PyQt "
"<http://www.riverbankcomputing.co.uk/software/pyqt/intro>`_ or `PySide "
"<http://www.pyside.org/>`_) and for KDE (`PyKDE "
"<https://techbase.kde.org/Development/Languages/Python>`__). PyQt is "
"currently more mature than PySide, but you must buy a PyQt license from "
"`Riverbank Computing "
"<http://www.riverbankcomputing.co.uk/software/pyqt/license>`_ if you want to"
" write proprietary applications.  PySide is free for all applications."
msgstr ""

#: ../../faq/gui.rst:67
msgid ""
"Qt 4.5 upwards is licensed under the LGPL license; also, commercial licenses"
" are available from `The Qt Company <http://www.qt.io/licensing/>`_."
msgstr ""

#: ../../faq/gui.rst:71
msgid "Gtk+"
msgstr "Gtk+"

#: ../../faq/gui.rst:73
msgid ""
"The `GObject introspection bindings <https://live.gnome.org/PyGObject>`_ for"
" Python allow you to write GTK+ 3 applications.  There is also a `Python "
"GTK+ 3 Tutorial <http://python-gtk-3-tutorial.readthedocs.org/en/latest/>`_."
msgstr ""

#: ../../faq/gui.rst:77
msgid ""
"The older PyGtk bindings for the `Gtk+ 2 toolkit <http://www.gtk.org>`_ have"
" been implemented by James Henstridge; see <http://www.pygtk.org>."
msgstr ""

#: ../../faq/gui.rst:81
msgid "FLTK"
msgstr "FLTK"

#: ../../faq/gui.rst:83
msgid ""
"Python bindings for `the FLTK toolkit <http://www.fltk.org>`_, a simple yet "
"powerful and mature cross-platform windowing system, are available from `the"
" PyFLTK project <http://pyfltk.sourceforge.net>`_."
msgstr ""

#: ../../faq/gui.rst:89
msgid "FOX"
msgstr "FOX"

#: ../../faq/gui.rst:91
msgid ""
"A wrapper for `the FOX toolkit <http://www.fox-toolkit.org/>`_ called `FXpy "
"<http://fxpy.sourceforge.net/>`_ is available.  FOX supports both Unix "
"variants and Windows."
msgstr ""

#: ../../faq/gui.rst:97
msgid "OpenGL"
msgstr "開放圖形庫(OpenGL)"

#: ../../faq/gui.rst:99
msgid ""
"For OpenGL bindings, see `PyOpenGL <http://pyopengl.sourceforge.net>`_."
msgstr ""

#: ../../faq/gui.rst:103
msgid "What platform-specific GUI toolkits exist for Python?"
msgstr ""

#: ../../faq/gui.rst:105
msgid ""
"By installing the `PyObjc Objective-C bridge "
"<https://pythonhosted.org/pyobjc/>`_, Python programs can use Mac OS X's "
"Cocoa libraries."
msgstr ""

#: ../../faq/gui.rst:109
msgid ""
":ref:`Pythonwin <windows-faq>` by Mark Hammond includes an interface to the "
"Microsoft Foundation Classes and a Python programming environment that's "
"written mostly in Python using the MFC classes."
msgstr ""

#: ../../faq/gui.rst:115
msgid "Tkinter questions"
msgstr ""

#: ../../faq/gui.rst:118
msgid "How do I freeze Tkinter applications?"
msgstr ""

#: ../../faq/gui.rst:120
msgid ""
"Freeze is a tool to create stand-alone applications.  When freezing Tkinter "
"applications, the applications will not be truly stand-alone, as the "
"application will still need the Tcl and Tk libraries."
msgstr ""

#: ../../faq/gui.rst:124
msgid ""
"One solution is to ship the application with the Tcl and Tk libraries, and "
"point to them at run-time using the :envvar:`TCL_LIBRARY` and "
":envvar:`TK_LIBRARY` environment variables."
msgstr ""

#: ../../faq/gui.rst:128
msgid ""
"To get truly stand-alone applications, the Tcl scripts that form the library"
" have to be integrated into the application as well. One tool supporting "
"that is SAM (stand-alone modules), which is part of the Tix distribution "
"(http://tix.sourceforge.net/)."
msgstr ""

#: ../../faq/gui.rst:133
msgid ""
"Build Tix with SAM enabled, perform the appropriate call to "
":c:func:`Tclsam_init`, etc. inside Python's :file:`Modules/tkappinit.c`, and"
" link with libtclsam and libtksam (you might include the Tix libraries as "
"well)."
msgstr ""

#: ../../faq/gui.rst:140
msgid "Can I have Tk events handled while waiting for I/O?"
msgstr ""

#: ../../faq/gui.rst:142
msgid ""
"On platforms other than Windows, yes, and you don't even need threads!  But "
"you'll have to restructure your I/O code a bit.  Tk has the equivalent of "
"Xt's :c:func:`XtAddInput()` call, which allows you to register a callback "
"function which will be called from the Tk mainloop when I/O is possible on a"
" file descriptor.  See :ref:`tkinter-file-handlers`."
msgstr ""

#: ../../faq/gui.rst:150
msgid "I can't get key bindings to work in Tkinter: why?"
msgstr ""

#: ../../faq/gui.rst:152
msgid ""
"An often-heard complaint is that event handlers bound to events with the "
":meth:`bind` method don't get handled even when the appropriate key is "
"pressed."
msgstr ""

#: ../../faq/gui.rst:155
msgid ""
"The most common cause is that the widget to which the binding applies "
"doesn't have \"keyboard focus\".  Check out the Tk documentation for the "
"focus command. Usually a widget is given the keyboard focus by clicking in "
"it (but not for labels; see the takefocus option)."
msgstr ""
