# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# Liang Bo Wang <ccwang002@gmail.com>, 2015-2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-09 21:33+0800\n"
"PO-Revision-Date: 2016-01-14 14:12+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hant\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/interpreter.rst:5
msgid "Using the Python Interpreter"
msgstr "使用 Python 直譯器"

#: ../../tutorial/interpreter.rst:11
msgid "Invoking the Interpreter"
msgstr "啟動直譯器"

#: ../../tutorial/interpreter.rst:13
msgid ""
"The Python interpreter is usually installed as "
":file:`/usr/local/bin/python3.5` on those machines where it is available; "
"putting :file:`/usr/local/bin` in your Unix shell's search path makes it "
"possible to start it by typing the command:"
msgstr "Python 直譯器（interpreter）如果電腦有提供的話，通常安裝在 :file:`/usr/local/bin/python3.5`\\ 。把 :file:`/usr/local/bin` 加入至你的 Unix shell 搜尋路徑中，使得輸入以下的指令至 shell 時，"

#: ../../tutorial/interpreter.rst:21
msgid ""
"to the shell. [#]_ Since the choice of the directory where the interpreter "
"lives is an installation option, other places are possible; check with your "
"local Python guru or system administrator.  (E.g., :file:`/usr/local/python`"
" is a popular alternative location.)"
msgstr "能啟動 Python [#]_\\ 。因為直譯器存放的目錄是個安裝選項，其他的目錄也是有可能的；請洽談在地的 Python 達人或者系統管理員。（例如：\\ :file:`/usr/local/python` 是個很常見的另類存放路徑。）"

#: ../../tutorial/interpreter.rst:26
msgid ""
"On Windows machines, the Python installation is usually placed in "
":file:`C:\\\\Python35`, though you can change this when you're running the "
"installer.  To add this directory to your path,  you can type the following "
"command into the command prompt in a DOS box::"
msgstr "在 Windows 的電腦上，Python 的安裝存放在 :file:`C:\\\\Python35`\\ ，雖然在安裝時可以更變這個設定。欲加此目錄加入你的路徑中，可以輸入以下的指令到 DOS 環境的命令提示字元（ command prompt）：\n\n::"

#: ../../tutorial/interpreter.rst:33
msgid ""
"Typing an end-of-file character (:kbd:`Control-D` on Unix, :kbd:`Control-Z` "
"on Windows) at the primary prompt causes the interpreter to exit with a zero"
" exit status.  If that doesn't work, you can exit the interpreter by typing "
"the following command: ``quit()``."
msgstr "在主提示符輸入一個 end-of-file 字元（在 Unix 上為 :kbd:`Control-D`\\ ；在 Windows 上為 :kbd:`Control-Z`\\ ）會使得直譯器以零退出狀況（zero exit status）離開。如果上述的做法沒有效，也可以輸入指令 ``quit()`` 離開直譯器。"

#: ../../tutorial/interpreter.rst:38
msgid ""
"The interpreter's line-editing features include interactive editing, history"
" substitution and code completion on systems that support readline.  Perhaps"
" the quickest check to see whether command line editing is supported is "
"typing :kbd:`Control-P` to the first Python prompt you get.  If it beeps, "
"you have command line editing; see Appendix :ref:`tut-interacting` for an "
"introduction to the keys.  If nothing appears to happen, or if ``^P`` is "
"echoed, command line editing isn't available; you'll only be able to use "
"backspace to remove characters from the current line."
msgstr "直譯器的指令列編輯功能有很多，在支援 readline 函式庫的系統上包含：互動編輯、歷史取代、指令補完等功能。最快檢查有無支援 readline 的方法為在第一個 Python 提示符後輸入 :kbd:`Control-P`\\ ，如果出現嗶嗶聲，就代表有支援；見附錄 :ref:`tut-interacting` 介紹相關的快速鍵。如果什麼事沒有發生，或者出現一個 ``^P``\\ ，就代表並沒有這指令列編輯功能；此時只能使用 backspace 去除該行的字元。"

#: ../../tutorial/interpreter.rst:47
msgid ""
"The interpreter operates somewhat like the Unix shell: when called with "
"standard input connected to a tty device, it reads and executes commands "
"interactively; when called with a file name argument or with a file as "
"standard input, it reads and executes a *script* from that file."
msgstr "這個直譯器使用起來像是 Unix shell：如果它被呼叫時連結至一個 tty 裝置，它會互動式地讀取並執行指令；如果被呼叫時給定檔名為引數或者使用 stdin 傳入檔案內容，它會將這個檔案視為\\ **腳本**\\ 來閱讀。"

#: ../../tutorial/interpreter.rst:52
msgid ""
"A second way of starting the interpreter is ``python -c command [arg] ...``,"
" which executes the statement(s) in *command*, analogous to the shell's "
":option:`-c` option.  Since Python statements often contain spaces or other "
"characters that are special to the shell, it is usually advised to quote "
"*command* in its entirety with single quotes."
msgstr "另一個起動直譯器的方式為 ``python -c command [arg] ...``\\ ，它會執行在 *command* 裡的指令（們），行為如同 shell 的 :option:`-c` 選項。因為 Python 的指令包含空白等 shell 用到的特殊字元，通常建議用單引號把 *command* 包起來。"

#: ../../tutorial/interpreter.rst:58
msgid ""
"Some Python modules are also useful as scripts.  These can be invoked using "
"``python -m module [arg] ...``, which executes the source file for *module* "
"as if you had spelled out its full name on the command line."
msgstr "有些 Python 模組使用上如腳本般一樣方便。透過 ``python -m module [arg] ...`` 可以執行 *module* 模組的原始碼，就如同直接傳入那個模組的完整路徑一樣的行為。"

#: ../../tutorial/interpreter.rst:62
msgid ""
"When a script file is used, it is sometimes useful to be able to run the "
"script and enter interactive mode afterwards.  This can be done by passing "
":option:`-i` before the script."
msgstr "當要執行一個腳本檔時，有時候會希望在腳本結束時進入互動模式。此時可在執行腳本的指令加入 :option:`-i`\\ 。"

#: ../../tutorial/interpreter.rst:66
msgid "All command line options are described in :ref:`using-on-general`."
msgstr "所有指令可用的參數都詳記在\\ :ref:`using-on-general`\\ 。"

#: ../../tutorial/interpreter.rst:72
msgid "Argument Passing"
msgstr "傳遞引數"

#: ../../tutorial/interpreter.rst:74
msgid ""
"When known to the interpreter, the script name and additional arguments "
"thereafter are turned into a list of strings and assigned to the ``argv`` "
"variable in the ``sys`` module.  You can access this list by executing "
"``import sys``.  The length of the list is at least one; when no script and "
"no arguments are given, ``sys.argv[0]`` is an empty string.  When the script"
" name is given as ``'-'`` (meaning  standard input), ``sys.argv[0]`` is set "
"to ``'-'``.  When :option:`-c` *command* is used, ``sys.argv[0]`` is set to "
"``'-c'``.  When :option:`-m` *module* is used, ``sys.argv[0]``  is set to "
"the full name of the located module.  Options found after  :option:`-c` "
"*command* or :option:`-m` *module* are not consumed  by the Python "
"interpreter's option processing but left in ``sys.argv`` for  the command or"
" module to handle."
msgstr "當直擇器收到腳本的名稱和額外的引數後，他們會轉換為字串的串列（list）並指派給 ``sys`` 模組的 ``argv`` 變數。你可以執行 ``import sys`` 取得這個串列。這個串列的長度至少為一；當沒有給任何腳本名稱和引數時， ``sys.argv[0]`` 為空字串。當腳本名為 ``'-'``\\ （指標準輸入）時， ``sys.argv[0]`` 為 ``'-'``\\ 。當使用 :option:`-c` *command* 時， ``sys.argv[0]`` 為 ``'-c'``\\ 。當使用 :option:`-m` *module* 時， ``sys.argv[0]`` 為該模組存在的完整路徑。其餘非 :option:`-c` *command* 或 :option:`-m` *module* 的選項不會被 Python 直譯器吸收掉，而是留在 ``sys.argv`` 變數中給後續的 command 或 module 使用。"

#: ../../tutorial/interpreter.rst:90
msgid "Interactive Mode"
msgstr "互動模式"

#: ../../tutorial/interpreter.rst:92
msgid ""
"When commands are read from a tty, the interpreter is said to be in "
"*interactive mode*.  In this mode it prompts for the next command with the "
"*primary prompt*, usually three greater-than signs (``>>>``); for "
"continuation lines it prompts with the *secondary prompt*, by default three "
"dots (``...``). The interpreter prints a welcome message stating its version"
" number and a copyright notice before printing the first prompt::"
msgstr "當指令是由 tty 讀取時，此直譯器被稱為處於「互動模式」中。在這個模式中，直譯器會使用「主提示符（*primary prompt*）」準備接受下一個指令，通常為三個大於的符號（\\ ``>>>``\\ ）；如果是接續多行時，它會改用「次提示符（*secondary prompt*）」提示，預設為三點（\\ ``...``\\ ）。進入直譯器互動模式時，在一開始印出第一提示符之前，會先印出歡迎訊息包含它的版本號以及版權聲明：\n\n::"

#: ../../tutorial/interpreter.rst:107
msgid ""
"Continuation lines are needed when entering a multi-line construct. As an "
"example, take a look at this :keyword:`if` statement::"
msgstr "接續多行的情況出現在需要多行才能建立完整指令時。舉例來說，像是 :keyword:`if` 敘述：\n\n::"

#: ../../tutorial/interpreter.rst:117
msgid "For more on interactive mode, see :ref:`tut-interac`."
msgstr "更多有關互動模式的使用，請見\\ :ref:`tut-interac`\\ 。"

#: ../../tutorial/interpreter.rst:123
msgid "The Interpreter and Its Environment"
msgstr "直譯器與它的環境"

#: ../../tutorial/interpreter.rst:129
msgid "Source Code Encoding"
msgstr "原始碼的字元編碼（encoding）"

#: ../../tutorial/interpreter.rst:131
msgid ""
"By default, Python source files are treated as encoded in UTF-8.  In that "
"encoding, characters of most languages in the world can be used "
"simultaneously in string literals, identifiers and comments --- although the"
" standard library only uses ASCII characters for identifiers, a convention "
"that any portable code should follow.  To display all these characters "
"properly, your editor must recognize that the file is UTF-8, and it must use"
" a font that supports all the characters in the file."
msgstr "預設 Python 原始碼檔案的字元編碼使用 UTF-8。在這個編碼中，世界上多數語言的文字可以同時被使用在字串內容、識別名（identifier）及註解中 --- 雖然在標準函式庫中只使用 ASCII 字元作為識別名，這也是個任何 portable 程式碼需遵守的慣例。如果要正確地顯示所有字元，您的編輯器需要能夠認識檔案為 UTF-8，並且需要能顯示檔案中所有字元的字型。"

#: ../../tutorial/interpreter.rst:139
msgid ""
"It is also possible to specify a different encoding for source files.  In "
"order to do this, put one more special comment line right after the ``#!`` "
"line to define the source file encoding::"
msgstr "在原始碼檔案中指定一個其他的字元編碼是可能的。如果想這麼做，在  `#!` 行後加上特殊的註解來指定該檔案的編碼：\n\n::"

#: ../../tutorial/interpreter.rst:145
msgid ""
"With that declaration, everything in the source file will be treated as "
"having the encoding *encoding* instead of UTF-8.  The list of possible "
"encodings can be found in the Python Library Reference, in the section on "
":mod:`codecs`."
msgstr "有了這個宣告，該原始檔案中的所有字元都會以指定的編碼 *encoding* 而非 UTF-8。所有可能的編碼可以在 Python 標準函式庫參照中的 :mod:`codecs` 章節找到。"

#: ../../tutorial/interpreter.rst:149
msgid ""
"For example, if your editor of choice does not support UTF-8 encoded files "
"and insists on using some other encoding, say Windows-1252, you can write::"
msgstr "舉例來說，如果您的編輯器並不支援 UTF-8 編碼的檔案並決定使用其他編碼，以 Windows-1252 為例，您可以寫：\n\n::"

#: ../../tutorial/interpreter.rst:154
msgid ""
"and still use all characters in the Windows-1252 character set in the source"
" files.  The special encoding comment must be in the *first or second* line "
"within the file."
msgstr "然後就可以在這些原始碼檔案中使用所有可以被 Windows-1252 接受的字元。這行標注特別編碼的註解必須出現檔案第一或第二行。"

#: ../../tutorial/interpreter.rst:160
msgid "Footnotes"
msgstr "註解"

#: ../../tutorial/interpreter.rst:161
msgid ""
"On Unix, the Python 3.x interpreter is by default not installed with the "
"executable named ``python``, so that it does not conflict with a "
"simultaneously installed Python 2.x executable."
msgstr ""
