# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-31 15:04+0800\n"
"PO-Revision-Date: 2015-12-09 17:52+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-"
"doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../using/cmdline.rst:9
msgid "Command line and environment"
msgstr ""

#: ../../using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr ""

#: ../../using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See "
":ref:`implementations` for further resources."
msgstr ""

#: ../../using/cmdline.rst:23
msgid "Command line"
msgstr ""

#: ../../using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr ""

#: ../../using/cmdline.rst:29
msgid "The most common use case is, of course, a simple invocation of a script::"
msgstr ""

#: ../../using/cmdline.rst:37
msgid "Interface options"
msgstr ""

#: ../../using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr ""

#: ../../using/cmdline.rst:42
msgid ""
"When called with standard input connected to a tty device, it prompts for"
" commands and executes them until an EOF (an end-of-file character, you "
"can produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on "
"Windows) is read."
msgstr ""

#: ../../using/cmdline.rst:45
msgid ""
"When called with a file name argument or with a file as standard input, "
"it reads and executes a script from that file."
msgstr ""

#: ../../using/cmdline.rst:47
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr ""

#: ../../using/cmdline.rst:49
msgid ""
"When called with ``-c command``, it executes the Python statement(s) "
"given as *command*.  Here *command* may contain multiple statements "
"separated by newlines. Leading whitespace is significant in Python "
"statements!"
msgstr ""

#: ../../using/cmdline.rst:52
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr ""

#: ../../using/cmdline.rst:55
msgid "In non-interactive mode, the entire input is parsed before it is executed."
msgstr ""

#: ../../using/cmdline.rst:57
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` --"
" note that the first element, subscript zero (``sys.argv[0]``), is a "
"string reflecting the program's source."
msgstr ""

#: ../../using/cmdline.rst:64
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as "
"in normal module code."
msgstr ""

#: ../../using/cmdline.rst:68
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"``\"-c\"`` and the current directory will be added to the start of "
":data:`sys.path` (allowing modules in that directory to be imported as "
"top level modules)."
msgstr ""

#: ../../using/cmdline.rst:76
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as "
"the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:79
msgid ""
"Since the argument is a *module* name, you must not give a file extension"
" (``.py``).  The ``module-name`` should be a valid Python module name, "
"but the implementation may not always enforce this (e.g. it may allow you"
" to use a name that includes a hyphen)."
msgstr ""

#: ../../using/cmdline.rst:84
msgid ""
"Package names (including namespace packages) are also permitted. When a "
"package name is supplied instead of a normal module, the interpreter will"
" execute ``<pkg>.__main__`` as the main module. This behaviour is "
"deliberately similar to the handling of directories and zipfiles that are"
" passed to the interpreter as the script argument."
msgstr ""

#: ../../using/cmdline.rst:93
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can"
" still be used for precompiled modules, even if the original source file "
"is not available."
msgstr ""

#: ../../using/cmdline.rst:98
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"the full path to the module file (while the module file is being located,"
" the first element will be set to ``\"-m\"``). As with the :option:`-c` "
"option, the current directory will be added to the start of "
":data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:103
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""

#: ../../using/cmdline.rst:111
msgid ":func:`runpy.run_module`"
msgstr ""

#: ../../using/cmdline.rst:111 ../../using/cmdline.rst:153
msgid "Equivalent functionality directly available to Python code"
msgstr ""

#: ../../using/cmdline.rst:113
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ""

#: ../../using/cmdline.rst:116
msgid "Supply the package name to run a ``__main__`` submodule."
msgstr ""

#: ../../using/cmdline.rst:119
msgid "namespace packages are also supported"
msgstr ""

#: ../../using/cmdline.rst:125
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input"
" is a terminal, :option:`-i` is implied."
msgstr ""

#: ../../using/cmdline.rst:128
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"``\"-\"`` and the current directory will be added to the start of "
":data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:135
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem"
" path (absolute or relative) referring to either a Python file, a "
"directory containing a ``__main__.py`` file, or a zipfile containing a "
"``__main__.py`` file."
msgstr ""

#: ../../using/cmdline.rst:140
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"the script name as given on the command line."
msgstr ""

#: ../../using/cmdline.rst:143
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the "
"file is executed as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:147
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in "
"that location is executed as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:152
msgid ":func:`runpy.run_path`"
msgstr ""

#: ../../using/cmdline.rst:156
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]``"
" is an empty string (``\"\"``) and the current directory will be added to"
" the start of :data:`sys.path`.  Also, tab-completion and history editing"
" is automatically enabled, if available on your platform (see :ref"
":`rlcompleter-config`)."
msgstr ""

#: ../../using/cmdline.rst:162
msgid ":ref:`tut-invoking`"
msgstr ""

#: ../../using/cmdline.rst:164
msgid "Automatic enabling of tab-completion and history editing."
msgstr ""

#: ../../using/cmdline.rst:169
msgid "Generic options"
msgstr ""

#: ../../using/cmdline.rst:175
msgid "Print a short description of all command line options."
msgstr ""

#: ../../using/cmdline.rst:181
msgid "Print the Python version number and exit.  Example output could be::"
msgstr ""

#: ../../using/cmdline.rst:189
msgid "Miscellaneous options"
msgstr ""

#: ../../using/cmdline.rst:193
msgid ""
"Issue a warning when comparing :class:`bytes` or :class:`bytearray` with "
":class:`str` or :class:`bytes` with :class:`int`.  Issue an error when "
"the option is given twice (:option:`-bb`)."
msgstr ""

#: ../../using/cmdline.rst:202
msgid ""
"If given, Python won't try to write ``.pyc`` files on the import of "
"source modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""

#: ../../using/cmdline.rst:208
msgid ""
"Turn on parser debugging output (for wizards only, depending on "
"compilation options).  See also :envvar:`PYTHONDEBUG`."
msgstr ""

#: ../../using/cmdline.rst:214
msgid ""
"Ignore all :envvar:`PYTHON*` environment variables, e.g. "
":envvar:`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../../using/cmdline.rst:220
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, "
"even when :data:`sys.stdin` does not appear to be a terminal.  The "
":envvar:`PYTHONSTARTUP` file is not read."
msgstr ""

#: ../../using/cmdline.rst:225
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""

#: ../../using/cmdline.rst:231
msgid ""
"Run Python in isolated mode. This also implies -E and -s. In isolated "
"mode :data:`sys.path` contains neither the script's directory nor the "
"user's site-packages directory. All :envvar:`PYTHON*` environment "
"variables are ignored, too. Further restrictions may be imposed to "
"prevent the user from injecting malicious code."
msgstr ""

#: ../../using/cmdline.rst:242
msgid ""
"Turn on basic optimizations.  This changes the filename extension for "
"compiled (:term:`bytecode`) files from ``.pyc`` to ``.pyo``.  See also "
":envvar:`PYTHONOPTIMIZE`."
msgstr ""

#: ../../using/cmdline.rst:249
msgid "Discard docstrings in addition to the :option:`-O` optimizations."
msgstr ""

#: ../../using/cmdline.rst:254
msgid "Don't display the copyright and version messages even in interactive mode."
msgstr ""

#: ../../using/cmdline.rst:261
msgid ""
"Kept for compatibility.  On Python 3.3 and greater, hash randomization is"
" turned on by default."
msgstr ""

#: ../../using/cmdline.rst:264
msgid ""
"On previous versions of Python, this option turns on hash randomization, "
"so that the :meth:`__hash__` values of str, bytes and datetime are "
"\"salted\" with an unpredictable random value.  Although they remain "
"constant within an individual Python process, they are not predictable "
"between repeated invocations of Python."
msgstr ""

#: ../../using/cmdline.rst:270
msgid ""
"Hash randomization is intended to provide protection against a denial-of-"
"service caused by carefully-chosen inputs that exploit the worst case "
"performance of a dict construction, O(n^2) complexity.  See "
"http://www.ocert.org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../../using/cmdline.rst:275
msgid ""
":envvar:`PYTHONHASHSEED` allows you to set a fixed value for the hash "
"seed secret."
msgstr ""

#: ../../using/cmdline.rst:283
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to "
":data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:288 ../../using/cmdline.rst:567
#: ../../using/cmdline.rst:579
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ""

#: ../../using/cmdline.rst:293
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call "
":func:`site.main` if you want them to be triggered)."
msgstr ""

#: ../../using/cmdline.rst:301
msgid ""
"Force the binary layer of the stdout and stderr streams (which is "
"available as their ``buffer`` attribute) to be unbuffered. The text I/O "
"layer will still be line-buffered if writing to the console, or block-"
"buffered if redirected to a non-interactive file."
msgstr ""

#: ../../using/cmdline.rst:306
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr ""

#: ../../using/cmdline.rst:311
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice "
"(:option:`-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at "
"exit. See also :envvar:`PYTHONVERBOSE`."
msgstr ""

#: ../../using/cmdline.rst:320
msgid ""
"Warning control.  Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`.  A typical warning message has the "
"following form::"
msgstr ""

#: ../../using/cmdline.rst:326
msgid ""
"By default, each warning is printed once for each source line where it "
"occurs.  This option controls how often warnings are printed."
msgstr ""

#: ../../using/cmdline.rst:329
msgid ""
"Multiple :option:`-W` options may be given; when a warning matches more "
"than one option, the action for the last matching option is performed.  "
"Invalid :option:`-W` options are ignored (though, a warning message is "
"printed about invalid options when the first warning is issued)."
msgstr ""

#: ../../using/cmdline.rst:334
msgid ""
"Warnings can also be controlled from within a Python program using the "
":mod:`warnings` module."
msgstr ""

#: ../../using/cmdline.rst:337
msgid ""
"The simplest form of argument is one of the following action strings (or "
"a unique abbreviation):"
msgstr ""

#: ../../using/cmdline.rst:340
msgid "``ignore``"
msgstr ""

#: ../../using/cmdline.rst:341
msgid "Ignore all warnings."
msgstr ""

#: ../../using/cmdline.rst:343
msgid "``default``"
msgstr ""

#: ../../using/cmdline.rst:343
msgid ""
"Explicitly request the default behavior (printing each warning once per "
"source line)."
msgstr ""

#: ../../using/cmdline.rst:347
msgid "``all``"
msgstr ""

#: ../../using/cmdline.rst:346
msgid ""
"Print a warning each time it occurs (this may generate many messages if a"
" warning is triggered repeatedly for the same source line, such as inside"
" a loop)."
msgstr ""

#: ../../using/cmdline.rst:349
msgid "``module``"
msgstr ""

#: ../../using/cmdline.rst:350
msgid "Print each warning only the first time it occurs in each module."
msgstr ""

#: ../../using/cmdline.rst:351
msgid "``once``"
msgstr ""

#: ../../using/cmdline.rst:352
msgid "Print each warning only the first time it occurs in the program."
msgstr ""

#: ../../using/cmdline.rst:354
msgid "``error``"
msgstr ""

#: ../../using/cmdline.rst:354
msgid "Raise an exception instead of printing a warning message."
msgstr ""

#: ../../using/cmdline.rst:356
msgid "The full form of argument is::"
msgstr ""

#: ../../using/cmdline.rst:360
msgid ""
"Here, *action* is as explained above but only applies to messages that "
"match the remaining fields.  Empty fields match all values; trailing "
"empty fields may be omitted.  The *message* field matches the start of "
"the warning message printed; this match is case-insensitive.  The "
"*category* field matches the warning category.  This must be a class "
"name; the match tests whether the actual warning category of the message "
"is a subclass of the specified warning category.  The full class name "
"must be given.  The *module* field matches the (fully-qualified) module "
"name; this match is case-sensitive.  The *line* field matches the line "
"number, where zero matches all line numbers and is thus equivalent to an "
"omitted line number."
msgstr ""

#: ../../using/cmdline.rst:372
msgid ":mod:`warnings` -- the warnings module"
msgstr ""

#: ../../using/cmdline.rst:374
msgid ":pep:`230` -- Warning framework"
msgstr ""

#: ../../using/cmdline.rst:376
msgid ":envvar:`PYTHONWARNINGS`"
msgstr ""

#: ../../using/cmdline.rst:381
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of "
"``#!cmd``.  This is intended for a DOS specific hack only."
msgstr ""

#: ../../using/cmdline.rst:384
msgid "The line numbers in error messages will be off by one."
msgstr ""

#: ../../using/cmdline.rst:389
msgid ""
"Reserved for various implementation-specific options.  CPython currently "
"defines the following possible values:"
msgstr ""

#: ../../using/cmdline.rst:392
msgid "``-X faulthandler`` to enable :mod:`faulthandler`;"
msgstr ""

#: ../../using/cmdline.rst:393
msgid ""
"``-X showrefcount`` to enable the output of the total reference count and"
" memory blocks (only works on debug builds);"
msgstr ""

#: ../../using/cmdline.rst:395
msgid ""
"``-X tracemalloc`` to start tracing Python memory allocations using the "
":mod:`tracemalloc` module. By default, only the most recent frame is "
"stored in a traceback of a trace. Use ``-X tracemalloc=NFRAME`` to start "
"tracing with a traceback limit of *NFRAME* frames. See the "
":func:`tracemalloc.start` for more information."
msgstr ""

#: ../../using/cmdline.rst:401
msgid ""
"It also allows to pass arbitrary values and retrieve them through the "
":data:`sys._xoptions` dictionary."
msgstr ""

#: ../../using/cmdline.rst:404
msgid "It is now allowed to pass :option:`-X` with CPython."
msgstr ""

#: ../../using/cmdline.rst:407
msgid "The ``-X faulthandler`` option."
msgstr ""

#: ../../using/cmdline.rst:410
msgid "The ``-X showrefcount`` and ``-X tracemalloc`` options."
msgstr ""

#: ../../using/cmdline.rst:415
msgid "Options you shouldn't use"
msgstr ""

#: ../../using/cmdline.rst:419
msgid "Reserved for use by Jython_."
msgstr ""

#: ../../using/cmdline.rst:427
msgid "Environment variables"
msgstr ""

#: ../../using/cmdline.rst:429
msgid ""
"These environment variables influence Python's behavior, they are "
"processed before the command-line switches other than -E or -I.  It is "
"customary that command-line switches override environmental variables "
"where there is a conflict."
msgstr ""

#: ../../using/cmdline.rst:436
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and "
":file:`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and "
":file:`{exec_prefix}` are installation-dependent directories, both "
"defaulting to :file:`/usr/local`."
msgstr ""

#: ../../using/cmdline.rst:442
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value "
"replaces both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify "
"different values for these, set :envvar:`PYTHONHOME` to "
":file:`{prefix}:{exec_prefix}`."
msgstr ""

#: ../../using/cmdline.rst:449
msgid ""
"Augment the default search path for module files.  The format is the same"
" as the shell's :envvar:`PATH`: one or more directory pathnames separated"
" by :data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). "
"Non-existent directories are silently ignored."
msgstr ""

#: ../../using/cmdline.rst:454
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` "
"entries may refer to zipfiles containing pure Python modules (in either "
"source or compiled form). Extension modules cannot be imported from "
"zipfiles."
msgstr ""

#: ../../using/cmdline.rst:458
msgid ""
"The default search path is installation dependent, but generally begins "
"with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` "
"above).  It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""

#: ../../using/cmdline.rst:462
msgid ""
"An additional directory will be inserted in the search path in front of "
":envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program"
" as the variable :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:470
msgid ""
"If this is the name of a readable file, the Python commands in that file "
"are executed before the first prompt is displayed in interactive mode.  "
"The file is executed in the same namespace where interactive commands are"
" executed so that objects defined or imported in it can be used without "
"qualification in the interactive session.  You can also change the "
"prompts :data:`sys.ps1` and :data:`sys.ps2` and the hook "
":data:`sys.__interactivehook__` in this file."
msgstr ""

#: ../../using/cmdline.rst:480
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-O` option.  If set to an integer, it is equivalent to "
"specifying :option:`-O` multiple times."
msgstr ""

#: ../../using/cmdline.rst:487
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-d` option.  If set to an integer, it is equivalent to "
"specifying :option:`-d` multiple times."
msgstr ""

#: ../../using/cmdline.rst:494
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-i` option."
msgstr ""

#: ../../using/cmdline.rst:497
msgid ""
"This variable can also be modified by Python code using "
":data:`os.environ` to force inspect mode on program termination."
msgstr ""

#: ../../using/cmdline.rst:503
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-u` option."
msgstr ""

#: ../../using/cmdline.rst:509
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-v` option.  If set to an integer, it is equivalent to "
"specifying :option:`-v` multiple times."
msgstr ""

#: ../../using/cmdline.rst:516
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  "
"This only works on Windows and OS X."
msgstr ""

#: ../../using/cmdline.rst:522
msgid ""
"If this is set to a non-empty string, Python won't try to write ``.pyc`` "
"or ``.pyo`` files on the import of source modules.  This is equivalent to"
" specifying the :option:`-B` option."
msgstr ""

#: ../../using/cmdline.rst:529
msgid ""
"If this variable is not set or set to ``random``, a random value is used "
"to seed the hashes of str, bytes and datetime objects."
msgstr ""

#: ../../using/cmdline.rst:532
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ""

#: ../../using/cmdline.rst:536
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the"
" interpreter itself, or to allow a cluster of python processes to share "
"hash values."
msgstr ""

#: ../../using/cmdline.rst:540
msgid ""
"The integer must be a decimal number in the range [0,4294967295].  "
"Specifying the value 0 will disable hash randomization."
msgstr ""

#: ../../using/cmdline.rst:548
msgid ""
"If this is set before running the interpreter, it overrides the encoding "
"used for stdin/stdout/stderr, in the syntax "
"``encodingname:errorhandler``.  Both the ``encodingname`` and the "
"``:errorhandler`` parts are optional and have the same meaning as in "
":func:`str.encode`."
msgstr ""

#: ../../using/cmdline.rst:553
msgid ""
"For stderr, the ``:errorhandler`` part is ignored; the handler will "
"always be ``'backslashreplace'``."
msgstr ""

#: ../../using/cmdline.rst:556
msgid "The ``encodingname`` part is now optional."
msgstr ""

#: ../../using/cmdline.rst:562
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:572
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used "
"to compute the path of the :data:`user site-packages directory "
"<site.USER_SITE>` and :ref:`Distutils installation paths <inst-alt-"
"install-user>` for ``python setup.py install --user``."
msgstr ""

#: ../../using/cmdline.rst:584
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on Mac "
"OS X."
msgstr ""

#: ../../using/cmdline.rst:590
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma "
"separated string, it is equivalent to specifying :option:`-W` multiple "
"times."
msgstr ""

#: ../../using/cmdline.rst:596
msgid ""
"If this environment variable is set to a non-empty string, "
":func:`faulthandler.enable` is called at startup: install a handler for "
":const:`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS` and "
":const:`SIGILL` signals to dump the Python traceback.  This is equivalent"
" to :option:`-X` ``faulthandler`` option."
msgstr ""

#: ../../using/cmdline.rst:607
msgid ""
"If this environment variable is set to a non-empty string, start tracing "
"Python memory allocations using the :mod:`tracemalloc` module. The value "
"of the variable is the maximum number of frames stored in a traceback of "
"a trace. For example, ``PYTHONTRACEMALLOC=1`` stores only the most recent"
" frame. See the :func:`tracemalloc.start` for more information."
msgstr ""

#: ../../using/cmdline.rst:618
msgid ""
"If this environment variable is set to a non-empty string, enable the "
":ref:`debug mode <asyncio-debug-mode>` of the :mod:`asyncio` module."
msgstr ""

#: ../../using/cmdline.rst:625
msgid "Debug-mode variables"
msgstr ""

#: ../../using/cmdline.rst:627
msgid ""
"Setting these variables only has an effect in a debug build of Python, "
"that is, if Python was configured with the ``--with-pydebug`` build "
"option."
msgstr ""

#: ../../using/cmdline.rst:632
msgid "If set, Python will print threading debug info."
msgstr ""

#: ../../using/cmdline.rst:637
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr ""

#: ../../using/cmdline.rst:643
msgid ""
"If set, Python will print memory allocation statistics every time a new "
"object arena is created, and on shutdown."
msgstr ""

#~ msgid "runpy.run_module()"
#~ msgstr ""

#~ msgid "runpy.run_path()"
#~ msgstr ""

#~ msgid "ignore"
#~ msgstr ""

#~ msgid "default"
#~ msgstr ""

#~ msgid "all"
#~ msgstr ""

#~ msgid "module"
#~ msgstr ""

#~ msgid "once"
#~ msgstr ""

#~ msgid "error"
#~ msgstr ""

