# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-09 21:33+0800\n"
"PO-Revision-Date: 2015-12-09 17:51+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hant\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/posix.rst:2
msgid ":mod:`posix` --- The most common POSIX system calls"
msgstr ""

#: ../../library/posix.rst:9
msgid ""
"This module provides access to operating system functionality that is "
"standardized by the C Standard and the POSIX standard (a thinly disguised "
"Unix interface)."
msgstr ""

#: ../../library/posix.rst:15
msgid ""
"**Do not import this module directly.**  Instead, import the module "
":mod:`os`, which provides a *portable* version of this interface.  On Unix, "
"the :mod:`os` module provides a superset of the :mod:`posix` interface.  On "
"non-Unix operating systems the :mod:`posix` module is not available, but a "
"subset is always available through the :mod:`os` interface.  Once :mod:`os` "
"is imported, there is *no* performance penalty in using it instead of "
":mod:`posix`.  In addition, :mod:`os` provides some additional "
"functionality, such as automatically calling :func:`~os.putenv` when an "
"entry in ``os.environ`` is changed."
msgstr ""

#: ../../library/posix.rst:24
msgid ""
"Errors are reported as exceptions; the usual exceptions are given for type "
"errors, while errors reported by the system calls raise :exc:`OSError`."
msgstr ""

#: ../../library/posix.rst:31
msgid "Large File Support"
msgstr ""

#: ../../library/posix.rst:39
msgid ""
"Several operating systems (including AIX, HP-UX, Irix and Solaris) provide "
"support for files that are larger than 2 GiB from a C programming model "
"where :c:type:`int` and :c:type:`long` are 32-bit values. This is typically "
"accomplished by defining the relevant size and offset types as 64-bit "
"values. Such files are sometimes referred to as :dfn:`large files`."
msgstr ""

#: ../../library/posix.rst:45
msgid ""
"Large file support is enabled in Python when the size of an :c:type:`off_t` "
"is larger than a :c:type:`long` and the :c:type:`long long` type is "
"available and is at least as large as an :c:type:`off_t`. It may be "
"necessary to configure and compile Python with certain compiler flags to "
"enable this mode. For example, it is enabled by default with recent versions"
" of Irix, but with Solaris 2.6 and 2.7 you need to do something like::"
msgstr ""

#: ../../library/posix.rst:55
msgid "On large-file-capable Linux systems, this might work::"
msgstr ""

#: ../../library/posix.rst:64
msgid "Notable Module Contents"
msgstr ""

#: ../../library/posix.rst:66
msgid ""
"In addition to many functions described in the :mod:`os` module "
"documentation, :mod:`posix` defines the following data item:"
msgstr ""

#: ../../library/posix.rst:71
msgid ""
"A dictionary representing the string environment at the time the interpreter"
" was started. Keys and values are bytes on Unix and str on Windows. For "
"example, ``environ[b'HOME']`` (``environ['HOME']`` on Windows) is the "
"pathname of your home directory, equivalent to ``getenv(\"HOME\")`` in C."
msgstr ""

#: ../../library/posix.rst:76
msgid ""
"Modifying this dictionary does not affect the string environment passed on "
"by :func:`~os.execv`, :func:`~os.popen` or :func:`~os.system`; if you need "
"to change the environment, pass ``environ`` to :func:`~os.execve` or add "
"variable assignments and export statements to the command string for "
":func:`~os.system` or :func:`~os.popen`."
msgstr ""

#: ../../library/posix.rst:82
msgid "On Unix, keys and values are bytes."
msgstr ""

#: ../../library/posix.rst:87
msgid ""
"The :mod:`os` module provides an alternate implementation of ``environ`` "
"which updates the environment on modification. Note also that updating "
":data:`os.environ` will render this dictionary obsolete. Use of the "
":mod:`os` module version of this is recommended over direct access to the "
":mod:`posix` module."
msgstr ""
