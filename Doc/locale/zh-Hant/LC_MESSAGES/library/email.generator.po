# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2015, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-09 21:33+0800\n"
"PO-Revision-Date: 2016-01-14 13:54+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hant\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.generator.rst:2
msgid ":mod:`email.generator`: Generating MIME documents"
msgstr ""

#: ../../library/email.generator.rst:8
msgid ""
"One of the most common tasks is to generate the flat text of the email "
"message represented by a message object structure.  You will need to do this"
" if you want to send your message via the :mod:`smtplib` module or the "
":mod:`nntplib` module, or print the message on the console.  Taking a "
"message object structure and producing a flat text document is the job of "
"the :class:`Generator` class."
msgstr ""

#: ../../library/email.generator.rst:14
msgid ""
"Again, as with the :mod:`email.parser` module, you aren't limited to the "
"functionality of the bundled generator; you could write one from scratch "
"yourself.  However the bundled generator knows how to generate most email in"
" a standards-compliant way, should handle MIME and non-MIME email messages "
"just fine, and is designed so that the transformation from flat text, to a "
"message structure via the :class:`~email.parser.Parser` class, and back to "
"flat text, is idempotent (the input is identical to the output) [#]_.  On "
"the other hand, using the Generator on a :class:`~email.message.Message` "
"constructed by program may result in changes to the "
":class:`~email.message.Message` object as defaults are filled in."
msgstr ""

#: ../../library/email.generator.rst:25
msgid ""
":class:`bytes` output can be generated using the :class:`BytesGenerator` "
"class. If the message object structure contains non-ASCII bytes, this "
"generator's :meth:`~BytesGenerator.flatten` method will emit the original "
"bytes.  Parsing a binary message and then flattening it with "
":class:`BytesGenerator` should be idempotent for standards compliant "
"messages."
msgstr ""

#: ../../library/email.generator.rst:31
msgid ""
"Here are the public methods of the :class:`Generator` class, imported from "
"the :mod:`email.generator` module:"
msgstr ""

#: ../../library/email.generator.rst:37
msgid ""
"The constructor for the :class:`Generator` class takes a :term:`file-like "
"object` called *outfp* for an argument.  *outfp* must support the "
":meth:`write` method and be usable as the output file for the :func:`print` "
"function."
msgstr ""

#: ../../library/email.generator.rst:41
msgid ""
"Optional *mangle_from_* is a flag that, when ``True``, puts a ``>`` "
"character in front of any line in the body that starts exactly as ``From``, "
"i.e. ``From`` followed by a space at the beginning of the line.  This is the"
" only guaranteed portable way to avoid having such lines be mistaken for a "
"Unix mailbox format envelope header separator (see `WHY THE CONTENT-LENGTH "
"FORMAT IS BAD <http://www.jwz.org/doc/content-length.html>`_ for details).  "
"*mangle_from_* defaults to ``True``, but you might want to set this to "
"``False`` if you are not writing Unix mailbox format files."
msgstr ""

#: ../../library/email.generator.rst:50
msgid ""
"Optional *maxheaderlen* specifies the longest length for a non-continued "
"header. When a header line is longer than *maxheaderlen* (in characters, "
"with tabs expanded to 8 spaces), the header will be split as defined in the "
":class:`~email.header.Header` class.  Set to zero to disable header "
"wrapping. The default is 78, as recommended (but not required) by "
":rfc:`2822`."
msgstr ""

#: ../../library/email.generator.rst:56 ../../library/email.generator.rst:138
msgid ""
"The *policy* keyword specifies a :mod:`~email.policy` object that controls a"
" number of aspects of the generator's operation.  If no *policy* is "
"specified, then the *policy* attached to the message object passed to "
":attr:`flatten` is used."
msgstr ""

#: ../../library/email.generator.rst:61 ../../library/email.generator.rst:143
msgid "Added the *policy* keyword."
msgstr ""

#: ../../library/email.generator.rst:63
msgid "The other public :class:`Generator` methods are:"
msgstr ""

#: ../../library/email.generator.rst:68
msgid ""
"Print the textual representation of the message object structure rooted at "
"*msg* to the output file specified when the :class:`Generator` instance was "
"created.  Subparts are visited depth-first and the resulting text will be "
"properly MIME encoded."
msgstr ""

#: ../../library/email.generator.rst:73 ../../library/email.generator.rst:169
msgid ""
"Optional *unixfrom* is a flag that forces the printing of the envelope "
"header delimiter before the first :rfc:`2822` header of the root message "
"object.  If the root object has no envelope header, a standard one is "
"crafted.  By default, this is set to ``False`` to inhibit the printing of "
"the envelope delimiter."
msgstr ""

#: ../../library/email.generator.rst:79 ../../library/email.generator.rst:175
msgid "Note that for subparts, no envelope header is ever printed."
msgstr ""

#: ../../library/email.generator.rst:81
msgid ""
"Optional *linesep* specifies the line separator character used to terminate "
"lines in the output.  If specified it overrides the value specified by the "
"*msg*\\'s or ``Generator``\\'s ``policy``."
msgstr ""

#: ../../library/email.generator.rst:85
msgid ""
"Because strings cannot represent non-ASCII bytes, if the policy that applies"
" when ``flatten`` is run has :attr:`~email.policy.Policy.cte_type` set to "
"``8bit``, ``Generator`` will operate as if it were set to ``7bit``.  This "
"means that messages parsed with a Bytes parser that have a :mailheader"
":`Content-Transfer-Encoding` of ``8bit`` will be converted to a use a "
"``7bit`` Content-Transfer-Encoding.  Non-ASCII bytes in the headers will be "
":rfc:`2047` encoded with a charset of ``unknown-8bit``."
msgstr ""

#: ../../library/email.generator.rst:93
msgid ""
"Added support for re-encoding ``8bit`` message bodies, and the *linesep* "
"argument."
msgstr ""

#: ../../library/email.generator.rst:99
msgid ""
"Return an independent clone of this :class:`Generator` instance with the "
"exact same options."
msgstr ""

#: ../../library/email.generator.rst:104
msgid ""
"Write the string *s* to the underlying file object, i.e. *outfp* passed to "
":class:`Generator`'s constructor.  This provides just enough file-like API "
"for :class:`Generator` instances to be used in the :func:`print` function."
msgstr ""

#: ../../library/email.generator.rst:108
msgid ""
"As a convenience, see the :class:`~email.message.Message` methods "
":meth:`~email.message.Message.as_string` and ``str(aMessage)``, a.k.a. "
":meth:`~email.message.Message.__str__`, which simplify the generation of a "
"formatted string representation of a message object.  For more detail, see "
":mod:`email.message`."
msgstr ""

#: ../../library/email.generator.rst:117
msgid ""
"The constructor for the :class:`BytesGenerator` class takes a binary :term"
":`file-like object` called *outfp* for an argument.  *outfp* must support a "
":meth:`write` method that accepts binary data."
msgstr ""

#: ../../library/email.generator.rst:121
msgid ""
"Optional *mangle_from_* is a flag that, when ``True``, puts a ``>`` "
"character in front of any line in the body that starts exactly as ``From``, "
"i.e. ``From`` followed by a space at the beginning of the line.  This is the"
" only guaranteed portable way to avoid having such lines be mistaken for a "
"Unix mailbox format envelope header separator (see `WHY THE CONTENT-LENGTH "
"FORMAT IS BAD <http://www.jwz.org/doc/content-length.html>`_ for details). "
"*mangle_from_* defaults to ``True``, but you might want to set this to "
"``False`` if you are not writing Unix mailbox format files."
msgstr ""

#: ../../library/email.generator.rst:130
msgid ""
"Optional *maxheaderlen* specifies the longest length for a non-continued "
"header.  When a header line is longer than *maxheaderlen* (in characters, "
"with tabs expanded to 8 spaces), the header will be split as defined in the "
":class:`~email.header.Header` class.  Set to zero to disable header "
"wrapping.  The default is 78, as recommended (but not required) by "
":rfc:`2822`."
msgstr ""

#: ../../library/email.generator.rst:145
msgid "The other public :class:`BytesGenerator` methods are:"
msgstr ""

#: ../../library/email.generator.rst:150
msgid ""
"Print the textual representation of the message object structure rooted at "
"*msg* to the output file specified when the :class:`BytesGenerator` instance"
" was created.  Subparts are visited depth-first and the resulting text will "
"be properly MIME encoded.  If the :mod:`~email.policy` option "
":attr:`~email.policy.Policy.cte_type` is ``8bit`` (the default), then any "
"bytes with the high bit set in the original parsed message that have not "
"been modified will be copied faithfully to the output.  If ``cte_type`` is "
"``7bit``, the bytes will be converted as needed using an ASCII-compatible "
"Content-Transfer-Encoding.  In particular, RFC-invalid non-ASCII bytes in "
"headers will be encoded using the MIME ``unknown-8bit`` character set, thus "
"rendering them RFC-compliant."
msgstr ""

#: ../../library/email.generator.rst:165
msgid ""
"Messages parsed with a Bytes parser that have a :mailheader:`Content-"
"Transfer-Encoding` of 8bit will be reconstructed as 8bit if they have not "
"been modified."
msgstr ""

#: ../../library/email.generator.rst:177
msgid ""
"Optional *linesep* specifies the line separator character used to terminate "
"lines in the output.  If specified it overrides the value specified by the "
"``Generator``\\ or *msg*\\ 's ``policy``."
msgstr ""

#: ../../library/email.generator.rst:183
msgid ""
"Return an independent clone of this :class:`BytesGenerator` instance with "
"the exact same options."
msgstr ""

#: ../../library/email.generator.rst:188
msgid ""
"Write the string *s* to the underlying file object.  *s* is encoded using "
"the ``ASCII`` codec and written to the *write* method of the  *outfp* "
"*outfp* passed to the :class:`BytesGenerator`'s constructor.  This provides "
"just enough file-like API for :class:`BytesGenerator` instances to be used "
"in the :func:`print` function."
msgstr ""

#: ../../library/email.generator.rst:196
msgid ""
"The :mod:`email.generator` module also provides a derived class, called "
":class:`DecodedGenerator` which is like the :class:`Generator` base class, "
"except that non-\\ :mimetype:`text` parts are substituted with a format "
"string representing the part."
msgstr ""

#: ../../library/email.generator.rst:204
msgid ""
"This class, derived from :class:`Generator` walks through all the subparts "
"of a message.  If the subpart is of main type :mimetype:`text`, then it "
"prints the decoded payload of the subpart. Optional *_mangle_from_* and "
"*maxheaderlen* are as with the :class:`Generator` base class."
msgstr ""

#: ../../library/email.generator.rst:209
msgid ""
"If the subpart is not of main type :mimetype:`text`, optional *fmt* is a "
"format string that is used instead of the message payload. *fmt* is expanded"
" with the following keywords, ``%(keyword)s`` format:"
msgstr ""

#: ../../library/email.generator.rst:213
msgid "``type`` -- Full MIME type of the non-\\ :mimetype:`text` part"
msgstr ""

#: ../../library/email.generator.rst:215
msgid "``maintype`` -- Main MIME type of the non-\\ :mimetype:`text` part"
msgstr ""

#: ../../library/email.generator.rst:217
msgid "``subtype`` -- Sub-MIME type of the non-\\ :mimetype:`text` part"
msgstr ""

#: ../../library/email.generator.rst:219
msgid "``filename`` -- Filename of the non-\\ :mimetype:`text` part"
msgstr ""

#: ../../library/email.generator.rst:221
msgid ""
"``description`` -- Description associated with the non-\\ :mimetype:`text` "
"part"
msgstr ""

#: ../../library/email.generator.rst:223
msgid ""
"``encoding`` -- Content transfer encoding of the non-\\ :mimetype:`text` "
"part"
msgstr ""

#: ../../library/email.generator.rst:225
msgid "The default value for *fmt* is ``None``, meaning ::"
msgstr ""

#: ../../library/email.generator.rst:231
msgid "Footnotes"
msgstr "註解"

#: ../../library/email.generator.rst:232
msgid ""
"This statement assumes that you use the appropriate setting for the "
"``unixfrom`` argument, and that you set maxheaderlen=0 (which will preserve "
"whatever the input line lengths were).  It is also not strictly true, since "
"in many cases runs of whitespace in headers are collapsed into single "
"blanks.  The latter is a bug that will eventually be fixed."
msgstr ""
