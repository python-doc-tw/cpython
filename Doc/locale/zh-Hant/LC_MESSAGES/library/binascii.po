# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-31 15:04+0800\n"
"PO-Revision-Date: 2015-12-09 17:51+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-"
"doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../library/binascii.rst:2
msgid ":mod:`binascii` --- Convert between binary and ASCII"
msgstr ""

#: ../../library/binascii.rst:14
msgid ""
"The :mod:`binascii` module contains a number of methods to convert "
"between binary and various ASCII-encoded binary representations. "
"Normally, you will not use these functions directly but use wrapper "
"modules like :mod:`uu`, :mod:`base64`, or :mod:`binhex` instead. The "
":mod:`binascii` module contains low-level functions written in C for "
"greater speed that are used by the higher-level modules."
msgstr ""

#: ../../library/binascii.rst:23
msgid ""
"``a2b_*`` functions accept Unicode strings containing only ASCII "
"characters. Other functions only accept :term:`bytes-like object`\\ s "
"(such as :class:`bytes`, :class:`bytearray` and other objects that "
"support the buffer protocol)."
msgstr ""

#: ../../library/binascii.rst:28
msgid "ASCII-only unicode strings are now accepted by the ``a2b_*`` functions."
msgstr ""

#: ../../library/binascii.rst:32
msgid "The :mod:`binascii` module defines the following functions:"
msgstr ""

#: ../../library/binascii.rst:37
msgid ""
"Convert a single line of uuencoded data back to binary and return the "
"binary data. Lines normally contain 45 (binary) bytes, except for the "
"last line. Line data may be followed by whitespace."
msgstr ""

#: ../../library/binascii.rst:44
msgid ""
"Convert binary data to a line of ASCII characters, the return value is "
"the converted line, including a newline char. The length of *data* should"
" be at most 45."
msgstr ""

#: ../../library/binascii.rst:51
msgid ""
"Convert a block of base64 data back to binary and return the binary data."
" More than one line may be passed at a time."
msgstr ""

#: ../../library/binascii.rst:57
msgid ""
"Convert binary data to a line of ASCII characters in base64 coding. The "
"return value is the converted line, including a newline char. The length "
"of *data* should be at most 57 to adhere to the base64 standard."
msgstr ""

#: ../../library/binascii.rst:64
msgid ""
"Convert a block of quoted-printable data back to binary and return the "
"binary data. More than one line may be passed at a time. If the optional "
"argument *header* is present and true, underscores will be decoded as "
"spaces."
msgstr ""

#: ../../library/binascii.rst:71
msgid ""
"Convert binary data to a line(s) of ASCII characters in quoted-printable "
"encoding.  The return value is the converted line(s). If the optional "
"argument *quotetabs* is present and true, all tabs and spaces will be "
"encoded.   If the optional argument *istext* is present and true, "
"newlines are not encoded but trailing whitespace will be encoded. If the "
"optional argument *header* is present and true, spaces will be encoded as"
" underscores per RFC1522. If the optional argument *header* is present "
"and false, newline characters will be encoded as well; otherwise linefeed"
" conversion might corrupt the binary data stream."
msgstr ""

#: ../../library/binascii.rst:84
msgid ""
"Convert binhex4 formatted ASCII data to binary, without doing RLE-"
"decompression. The string should contain a complete number of binary "
"bytes, or (in case of the last portion of the binhex4 data) have the "
"remaining bits zero."
msgstr ""

#: ../../library/binascii.rst:91
msgid ""
"Perform RLE-decompression on the data, as per the binhex4 standard. The "
"algorithm uses ``0x90`` after a byte as a repeat indicator, followed by a"
" count. A count of ``0`` specifies a byte value of ``0x90``. The routine "
"returns the decompressed data, unless data input data ends in an orphaned"
" repeat indicator, in which case the :exc:`Incomplete` exception is "
"raised."
msgstr ""

#: ../../library/binascii.rst:97
msgid "Accept only bytestring or bytearray objects as input."
msgstr ""

#: ../../library/binascii.rst:103
msgid "Perform binhex4 style RLE-compression on *data* and return the result."
msgstr ""

#: ../../library/binascii.rst:108
msgid ""
"Perform hexbin4 binary-to-ASCII translation and return the resulting "
"string. The argument should already be RLE-coded, and have a length "
"divisible by 3 (except possibly the last fragment)."
msgstr ""

#: ../../library/binascii.rst:115
msgid ""
"Compute the binhex4 crc value of *data*, starting with an initial *crc* "
"and returning the result."
msgstr ""

#: ../../library/binascii.rst:121
msgid ""
"Compute CRC-32, the 32-bit checksum of data, starting with an initial "
"crc.  This is consistent with the ZIP file checksum.  Since the algorithm"
" is designed for use as a checksum algorithm, it is not suitable for use "
"as a general hash algorithm.  Use as follows::"
msgstr ""

#: ../../library/binascii.rst:133
msgid ""
"To generate the same numeric value across all Python versions and "
"platforms use crc32(data) & 0xffffffff.  If you are only using the "
"checksum in packed binary format this is not necessary as the return "
"value is the correct 32bit binary representation regardless of sign."
msgstr ""

#: ../../library/binascii.rst:143
msgid ""
"Return the hexadecimal representation of the binary *data*.  Every byte "
"of *data* is converted into the corresponding 2-digit hex representation."
"  The returned bytes object is therefore twice as long as the length of "
"*data*."
msgstr ""

#: ../../library/binascii.rst:151
msgid ""
"Return the binary data represented by the hexadecimal string *hexstr*.  "
"This function is the inverse of :func:`b2a_hex`. *hexstr* must contain an"
" even number of hexadecimal digits (which can be upper or lower case), "
"otherwise a :exc:`TypeError` is raised."
msgstr ""

#: ../../library/binascii.rst:159
msgid "Exception raised on errors. These are usually programming errors."
msgstr ""

#: ../../library/binascii.rst:164
msgid ""
"Exception raised on incomplete data. These are usually not programming "
"errors, but may be handled by reading a little more data and trying "
"again."
msgstr ""

#: ../../library/binascii.rst:171
msgid "Module :mod:`base64`"
msgstr ""

#: ../../library/binascii.rst:171
msgid "Support for base64 encoding used in MIME email messages."
msgstr ""

#: ../../library/binascii.rst:174
msgid "Module :mod:`binhex`"
msgstr ""

#: ../../library/binascii.rst:174
msgid "Support for the binhex format used on the Macintosh."
msgstr ""

#: ../../library/binascii.rst:177
msgid "Module :mod:`uu`"
msgstr ""

#: ../../library/binascii.rst:177
msgid "Support for UU encoding used on Unix."
msgstr ""

#: ../../library/binascii.rst:179
msgid "Module :mod:`quopri`"
msgstr ""

#: ../../library/binascii.rst:180
msgid "Support for quoted-printable encoding used in MIME email messages."
msgstr ""

#~ msgid "Module base64"
#~ msgstr ""

#~ msgid "Module binhex"
#~ msgstr ""

#~ msgid "Module uu"
#~ msgstr ""

#~ msgid "Module quopri"
#~ msgstr ""

