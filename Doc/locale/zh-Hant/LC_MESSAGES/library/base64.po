# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-31 15:04+0800\n"
"PO-Revision-Date: 2015-12-09 17:51+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-"
"doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../library/base64.rst:2
msgid ":mod:`base64` --- Base16, Base32, Base64, Base85 Data Encodings"
msgstr ""

#: ../../library/base64.rst:13
msgid ""
"This module provides functions for encoding binary data to printable "
"ASCII characters and decoding such encodings back to binary data. It "
"provides encoding and decoding functions for the encodings specified in "
":rfc:`3548`, which defines the Base16, Base32, and Base64 algorithms, and"
" for the de-facto standard Ascii85 and Base85 encodings."
msgstr ""

#: ../../library/base64.rst:19
msgid ""
"The :rfc:`3548` encodings are suitable for encoding binary data so that "
"it can safely sent by email, used as parts of URLs, or included as part "
"of an HTTP POST request.  The encoding algorithm is not the same as the "
":program:`uuencode` program."
msgstr ""

#: ../../library/base64.rst:24
msgid ""
"There are two :rfc:`3548` interfaces provided by this module.  The modern"
" interface supports encoding and decoding ASCII byte string objects using"
" all three :rfc:`3548` defined alphabets (normal, URL-safe, and "
"filesystem-safe). Additionally, the decoding functions of the modern "
"interface also accept Unicode strings containing only ASCII characters. "
"The legacy interface provides for encoding and decoding to and from file-"
"like objects as well as byte strings, but only using the Base64 standard "
"alphabet."
msgstr ""

#: ../../library/base64.rst:32
msgid ""
"ASCII-only Unicode strings are now accepted by the decoding functions of "
"the modern interface."
msgstr ""

#: ../../library/base64.rst:36
msgid ""
"Any :term:`bytes-like object`\\ s are now accepted by all encoding and "
"decoding functions in this module.  Ascii85/Base85 support added."
msgstr ""

#: ../../library/base64.rst:40
msgid "The modern interface provides:"
msgstr ""

#: ../../library/base64.rst:44
msgid "Encode a byte string using Base64."
msgstr ""

#: ../../library/base64.rst:46
msgid ""
"*s* is the string to encode.  Optional *altchars* must be a string of at "
"least length 2 (additional characters are ignored) which specifies an "
"alternative alphabet for the ``+`` and ``/`` characters.  This allows an "
"application to e.g. generate URL or filesystem safe Base64 strings.  The "
"default is ``None``, for which the standard Base64 alphabet is used."
msgstr ""

#: ../../library/base64.rst:52
msgid "The encoded byte string is returned."
msgstr ""

#: ../../library/base64.rst:57
msgid "Decode a Base64 encoded byte string."
msgstr ""

#: ../../library/base64.rst:59
msgid ""
"*s* is the byte string to decode.  Optional *altchars* must be a string "
"of at least length 2 (additional characters are ignored) which specifies "
"the alternative alphabet used instead of the ``+`` and ``/`` characters."
msgstr ""

#: ../../library/base64.rst:63
msgid ""
"The decoded string is returned.  A :exc:`binascii.Error` exception is "
"raised if *s* is incorrectly padded."
msgstr ""

#: ../../library/base64.rst:66
msgid ""
"If *validate* is ``False`` (the default), non-base64-alphabet characters "
"are discarded prior to the padding check.  If *validate* is ``True``, "
"non-base64-alphabet characters in the input result in a "
":exc:`binascii.Error`."
msgstr ""

#: ../../library/base64.rst:74
msgid "Encode byte string *s* using the standard Base64 alphabet."
msgstr ""

#: ../../library/base64.rst:79
msgid "Decode byte string *s* using the standard Base64 alphabet."
msgstr ""

#: ../../library/base64.rst:84
msgid ""
"Encode byte string *s* using a URL-safe alphabet, which substitutes ``-``"
" instead of ``+`` and ``_`` instead of ``/`` in the standard Base64 "
"alphabet.  The result can still contain ``=``."
msgstr ""

#: ../../library/base64.rst:91
msgid ""
"Decode byte string *s* using a URL-safe alphabet, which substitutes ``-``"
" instead of ``+`` and ``_`` instead of ``/`` in the standard Base64 "
"alphabet."
msgstr ""

#: ../../library/base64.rst:97
msgid ""
"Encode a byte string using Base32.  *s* is the string to encode.  The "
"encoded string is returned."
msgstr ""

#: ../../library/base64.rst:103
msgid "Decode a Base32 encoded byte string."
msgstr ""

#: ../../library/base64.rst:105
msgid ""
"*s* is the byte string to decode.  Optional *casefold* is a flag "
"specifying whether a lowercase alphabet is acceptable as input.  For "
"security purposes, the default is ``False``."
msgstr ""

#: ../../library/base64.rst:109
msgid ""
":rfc:`3548` allows for optional mapping of the digit 0 (zero) to the "
"letter O (oh), and for optional mapping of the digit 1 (one) to either "
"the letter I (eye) or letter L (el).  The optional argument *map01* when "
"not ``None``, specifies which letter the digit 1 should be mapped to "
"(when *map01* is not ``None``, the digit 0 is always mapped to the letter"
" O).  For security purposes the default is ``None``, so that 0 and 1 are "
"not allowed in the input."
msgstr ""

#: ../../library/base64.rst:116
msgid ""
"The decoded byte string is returned.  A :exc:`binascii.Error` is raised "
"if *s* is incorrectly padded or if there are non-alphabet characters "
"present in the string."
msgstr ""

#: ../../library/base64.rst:123
msgid "Encode a byte string using Base16."
msgstr ""

#: ../../library/base64.rst:125
msgid "*s* is the string to encode.  The encoded byte string is returned."
msgstr ""

#: ../../library/base64.rst:130
msgid "Decode a Base16 encoded byte string."
msgstr ""

#: ../../library/base64.rst:132
msgid ""
"*s* is the string to decode.  Optional *casefold* is a flag specifying "
"whether a lowercase alphabet is acceptable as input.  For security "
"purposes, the default is ``False``."
msgstr ""

#: ../../library/base64.rst:136
msgid ""
"The decoded byte string is returned.  A :exc:`TypeError` is raised if *s*"
" were incorrectly padded or if there are non-alphabet characters present "
"in the string."
msgstr ""

#: ../../library/base64.rst:143
msgid "Encode a byte string using Ascii85."
msgstr ""

#: ../../library/base64.rst:145
msgid "*s* is the string to encode. The encoded byte string is returned."
msgstr ""

#: ../../library/base64.rst:147
msgid ""
"*foldspaces* is an optional flag that uses the special short sequence 'y'"
" instead of 4 consecutive spaces (ASCII 0x20) as supported by 'btoa'. "
"This feature is not supported by the \"standard\" Ascii85 encoding."
msgstr ""

#: ../../library/base64.rst:151
msgid ""
"*wrapcol* controls whether the output should have newline ('\\n') "
"characters added to it. If this is non-zero, each output line will be at "
"most this many characters long."
msgstr ""

#: ../../library/base64.rst:155
msgid ""
"*pad* controls whether the input string is padded to a multiple of 4 "
"before encoding. Note that the ``btoa`` implementation always pads."
msgstr ""

#: ../../library/base64.rst:158
msgid ""
"*adobe* controls whether the encoded byte sequence is framed with ``<~`` "
"and ``~>``, which is used by the Adobe implementation."
msgstr ""

#: ../../library/base64.rst:166
msgid "Decode an Ascii85 encoded byte string."
msgstr ""

#: ../../library/base64.rst:168
msgid "*s* is the byte string to decode."
msgstr ""

#: ../../library/base64.rst:170
msgid ""
"*foldspaces* is a flag that specifies whether the 'y' short sequence "
"should be accepted as shorthand for 4 consecutive spaces (ASCII 0x20). "
"This feature is not supported by the \"standard\" Ascii85 encoding."
msgstr ""

#: ../../library/base64.rst:174
msgid ""
"*adobe* controls whether the input sequence is in Adobe Ascii85 format "
"(i.e. is framed with <~ and ~>)."
msgstr ""

#: ../../library/base64.rst:177
msgid ""
"*ignorechars* should be a byte string containing characters to ignore "
"from the input. This should only contain whitespace characters, and by "
"default contains all whitespace characters in ASCII."
msgstr ""

#: ../../library/base64.rst:186
msgid "Encode a byte string using base85, as used in e.g. git-style binary diffs."
msgstr ""

#: ../../library/base64.rst:189
msgid ""
"If *pad* is true, the input is padded with \"\\\\0\" so its length is a "
"multiple of 4 characters before encoding."
msgstr ""

#: ../../library/base64.rst:197
msgid ""
"Decode base85-encoded byte string.  Padding is implicitly removed, if "
"necessary."
msgstr ""

#: ../../library/base64.rst:204
msgid ""
"Both Base85 and Ascii85 have an expansion factor of 5 to 4 (5 Base85 or "
"Ascii85 characters can encode 4 binary bytes), while the better-known "
"Base64 has an expansion factor of 6 to 4.  They are therefore more "
"efficient when space expensive.  They differ by details such as the "
"character map used for encoding."
msgstr ""

#: ../../library/base64.rst:211
msgid "The legacy interface:"
msgstr ""

#: ../../library/base64.rst:215
msgid ""
"Decode the contents of the binary *input* file and write the resulting "
"binary data to the *output* file. *input* and *output* must be "
":term:`file objects <file object>`. *input* will be read until "
"``input.read()`` returns an empty bytes object."
msgstr ""

#: ../../library/base64.rst:224
msgid ""
"Decode the byte string *s*, which must contain one or more lines of "
"base64 encoded data, and return a byte string containing the resulting "
"binary data. ``decodestring`` is a deprecated alias."
msgstr ""

#: ../../library/base64.rst:233
msgid ""
"Encode the contents of the binary *input* file and write the resulting "
"base64 encoded data to the *output* file. *input* and *output* must be "
":term:`file objects <file object>`. *input* will be read until "
"``input.read()`` returns an empty bytes object. :func:`encode` returns "
"the encoded data plus a trailing newline character (``b'\\n'``)."
msgstr ""

#: ../../library/base64.rst:243
msgid ""
"Encode the byte string *s*, which can contain arbitrary binary data, and "
"return a byte string containing one or more lines of base64-encoded data."
" :func:`encodebytes` returns a string containing one or more lines of "
"base64-encoded data always including an extra trailing newline "
"(``b'\\n'``). ``encodestring`` is a deprecated alias."
msgstr ""

#: ../../library/base64.rst:250
msgid "An example usage of the module:"
msgstr ""

#: ../../library/base64.rst:264
msgid "Module :mod:`binascii`"
msgstr ""

#: ../../library/base64.rst:264
msgid "Support module containing ASCII-to-binary and binary-to-ASCII conversions."
msgstr ""

#: ../../library/base64.rst:267
msgid ""
":rfc:`1521` - MIME (Multipurpose Internet Mail Extensions) Part One: "
"Mechanisms for Specifying and Describing the Format of Internet Message "
"Bodies"
msgstr ""

#: ../../library/base64.rst:267
msgid ""
"Section 5.2, \"Base64 Content-Transfer-Encoding,\" provides the "
"definition of the base64 encoding."
msgstr ""

#~ msgid ""
#~ "*wrapcol* controls whether the output "
#~ "should have newline (``'\\n'``) characters "
#~ "added to it. If this is non-"
#~ "zero, each output line will be at"
#~ " most this many characters long."
#~ msgstr ""

#~ msgid "Module binascii"
#~ msgstr ""

#~ msgid ""
#~ "RFC 1521 - MIME (Multipurpose Internet"
#~ " Mail Extensions) Part One: Mechanisms "
#~ "for Specifying and Describing the Format"
#~ " of Internet Message Bodies"
#~ msgstr ""

