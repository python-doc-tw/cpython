# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5 TW\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-31 15:04+0800\n"
"PO-Revision-Date: 2015-12-10 16:40+0000\n"
"Last-Translator: Liang Bo Wang <ccwang002@gmail.com>\n"
"Language-Team: Chinese Traditional (http://www.transifex.com/python-tw-"
"doc/python-35-tw/language/zh-Hant/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.2.0\n"

#: ../../library/selectors.rst:2
msgid ":mod:`selectors` -- High-level I/O multiplexing"
msgstr ""

#: ../../library/selectors.rst:11
msgid "Introduction"
msgstr "簡介"

#: ../../library/selectors.rst:13
msgid ""
"This module allows high-level and efficient I/O multiplexing, built upon "
"the :mod:`select` module primitives. Users are encouraged to use this "
"module instead, unless they want precise control over the OS-level "
"primitives used."
msgstr ""

#: ../../library/selectors.rst:17
msgid ""
"It defines a :class:`BaseSelector` abstract base class, along with "
"several concrete implementations (:class:`KqueueSelector`, "
":class:`EpollSelector`...), that can be used to wait for I/O readiness "
"notification on multiple file objects. In the following, \"file object\" "
"refers to any object with a :meth:`fileno()` method, or a raw file "
"descriptor. See :term:`file object`."
msgstr ""

#: ../../library/selectors.rst:23
msgid ""
":class:`DefaultSelector` is an alias to the most efficient implementation"
" available on the current platform: this should be the default choice for"
" most users."
msgstr ""

#: ../../library/selectors.rst:28
msgid ""
"The type of file objects supported depends on the platform: on Windows, "
"sockets are supported, but not pipes, whereas on Unix, both are supported"
" (some other types may be supported as well, such as fifos or special "
"file devices)."
msgstr ""

#: ../../library/selectors.rst:35
msgid ":mod:`select`"
msgstr ""

#: ../../library/selectors.rst:36
msgid "Low-level I/O multiplexing module."
msgstr ""

#: ../../library/selectors.rst:40
msgid "Classes"
msgstr ""

#: ../../library/selectors.rst:42
msgid "Classes hierarchy::"
msgstr ""

#: ../../library/selectors.rst:52
msgid ""
"In the following, *events* is a bitwise mask indicating which I/O events "
"should be waited for on a given file object. It can be a combination of "
"the modules constants below:"
msgstr ""

#: ../../library/selectors.rst:57
msgid "Constant"
msgstr ""

#: ../../library/selectors.rst:57
msgid "Meaning"
msgstr ""

#: ../../library/selectors.rst:59
msgid ":const:`EVENT_READ`"
msgstr ""

#: ../../library/selectors.rst:59
msgid "Available for read"
msgstr ""

#: ../../library/selectors.rst:61
msgid ":const:`EVENT_WRITE`"
msgstr ""

#: ../../library/selectors.rst:61
msgid "Available for write"
msgstr ""

#: ../../library/selectors.rst:67
msgid ""
"A :class:`SelectorKey` is a :class:`~collections.namedtuple` used to "
"associate a file object to its underlying file decriptor, selected event "
"mask and attached data. It is returned by several :class:`BaseSelector` "
"methods."
msgstr ""

#: ../../library/selectors.rst:74
msgid "File object registered."
msgstr ""

#: ../../library/selectors.rst:78
msgid "Underlying file descriptor."
msgstr ""

#: ../../library/selectors.rst:82
msgid "Events that must be waited for on this file object."
msgstr ""

#: ../../library/selectors.rst:86
msgid ""
"Optional opaque data associated to this file object: for example, this "
"could be used to store a per-client session ID."
msgstr ""

#: ../../library/selectors.rst:92
msgid ""
"A :class:`BaseSelector` is used to wait for I/O event readiness on "
"multiple file objects. It supports file stream registration, "
"unregistration, and a method to wait for I/O events on those streams, "
"with an optional timeout. It's an abstract base class, so cannot be "
"instantiated. Use :class:`DefaultSelector` instead, or one of "
":class:`SelectSelector`, :class:`KqueueSelector` etc. if you want to "
"specifically use an implementation, and your platform supports it. "
":class:`BaseSelector` and its concrete implementations support the "
":term:`context manager` protocol."
msgstr ""

#: ../../library/selectors.rst:104
msgid "Register a file object for selection, monitoring it for I/O events."
msgstr ""

#: ../../library/selectors.rst:106
msgid ""
"*fileobj* is the file object to monitor.  It may either be an integer "
"file descriptor or an object with a ``fileno()`` method. *events* is a "
"bitwise mask of events to monitor. *data* is an opaque object."
msgstr ""

#: ../../library/selectors.rst:111
msgid ""
"This returns a new :class:`SelectorKey` instance, or raises a "
":exc:`ValueError` in case of invalid event mask or file descriptor, or "
":exc:`KeyError` if the file object is already registered."
msgstr ""

#: ../../library/selectors.rst:117
msgid ""
"Unregister a file object from selection, removing it from monitoring. A "
"file object shall be unregistered prior to being closed."
msgstr ""

#: ../../library/selectors.rst:120
msgid "*fileobj* must be a file object previously registered."
msgstr ""

#: ../../library/selectors.rst:122
msgid ""
"This returns the associated :class:`SelectorKey` instance, or raises a "
":exc:`KeyError` if *fileobj* is not registered.  It will raise "
":exc:`ValueError` if *fileobj* is invalid (e.g. it has no ``fileno()`` "
"method or its ``fileno()`` method has an invalid return value)."
msgstr ""

#: ../../library/selectors.rst:129
msgid "Change a registered file object's monitored events or attached data."
msgstr ""

#: ../../library/selectors.rst:131
msgid ""
"This is equivalent to :meth:`BaseSelector.unregister(fileobj)` followed "
"by :meth:`BaseSelector.register(fileobj, events, data)`, except that it "
"can be implemented more efficiently."
msgstr ""

#: ../../library/selectors.rst:135
msgid ""
"This returns a new :class:`SelectorKey` instance, or raises a "
":exc:`ValueError` in case of invalid event mask or file descriptor, or "
":exc:`KeyError` if the file object is not registered."
msgstr ""

#: ../../library/selectors.rst:141
msgid ""
"Wait until some registered file objects become ready, or the timeout "
"expires."
msgstr ""

#: ../../library/selectors.rst:144
msgid ""
"If ``timeout > 0``, this specifies the maximum wait time, in seconds. If "
"``timeout <= 0``, the call won't block, and will report the currently "
"ready file objects. If *timeout* is ``None``, the call will block until a"
" monitored file object becomes ready."
msgstr ""

#: ../../library/selectors.rst:150
msgid ""
"This returns a list of ``(key, events)`` tuples, one for each ready file "
"object."
msgstr ""

#: ../../library/selectors.rst:153
msgid ""
"*key* is the :class:`SelectorKey` instance corresponding to a ready file "
"object. *events* is a bitmask of events ready on this file object."
msgstr ""

#: ../../library/selectors.rst:158
msgid ""
"This method can return before any file object becomes ready or the "
"timeout has elapsed if the current process receives a signal: in this "
"case, an empty list will be returned."
msgstr ""

#: ../../library/selectors.rst:162
msgid ""
"The selector is now retried with a recomputed timeout when interrupted by"
" a signal if the signal handler did not raise an exception (see "
":pep:`475` for the rationale), instead of returning an empty list of "
"events before the timeout."
msgstr ""

#: ../../library/selectors.rst:170
msgid "Close the selector."
msgstr ""

#: ../../library/selectors.rst:172
msgid ""
"This must be called to make sure that any underlying resource is freed. "
"The selector shall not be used once it has been closed."
msgstr ""

#: ../../library/selectors.rst:177
msgid "Return the key associated with a registered file object."
msgstr ""

#: ../../library/selectors.rst:179
msgid ""
"This returns the :class:`SelectorKey` instance associated to this file "
"object, or raises :exc:`KeyError` if the file object is not registered."
msgstr ""

#: ../../library/selectors.rst:184
msgid "Return a mapping of file objects to selector keys."
msgstr ""

#: ../../library/selectors.rst:186
msgid ""
"This returns a :class:`~collections.abc.Mapping` instance mapping "
"registered file objects to their associated :class:`SelectorKey` "
"instance."
msgstr ""

#: ../../library/selectors.rst:193
msgid ""
"The default selector class, using the most efficient implementation "
"available on the current platform. This should be the default choice for "
"most users."
msgstr ""

#: ../../library/selectors.rst:200
msgid ":func:`select.select`-based selector."
msgstr ""

#: ../../library/selectors.rst:205
msgid ":func:`select.poll`-based selector."
msgstr ""

#: ../../library/selectors.rst:210
msgid ":func:`select.epoll`-based selector."
msgstr ""

#: ../../library/selectors.rst:214
msgid ""
"This returns the file descriptor used by the underlying "
":func:`select.epoll` object."
msgstr ""

#: ../../library/selectors.rst:219
msgid ":func:`select.devpoll`-based selector."
msgstr ""

#: ../../library/selectors.rst:223
msgid ""
"This returns the file descriptor used by the underlying "
":func:`select.devpoll` object."
msgstr ""

#: ../../library/selectors.rst:230
msgid ":func:`select.kqueue`-based selector."
msgstr ""

#: ../../library/selectors.rst:234
msgid ""
"This returns the file descriptor used by the underlying "
":func:`select.kqueue` object."
msgstr ""

#: ../../library/selectors.rst:239
msgid "Examples"
msgstr ""

#: ../../library/selectors.rst:241
msgid "Here is a simple echo server implementation::"
msgstr ""

#~ msgid "select"
#~ msgstr ""

