# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-31 15:04+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/asyncio-eventloop.rst:6
msgid "Base Event Loop"
msgstr ""

#: ../../library/asyncio-eventloop.rst:8
msgid "The event loop is the central execution device provided by :mod:`asyncio`. It provides multiple facilities, including:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:11
msgid "Registering, executing and cancelling delayed calls (timeouts)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:13
msgid "Creating client and server :ref:`transports <asyncio-transport>` for various kinds of communication."
msgstr ""

#: ../../library/asyncio-eventloop.rst:16
msgid "Launching subprocesses and the associated :ref:`transports <asyncio-transport>` for communication with an external program."
msgstr ""

#: ../../library/asyncio-eventloop.rst:19
msgid "Delegating costly function calls to a pool of threads."
msgstr ""

#: ../../library/asyncio-eventloop.rst:23
msgid "Base class of event loops."
msgstr ""

#: ../../library/asyncio-eventloop.rst:25
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:28
msgid "Run an event loop"
msgstr ""

#: ../../library/asyncio-eventloop.rst:32
msgid "Run until :meth:`stop` is called.  If :meth:`stop` is called before :meth:`run_forever()` is called, this polls the I/O selector once with a timeout of zero, runs all callbacks scheduled in response to I/O events (and those that were already scheduled), and then exits. If :meth:`stop` is called while :meth:`run_forever` is running, this will run the current batch of callbacks and then exit.  Note that callbacks scheduled by callbacks will not run in that case; they will run the next time :meth:`run_forever` is called."
msgstr ""

#: ../../library/asyncio-eventloop.rst:45
msgid "Run until the :class:`Future` is done."
msgstr ""

#: ../../library/asyncio-eventloop.rst:47
msgid "If the argument is a :ref:`coroutine object <coroutine>`, it is wrapped by :func:`ensure_future`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:50
msgid "Return the Future's result, or raise its exception."
msgstr ""

#: ../../library/asyncio-eventloop.rst:54
msgid "Returns running status of event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:58
msgid "Stop running the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:60
msgid "This causes :meth:`run_forever` to exit at the next suitable opportunity (see there for more details)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:67
msgid "Returns ``True`` if the event loop was closed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:73
msgid "Close the event loop. The loop must not be running.  Pending callbacks will be lost."
msgstr ""

#: ../../library/asyncio-eventloop.rst:76
msgid "This clears the queues and shuts down the executor, but does not wait for the executor to finish."
msgstr ""

#: ../../library/asyncio-eventloop.rst:79
msgid "This is idempotent and irreversible. No other methods should be called after this one."
msgstr ""

#: ../../library/asyncio-eventloop.rst:85
msgid "Calls"
msgstr ""

#: ../../library/asyncio-eventloop.rst:87
msgid "Most :mod:`asyncio` functions don't accept keywords. If you want to pass keywords to your callback, use :func:`functools.partial`. For example, ``loop.call_soon(functools.partial(print, \"Hello\", flush=True))`` will call ``print(\"Hello\", flush=True)``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:93
msgid ":func:`functools.partial` is better than ``lambda`` functions, because :mod:`asyncio` can inspect :func:`functools.partial` object to display parameters in debug mode, whereas ``lambda`` functions have a poor representation."
msgstr ""

#: ../../library/asyncio-eventloop.rst:100
msgid "Arrange for a callback to be called as soon as possible.  The callback is called after :meth:`call_soon` returns, when control returns to the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:104
msgid "This operates as a FIFO queue, callbacks are called in the order in which they are registered.  Each callback will be called exactly once."
msgstr ""

#: ../../library/asyncio-eventloop.rst:107
msgid "Any positional arguments after the callback will be passed to the callback when it is called."
msgstr ""

#: ../../library/asyncio-eventloop.rst:110
#: ../../library/asyncio-eventloop.rst:144
#: ../../library/asyncio-eventloop.rst:166
msgid "An instance of :class:`asyncio.Handle` is returned, which can be used to cancel the callback."
msgstr ""

#: ../../library/asyncio-eventloop.rst:113
#: ../../library/asyncio-eventloop.rst:155
#: ../../library/asyncio-eventloop.rst:169
#: ../../library/asyncio-eventloop.rst:451
#: ../../library/asyncio-eventloop.rst:463
#: ../../library/asyncio-eventloop.rst:616
msgid ":ref:`Use functools.partial to pass keywords to the callback <asyncio-pass-keywords>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:118
msgid "Like :meth:`call_soon`, but thread safe."
msgstr ""

#: ../../library/asyncio-eventloop.rst:120
msgid "See the :ref:`concurrency and multithreading <asyncio-multithreading>` section of the documentation."
msgstr ""

#: ../../library/asyncio-eventloop.rst:127
msgid "Delayed calls"
msgstr ""

#: ../../library/asyncio-eventloop.rst:129
msgid "The event loop has its own internal clock for computing timeouts. Which clock is used depends on the (platform-specific) event loop implementation; ideally it is a monotonic clock.  This will generally be a different clock than :func:`time.time`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:136
msgid "Timeouts (relative *delay* or absolute *when*) should not exceed one day."
msgstr ""

#: ../../library/asyncio-eventloop.rst:141
msgid "Arrange for the *callback* to be called after the given *delay* seconds (either an int or float)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:147
msgid "*callback* will be called exactly once per call to :meth:`call_later`. If two callbacks are scheduled for exactly the same time, it is undefined which will be called first."
msgstr ""

#: ../../library/asyncio-eventloop.rst:151
msgid "The optional positional *args* will be passed to the callback when it is called. If you want the callback to be called with some named arguments, use a closure or :func:`functools.partial`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:160
msgid "Arrange for the *callback* to be called at the given absolute timestamp *when* (an int or float), using the same time reference as :meth:`BaseEventLoop.time`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:164
msgid "This method's behavior is the same as :meth:`call_later`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:174
msgid "Return the current time, as a :class:`float` value, according to the event loop's internal clock."
msgstr ""

#: ../../library/asyncio-eventloop.rst:179
msgid "The :func:`asyncio.sleep` function."
msgstr ""

#: ../../library/asyncio-eventloop.rst:183
msgid "Tasks"
msgstr ""

#: ../../library/asyncio-eventloop.rst:187
msgid "Schedule the execution of a :ref:`coroutine object <coroutine>`: wrap it in a future. Return a :class:`Task` object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:190
msgid "Third-party event loops can use their own subclass of :class:`Task` for interoperability. In this case, the result type is a subclass of :class:`Task`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:194
msgid "This method was added in Python 3.4.2. Use the :func:`async` function to support also older Python versions."
msgstr ""

#: ../../library/asyncio-eventloop.rst:201
msgid "Set a task factory that will be used by :meth:`BaseEventLoop.create_task`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:204
msgid "If *factory* is ``None`` the default task factory will be set."
msgstr ""

#: ../../library/asyncio-eventloop.rst:206
msgid "If *factory* is a *callable*, it should have a signature matching ``(loop, coro)``, where *loop* will be a reference to the active event loop, *coro* will be a coroutine object.  The callable must return an :class:`asyncio.Future` compatible object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:215
msgid "Return a task factory, or ``None`` if the default one is in use."
msgstr ""

#: ../../library/asyncio-eventloop.rst:221
msgid "Creating connections"
msgstr ""

#: ../../library/asyncio-eventloop.rst:225
msgid "Create a streaming transport connection to a given Internet *host* and *port*: socket family :py:data:`~socket.AF_INET` or :py:data:`~socket.AF_INET6` depending on *host* (or *family* if specified), socket type :py:data:`~socket.SOCK_STREAM`.  *protocol_factory* must be a callable returning a :ref:`protocol <asyncio-protocol>` instance."
msgstr ""

#: ../../library/asyncio-eventloop.rst:231
#: ../../library/asyncio-eventloop.rst:305
#: ../../library/asyncio-eventloop.rst:356
msgid "This method is a :ref:`coroutine <coroutine>` which will try to establish the connection in the background.  When successful, the coroutine returns a ``(transport, protocol)`` pair."
msgstr ""

#: ../../library/asyncio-eventloop.rst:235
msgid "The chronological synopsis of the underlying operation is as follows:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:237
msgid "The connection is established, and a :ref:`transport <asyncio-transport>` is created to represent it."
msgstr ""

#: ../../library/asyncio-eventloop.rst:240
msgid "*protocol_factory* is called without arguments and must return a :ref:`protocol <asyncio-protocol>` instance."
msgstr ""

#: ../../library/asyncio-eventloop.rst:243
msgid "The protocol instance is tied to the transport, and its :meth:`connection_made` method is called."
msgstr ""

#: ../../library/asyncio-eventloop.rst:246
msgid "The coroutine returns successfully with the ``(transport, protocol)`` pair."
msgstr ""

#: ../../library/asyncio-eventloop.rst:249
msgid "The created transport is an implementation-dependent bidirectional stream."
msgstr ""

#: ../../library/asyncio-eventloop.rst:252
msgid "*protocol_factory* can be any kind of callable, not necessarily a class.  For example, if you want to use a pre-created protocol instance, you can pass ``lambda: my_protocol``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:256
msgid "Options allowing to change how the connection is created:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:258
msgid "*ssl*: if given and not false, a SSL/TLS transport is created (by default a plain TCP transport is created).  If *ssl* is a :class:`ssl.SSLContext` object, this context is used to create the transport; if *ssl* is :const:`True`, a context with some unspecified default settings is used."
msgstr ""

#: ../../library/asyncio-eventloop.rst:264
msgid ":ref:`SSL/TLS security considerations <ssl-security>`"
msgstr ""

#: ../../library/asyncio-eventloop.rst:266
msgid "*server_hostname*, is only for use together with *ssl*, and sets or overrides the hostname that the target server's certificate will be matched against.  By default the value of the *host* argument is used.  If *host* is empty, there is no default and you must pass a value for *server_hostname*.  If *server_hostname* is an empty string, hostname matching is disabled (which is a serious security risk, allowing for man-in-the-middle-attacks)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:274
msgid "*family*, *proto*, *flags* are the optional address family, protocol and flags to be passed through to getaddrinfo() for *host* resolution. If given, these should all be integers from the corresponding :mod:`socket` module constants."
msgstr ""

#: ../../library/asyncio-eventloop.rst:279
msgid "*sock*, if given, should be an existing, already connected :class:`socket.socket` object to be used by the transport. If *sock* is given, none of *host*, *port*, *family*, *proto*, *flags* and *local_addr* should be specified."
msgstr ""

#: ../../library/asyncio-eventloop.rst:284
msgid "*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind the socket to locally.  The *local_host* and *local_port* are looked up using getaddrinfo(), similarly to *host* and *port*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:290
#: ../../library/asyncio-eventloop.rst:416
msgid "On Windows with :class:`ProactorEventLoop`, SSL/TLS is now supported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:294
msgid "The :func:`open_connection` function can be used to get a pair of (:class:`StreamReader`, :class:`StreamWriter`) instead of a protocol."
msgstr ""

#: ../../library/asyncio-eventloop.rst:300
msgid "Create datagram connection: socket family :py:data:`~socket.AF_INET` or :py:data:`~socket.AF_INET6` depending on *host* (or *family* if specified), socket type :py:data:`~socket.SOCK_DGRAM`. *protocol_factory* must be a callable returning a :ref:`protocol <asyncio-protocol>` instance."
msgstr ""

#: ../../library/asyncio-eventloop.rst:309
msgid "Options changing how the connection is created:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:311
msgid "*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind the socket to locally.  The *local_host* and *local_port* are looked up using :meth:`getaddrinfo`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:315
msgid "*remote_addr*, if given, is a ``(remote_host, remote_port)`` tuple used to connect the socket to a remote address.  The *remote_host* and *remote_port* are looked up using :meth:`getaddrinfo`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:319
msgid "*family*, *proto*, *flags* are the optional address family, protocol and flags to be passed through to :meth:`getaddrinfo` for *host* resolution. If given, these should all be integers from the corresponding :mod:`socket` module constants."
msgstr ""

#: ../../library/asyncio-eventloop.rst:324
#: ../../library/asyncio-eventloop.rst:402
msgid "*reuse_address* tells the kernel to reuse a local socket in TIME_WAIT state, without waiting for its natural timeout to expire. If not specified will automatically be set to True on UNIX."
msgstr ""

#: ../../library/asyncio-eventloop.rst:329
msgid "*reuse_port* tells the kernel to allow this endpoint to be bound to the same port as other existing endpoints are bound to, so long as they all set this flag when being created. This option is not supported on Windows and some UNIX's. If the :py:data:`~socket.SO_REUSEPORT` constant is not defined then this capability is unsupported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:335
msgid "*allow_broadcast* tells the kernel to allow this endpoint to send messages to the broadcast address."
msgstr ""

#: ../../library/asyncio-eventloop.rst:338
msgid "*sock* can optionally be specified in order to use a preexisting, already connected, :class:`socket.socket` object to be used by the transport. If specified, *local_addr* and *remote_addr* should be omitted (must be :const:`None`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:343
msgid "On Windows with :class:`ProactorEventLoop`, this method is not supported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:345
msgid "See :ref:`UDP echo client protocol <asyncio-udp-echo-client-protocol>` and :ref:`UDP echo server protocol <asyncio-udp-echo-server-protocol>` examples."
msgstr ""

#: ../../library/asyncio-eventloop.rst:351
msgid "Create UNIX connection: socket family :py:data:`~socket.AF_UNIX`, socket type :py:data:`~socket.SOCK_STREAM`. The :py:data:`~socket.AF_UNIX` socket family is used to communicate between processes on the same machine efficiently."
msgstr ""

#: ../../library/asyncio-eventloop.rst:360
msgid "See the :meth:`BaseEventLoop.create_connection` method for parameters."
msgstr ""

#: ../../library/asyncio-eventloop.rst:362
#: ../../library/asyncio-eventloop.rst:435
msgid "Availability: UNIX."
msgstr ""

#: ../../library/asyncio-eventloop.rst:366
msgid "Creating listening connections"
msgstr ""

#: ../../library/asyncio-eventloop.rst:370
msgid "Create a TCP server (socket type :data:`~socket.SOCK_STREAM`) bound to *host* and *port*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:373
msgid "Return a :class:`Server` object, its :attr:`~Server.sockets` attribute contains created sockets. Use the :meth:`Server.close` method to stop the server: close listening sockets."
msgstr ""

#: ../../library/asyncio-eventloop.rst:377
msgid "Parameters:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:379
msgid "The *host* parameter can be a string, in that case the TCP server is bound to *host* and *port*. The *host* parameter can also be a sequence of strings and in that case the TCP server is bound to all hosts of the sequence. If *host* is an empty string or ``None``, all interfaces are assumed and a list of multiple sockets will be returned (most likely one for IPv4 and another one for IPv6)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:386
msgid "*family* can be set to either :data:`socket.AF_INET` or :data:`~socket.AF_INET6` to force the socket to use IPv4 or IPv6. If not set it will be determined from host (defaults to :data:`socket.AF_UNSPEC`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:390
msgid "*flags* is a bitmask for :meth:`getaddrinfo`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:392
msgid "*sock* can optionally be specified in order to use a preexisting socket object. If specified, *host* and *port* should be omitted (must be :const:`None`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:396
msgid "*backlog* is the maximum number of queued connections passed to :meth:`~socket.socket.listen` (defaults to 100)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:399
msgid "*ssl* can be set to an :class:`~ssl.SSLContext` to enable SSL over the accepted connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:407
msgid "*reuse_port* tells the kernel to allow this endpoint to be bound to the same port as other existing endpoints are bound to, so long as they all set this flag when being created. This option is not supported on Windows."
msgstr ""

#: ../../library/asyncio-eventloop.rst:412
#: ../../library/asyncio-eventloop.rst:433
#: ../../library/asyncio-eventloop.rst:487
#: ../../library/asyncio-eventloop.rst:504
#: ../../library/asyncio-eventloop.rst:523
#: ../../library/asyncio-eventloop.rst:542
#: ../../library/asyncio-eventloop.rst:582
#: ../../library/asyncio-eventloop.rst:596
#: ../../library/asyncio-eventloop.rst:647
#: ../../library/asyncio-eventloop.rst:752
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:420
msgid "The function :func:`start_server` creates a (:class:`StreamReader`, :class:`StreamWriter`) pair and calls back a function with this pair."
msgstr ""

#: ../../library/asyncio-eventloop.rst:425
msgid "The *host* parameter can now be a sequence of strings."
msgstr ""

#: ../../library/asyncio-eventloop.rst:430
msgid "Similar to :meth:`BaseEventLoop.create_server`, but specific to the socket family :py:data:`~socket.AF_UNIX`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:439
msgid "Watch file descriptors"
msgstr ""

#: ../../library/asyncio-eventloop.rst:441
msgid "On Windows with :class:`SelectorEventLoop`, only socket handles are supported (ex: pipe file descriptors are not supported)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:444
msgid "On Windows with :class:`ProactorEventLoop`, these methods are not supported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:448
msgid "Start watching the file descriptor for read availability and then call the *callback* with specified arguments."
msgstr ""

#: ../../library/asyncio-eventloop.rst:456
msgid "Stop watching the file descriptor for read availability."
msgstr ""

#: ../../library/asyncio-eventloop.rst:460
msgid "Start watching the file descriptor for write availability and then call the *callback* with specified arguments."
msgstr ""

#: ../../library/asyncio-eventloop.rst:468
msgid "Stop watching the file descriptor for write availability."
msgstr ""

#: ../../library/asyncio-eventloop.rst:470
msgid "The :ref:`watch a file descriptor for read events <asyncio-watch-read-event>` example uses the low-level :meth:`BaseEventLoop.add_reader` method to register the file descriptor of a socket."
msgstr ""

#: ../../library/asyncio-eventloop.rst:476
msgid "Low-level socket operations"
msgstr ""

#: ../../library/asyncio-eventloop.rst:480
msgid "Receive data from the socket.  The return value is a bytes object representing the data received.  The maximum amount of data to be received at once is specified by *nbytes*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:484
#: ../../library/asyncio-eventloop.rst:501
#: ../../library/asyncio-eventloop.rst:520
msgid "With :class:`SelectorEventLoop` event loop, the socket *sock* must be non-blocking."
msgstr ""

#: ../../library/asyncio-eventloop.rst:491
msgid "The :meth:`socket.socket.recv` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:495
msgid "Send data to the socket.  The socket must be connected to a remote socket. This method continues to send data from *data* until either all data has been sent or an error occurs.  ``None`` is returned on success.  On error, an exception is raised, and there is no way to determine how much data, if any, was successfully processed by the receiving end of the connection."
msgstr ""

#: ../../library/asyncio-eventloop.rst:508
msgid "The :meth:`socket.socket.sendall` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:512
msgid "Connect to a remote socket at *address*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:514
msgid "The *address* must be already resolved to avoid the trap of hanging the entire event loop when the address requires doing a DNS lookup.  For example, it must be an IP address, not an hostname, for :py:data:`~socket.AF_INET` and :py:data:`~socket.AF_INET6` address families. Use :meth:`getaddrinfo` to resolve the hostname asynchronously."
msgstr ""

#: ../../library/asyncio-eventloop.rst:527
msgid "The :meth:`BaseEventLoop.create_connection` method, the :func:`open_connection` function and the :meth:`socket.socket.connect` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:534
msgid "Accept a connection. The socket must be bound to an address and listening for connections. The return value is a pair ``(conn, address)`` where *conn* is a *new* socket object usable to send and receive data on the connection, and *address* is the address bound to the socket on the other end of the connection."
msgstr ""

#: ../../library/asyncio-eventloop.rst:540
msgid "The socket *sock* must be non-blocking."
msgstr ""

#: ../../library/asyncio-eventloop.rst:546
msgid "The :meth:`BaseEventLoop.create_server` method, the :func:`start_server` function and the :meth:`socket.socket.accept` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:551
msgid "Resolve host name"
msgstr ""

#: ../../library/asyncio-eventloop.rst:555
msgid "This method is a :ref:`coroutine <coroutine>`, similar to :meth:`socket.getaddrinfo` function but non-blocking."
msgstr ""

#: ../../library/asyncio-eventloop.rst:560
msgid "This method is a :ref:`coroutine <coroutine>`, similar to :meth:`socket.getnameinfo` function but non-blocking."
msgstr ""

#: ../../library/asyncio-eventloop.rst:565
msgid "Connect pipes"
msgstr ""

#: ../../library/asyncio-eventloop.rst:567
msgid "On Windows with :class:`SelectorEventLoop`, these methods are not supported. Use :class:`ProactorEventLoop` to support pipes on Windows."
msgstr ""

#: ../../library/asyncio-eventloop.rst:572
msgid "Register read pipe in eventloop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:574
msgid "*protocol_factory* should instantiate object with :class:`Protocol` interface.  *pipe* is a :term:`file-like object <file object>`. Return pair ``(transport, protocol)``, where *transport* supports the :class:`ReadTransport` interface."
msgstr ""

#: ../../library/asyncio-eventloop.rst:579
#: ../../library/asyncio-eventloop.rst:593
msgid "With :class:`SelectorEventLoop` event loop, the *pipe* is set to non-blocking mode."
msgstr ""

#: ../../library/asyncio-eventloop.rst:586
msgid "Register write pipe in eventloop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:588
msgid "*protocol_factory* should instantiate object with :class:`BaseProtocol` interface. *pipe* is :term:`file-like object <file object>`. Return pair ``(transport, protocol)``, where *transport* supports :class:`WriteTransport` interface."
msgstr ""

#: ../../library/asyncio-eventloop.rst:600
msgid "The :meth:`BaseEventLoop.subprocess_exec` and :meth:`BaseEventLoop.subprocess_shell` methods."
msgstr ""

#: ../../library/asyncio-eventloop.rst:605
msgid "UNIX signals"
msgstr ""

#: ../../library/asyncio-eventloop.rst:607
msgid "Availability: UNIX only."
msgstr ""

#: ../../library/asyncio-eventloop.rst:611
msgid "Add a handler for a signal."
msgstr ""

#: ../../library/asyncio-eventloop.rst:613
msgid "Raise :exc:`ValueError` if the signal number is invalid or uncatchable. Raise :exc:`RuntimeError` if there is a problem setting up the handler."
msgstr ""

#: ../../library/asyncio-eventloop.rst:621
msgid "Remove a handler for a signal."
msgstr ""

#: ../../library/asyncio-eventloop.rst:623
msgid "Return ``True`` if a signal handler was removed, ``False`` if not."
msgstr ""

#: ../../library/asyncio-eventloop.rst:627
msgid "The :mod:`signal` module."
msgstr ""

#: ../../library/asyncio-eventloop.rst:631
msgid "Executor"
msgstr ""

#: ../../library/asyncio-eventloop.rst:633
msgid "Call a function in an :class:`~concurrent.futures.Executor` (pool of threads or pool of processes). By default, an event loop uses a thread pool executor (:class:`~concurrent.futures.ThreadPoolExecutor`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:639
msgid "Arrange for a *func* to be called in the specified executor."
msgstr ""

#: ../../library/asyncio-eventloop.rst:641
msgid "The *executor* argument should be an :class:`~concurrent.futures.Executor` instance. The default executor is used if *executor* is ``None``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:644
msgid ":ref:`Use functools.partial to pass keywords to the *func* <asyncio-pass-keywords>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:651
msgid "Set the default executor used by :meth:`run_in_executor`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:655
msgid "Error Handling API"
msgstr ""

#: ../../library/asyncio-eventloop.rst:657
msgid "Allows to customize how exceptions are handled in the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:661
msgid "Set *handler* as the new event loop exception handler."
msgstr ""

#: ../../library/asyncio-eventloop.rst:663
msgid "If *handler* is ``None``, the default exception handler will be set."
msgstr ""

#: ../../library/asyncio-eventloop.rst:666
msgid "If *handler* is a callable object, it should have a matching signature to ``(loop, context)``, where ``loop`` will be a reference to the active event loop, ``context`` will be a ``dict`` object (see :meth:`call_exception_handler` documentation for details about context)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:674
msgid "Default exception handler."
msgstr ""

#: ../../library/asyncio-eventloop.rst:676
msgid "This is called when an exception occurs and no exception handler is set, and can be called by a custom exception handler that wants to defer to the default behavior."
msgstr ""

#: ../../library/asyncio-eventloop.rst:680
msgid "*context* parameter has the same meaning as in :meth:`call_exception_handler`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:685
msgid "Call the current event loop exception handler."
msgstr ""

#: ../../library/asyncio-eventloop.rst:687
msgid "*context* is a ``dict`` object containing the following keys (new keys may be introduced later):"
msgstr ""

#: ../../library/asyncio-eventloop.rst:690
msgid "'message': Error message;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:691
msgid "'exception' (optional): Exception object;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:692
msgid "'future' (optional): :class:`asyncio.Future` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:693
msgid "'handle' (optional): :class:`asyncio.Handle` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:694
msgid "'protocol' (optional): :ref:`Protocol <asyncio-protocol>` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:695
msgid "'transport' (optional): :ref:`Transport <asyncio-transport>` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:696
msgid "'socket' (optional): :class:`socket.socket` instance."
msgstr ""

#: ../../library/asyncio-eventloop.rst:700
msgid "Note: this method should not be overloaded in subclassed event loops.  For any custom exception handling, use :meth:`set_exception_handler()` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:705
msgid "Debug mode"
msgstr ""

#: ../../library/asyncio-eventloop.rst:709
msgid "Get the debug mode (:class:`bool`) of the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:711
msgid "The default value is ``True`` if the environment variable :envvar:`PYTHONASYNCIODEBUG` is set to a non-empty string, ``False`` otherwise."
msgstr ""

#: ../../library/asyncio-eventloop.rst:719
msgid "Set the debug mode of the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:725
msgid "The :ref:`debug mode of asyncio <asyncio-debug-mode>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:728
msgid "Server"
msgstr ""

#: ../../library/asyncio-eventloop.rst:732
msgid "Server listening on sockets."
msgstr ""

#: ../../library/asyncio-eventloop.rst:734
msgid "Object created by the :meth:`BaseEventLoop.create_server` method and the :func:`start_server` function. Don't instantiate the class directly."
msgstr ""

#: ../../library/asyncio-eventloop.rst:739
msgid "Stop serving: close listening sockets and set the :attr:`sockets` attribute to ``None``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:742
msgid "The sockets that represent existing incoming client connections are leaved open."
msgstr ""

#: ../../library/asyncio-eventloop.rst:745
msgid "The server is closed asynchonously, use the :meth:`wait_closed` coroutine to wait until the server is closed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:750
msgid "Wait until the :meth:`close` method completes."
msgstr ""

#: ../../library/asyncio-eventloop.rst:756
msgid "List of :class:`socket.socket` objects the server is listening to, or ``None`` if the server is closed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:761
msgid "Handle"
msgstr ""

#: ../../library/asyncio-eventloop.rst:765
msgid "A callback wrapper object returned by :func:`BaseEventLoop.call_soon`, :func:`BaseEventLoop.call_soon_threadsafe`, :func:`BaseEventLoop.call_later`, and :func:`BaseEventLoop.call_at`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:771
msgid "Cancel the call.  If the callback is already canceled or executed, this method has no effect."
msgstr ""

#: ../../library/asyncio-eventloop.rst:776
msgid "Event loop examples"
msgstr ""

#: ../../library/asyncio-eventloop.rst:781
msgid "Hello World with call_soon()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:783
msgid "Example using the :meth:`BaseEventLoop.call_soon` method to schedule a callback. The callback displays ``\"Hello World\"`` and then stops the event loop::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:804
msgid "The :ref:`Hello World coroutine <asyncio-hello-world-coroutine>` example uses a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:811
msgid "Display the current date with call_later()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:813
msgid "Example of callback displaying the current date every second. The callback uses the :meth:`BaseEventLoop.call_later` method to reschedule itself during 5 seconds, and then stops the event loop::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:839
msgid "The :ref:`coroutine displaying the current date <asyncio-date-coroutine>` example uses a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:847
msgid "Watch a file descriptor for read events"
msgstr ""

#: ../../library/asyncio-eventloop.rst:849
msgid "Wait until a file descriptor received some data using the :meth:`BaseEventLoop.add_reader` method and then close the event loop::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:886
msgid "The :ref:`register an open socket to wait for data using a protocol <asyncio-register-socket>` example uses a low-level protocol created by the :meth:`BaseEventLoop.create_connection` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:890
msgid "The :ref:`register an open socket to wait for data using streams <asyncio-register-socket-streams>` example uses high-level streams created by the :func:`open_connection` function in a coroutine."
msgstr ""

#: ../../library/asyncio-eventloop.rst:896
msgid "Set signal handlers for SIGINT and SIGTERM"
msgstr ""

#: ../../library/asyncio-eventloop.rst:898
msgid "Register handlers for signals :py:data:`SIGINT` and :py:data:`SIGTERM` using the :meth:`BaseEventLoop.add_signal_handler` method::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:922
msgid "This example only works on UNIX."
msgstr ""

