# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-18 18:19-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/os.rst:2
msgid ":mod:`os` --- Miscellaneous operating system interfaces"
msgstr ""

#: ../../library/os.rst:7
msgid "**Source code:** :source:`Lib/os.py`"
msgstr ""

#: ../../library/os.rst:11
msgid "This module provides a portable way of using operating system dependent functionality.  If you just want to read or write a file see :func:`open`, if you want to manipulate paths, see the :mod:`os.path` module, and if you want to read all the lines in all the files on the command line see the :mod:`fileinput` module.  For creating temporary files and directories see the :mod:`tempfile` module, and for high-level file and directory handling see the :mod:`shutil` module."
msgstr ""

#: ../../library/os.rst:19
msgid "Notes on the availability of these functions:"
msgstr ""

#: ../../library/os.rst:21
msgid "The design of all built-in operating system dependent modules of Python is such that as long as the same functionality is available, it uses the same interface; for example, the function ``os.stat(path)`` returns stat information about *path* in the same format (which happens to have originated with the POSIX interface)."
msgstr ""

#: ../../library/os.rst:27
msgid "Extensions peculiar to a particular operating system are also available through the :mod:`os` module, but using them is of course a threat to portability."
msgstr ""

#: ../../library/os.rst:31
msgid "All functions accepting path or file names accept both bytes and string objects, and result in an object of the same type, if a path or file name is returned."
msgstr ""

#: ../../library/os.rst:35
msgid "An \"Availability: Unix\" note means that this function is commonly found on Unix systems.  It does not make any claims about its existence on a specific operating system."
msgstr ""

#: ../../library/os.rst:39
msgid "If not separately noted, all functions that claim \"Availability: Unix\" are supported on Mac OS X, which builds on a Unix core."
msgstr ""

#: ../../library/os.rst:47
msgid "All functions in this module raise :exc:`OSError` in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system."
msgstr ""

#: ../../library/os.rst:53
msgid "An alias for the built-in :exc:`OSError` exception."
msgstr ""

#: ../../library/os.rst:58
msgid "The name of the operating system dependent module imported.  The following names have currently been registered: ``'posix'``, ``'nt'``, ``'ce'``, ``'java'``."
msgstr ""

#: ../../library/os.rst:63
msgid ":attr:`sys.platform` has a finer granularity.  :func:`os.uname` gives system-dependent version information."
msgstr ""

#: ../../library/os.rst:66
msgid "The :mod:`platform` module provides detailed checks for the system's identity."
msgstr ""

#: ../../library/os.rst:74
msgid "File Names, Command Line Arguments, and Environment Variables"
msgstr ""

#: ../../library/os.rst:76
msgid "In Python, file names, command line arguments, and environment variables are represented using the string type. On some systems, decoding these strings to and from bytes is necessary before passing them to the operating system. Python uses the file system encoding to perform this conversion (see :func:`sys.getfilesystemencoding`)."
msgstr ""

#: ../../library/os.rst:82
msgid "On some systems, conversion using the file system encoding may fail. In this case, Python uses the :ref:`surrogateescape encoding error handler <surrogateescape>`, which means that undecodable bytes are replaced by a Unicode character U+DCxx on decoding, and these are again translated to the original byte on encoding."
msgstr ""

#: ../../library/os.rst:90
msgid "The file system encoding must guarantee to successfully decode all bytes below 128. If the file system encoding fails to provide this guarantee, API functions may raise UnicodeErrors."
msgstr ""

#: ../../library/os.rst:98
msgid "Process Parameters"
msgstr ""

#: ../../library/os.rst:100
msgid "These functions and data items provide information and operate on the current process and user."
msgstr ""

#: ../../library/os.rst:106
msgid "Return the filename corresponding to the controlling terminal of the process."
msgstr ""

#: ../../library/os.rst:108
#: ../../library/os.rst:230
#: ../../library/os.rst:239
#: ../../library/os.rst:248
#: ../../library/os.rst:257
#: ../../library/os.rst:266
#: ../../library/os.rst:301
#: ../../library/os.rst:309
#: ../../library/os.rst:345
#: ../../library/os.rst:356
#: ../../library/os.rst:366
#: ../../library/os.rst:376
#: ../../library/os.rst:387
#: ../../library/os.rst:396
#: ../../library/os.rst:426
#: ../../library/os.rst:433
#: ../../library/os.rst:440
#: ../../library/os.rst:449
#: ../../library/os.rst:461
#: ../../library/os.rst:470
#: ../../library/os.rst:496
#: ../../library/os.rst:503
#: ../../library/os.rst:512
#: ../../library/os.rst:521
#: ../../library/os.rst:528
#: ../../library/os.rst:535
#: ../../library/os.rst:544
#: ../../library/os.rst:712
#: ../../library/os.rst:722
#: ../../library/os.rst:730
#: ../../library/os.rst:753
#: ../../library/os.rst:774
#: ../../library/os.rst:807
#: ../../library/os.rst:825
#: ../../library/os.rst:837
#: ../../library/os.rst:1002
#: ../../library/os.rst:1017
#: ../../library/os.rst:1032
#: ../../library/os.rst:1042
#: ../../library/os.rst:1052
#: ../../library/os.rst:1103
#: ../../library/os.rst:1120
#: ../../library/os.rst:1132
#: ../../library/os.rst:1146
#: ../../library/os.rst:1156
#: ../../library/os.rst:1164
#: ../../library/os.rst:1173
#: ../../library/os.rst:1202
#: ../../library/os.rst:1433
#: ../../library/os.rst:1492
#: ../../library/os.rst:1503
#: ../../library/os.rst:1512
#: ../../library/os.rst:1531
#: ../../library/os.rst:1541
#: ../../library/os.rst:1550
#: ../../library/os.rst:1696
#: ../../library/os.rst:1754
#: ../../library/os.rst:1763
#: ../../library/os.rst:2323
#: ../../library/os.rst:2452
#: ../../library/os.rst:2660
#: ../../library/os.rst:2847
#: ../../library/os.rst:2855
#: ../../library/os.rst:2862
#: ../../library/os.rst:2869
#: ../../library/os.rst:2876
#: ../../library/os.rst:2883
#: ../../library/os.rst:2890
#: ../../library/os.rst:2897
#: ../../library/os.rst:2905
#: ../../library/os.rst:2913
#: ../../library/os.rst:2920
#: ../../library/os.rst:2927
#: ../../library/os.rst:2936
#: ../../library/os.rst:2944
#: ../../library/os.rst:2952
#: ../../library/os.rst:2959
#: ../../library/os.rst:2966
#: ../../library/os.rst:2981
#: ../../library/os.rst:3026
#: ../../library/os.rst:3033
#: ../../library/os.rst:3041
#: ../../library/os.rst:3258
#: ../../library/os.rst:3273
#: ../../library/os.rst:3284
#: ../../library/os.rst:3295
#: ../../library/os.rst:3308
#: ../../library/os.rst:3355
#: ../../library/os.rst:3366
#: ../../library/os.rst:3374
#: ../../library/os.rst:3390
#: ../../library/os.rst:3402
#: ../../library/os.rst:3410
#: ../../library/os.rst:3418
#: ../../library/os.rst:3426
#: ../../library/os.rst:3434
#: ../../library/os.rst:3442
#: ../../library/os.rst:3449
#: ../../library/os.rst:3456
#: ../../library/os.rst:3602
#: ../../library/os.rst:3611
#: ../../library/os.rst:3627
#: ../../library/os.rst:3637
#: ../../library/os.rst:3646
msgid "Availability: Unix."
msgstr ""

#: ../../library/os.rst:113
msgid "A :term:`mapping` object representing the string environment. For example, ``environ['HOME']`` is the pathname of your home directory (on some platforms), and is equivalent to ``getenv(\"HOME\")`` in C."
msgstr ""

#: ../../library/os.rst:117
msgid "This mapping is captured the first time the :mod:`os` module is imported, typically during Python startup as part of processing :file:`site.py`.  Changes to the environment made after this time are not reflected in ``os.environ``, except for changes made by modifying ``os.environ`` directly."
msgstr ""

#: ../../library/os.rst:122
msgid "If the platform supports the :func:`putenv` function, this mapping may be used to modify the environment as well as query the environment.  :func:`putenv` will be called automatically when the mapping is modified."
msgstr ""

#: ../../library/os.rst:126
msgid "On Unix, keys and values use :func:`sys.getfilesystemencoding` and ``'surrogateescape'`` error handler. Use :data:`environb` if you would like to use a different encoding."
msgstr ""

#: ../../library/os.rst:132
msgid "Calling :func:`putenv` directly does not change ``os.environ``, so it's better to modify ``os.environ``."
msgstr ""

#: ../../library/os.rst:137
msgid "On some platforms, including FreeBSD and Mac OS X, setting ``environ`` may cause memory leaks.  Refer to the system documentation for :c:func:`putenv`."
msgstr ""

#: ../../library/os.rst:141
msgid "If :func:`putenv` is not provided, a modified copy of this mapping  may be passed to the appropriate process-creation functions to cause  child processes to use a modified environment."
msgstr ""

#: ../../library/os.rst:145
msgid "If the platform supports the :func:`unsetenv` function, you can delete items in this mapping to unset environment variables. :func:`unsetenv` will be called automatically when an item is deleted from ``os.environ``, and when one of the :meth:`pop` or :meth:`clear` methods is called."
msgstr ""

#: ../../library/os.rst:153
msgid "Bytes version of :data:`environ`: a :term:`mapping` object representing the environment as byte strings. :data:`environ` and :data:`environb` are synchronized (modify :data:`environb` updates :data:`environ`, and vice versa)."
msgstr ""

#: ../../library/os.rst:158
msgid ":data:`environb` is only available if :data:`supports_bytes_environ` is True."
msgstr ""

#: ../../library/os.rst:169
msgid "These functions are described in :ref:`os-file-dir`."
msgstr ""

#: ../../library/os.rst:174
msgid "Encode *filename* to the filesystem encoding with ``'surrogateescape'`` error handler, or ``'strict'`` on Windows; return :class:`bytes` unchanged."
msgstr ""

#: ../../library/os.rst:177
msgid ":func:`fsdecode` is the reverse function."
msgstr ""

#: ../../library/os.rst:184
msgid "Decode *filename* from the filesystem encoding with ``'surrogateescape'`` error handler, or ``'strict'`` on Windows; return :class:`str` unchanged."
msgstr ""

#: ../../library/os.rst:187
msgid ":func:`fsencode` is the reverse function."
msgstr ""

#: ../../library/os.rst:194
msgid "Return the value of the environment variable *key* if it exists, or *default* if it doesn't. *key*, *default* and the result are str."
msgstr ""

#: ../../library/os.rst:197
msgid "On Unix, keys and values are decoded with :func:`sys.getfilesystemencoding` and ``'surrogateescape'`` error handler. Use :func:`os.getenvb` if you would like to use a different encoding."
msgstr ""

#: ../../library/os.rst:201
#: ../../library/os.rst:409
#: ../../library/os.rst:613
msgid "Availability: most flavors of Unix, Windows."
msgstr ""

#: ../../library/os.rst:206
msgid "Return the value of the environment variable *key* if it exists, or *default* if it doesn't. *key*, *default* and the result are bytes."
msgstr ""

#: ../../library/os.rst:209
msgid "Availability: most flavors of Unix."
msgstr ""

#: ../../library/os.rst:216
msgid "Returns the list of directories that will be searched for a named executable, similar to a shell, when launching a process. *env*, when specified, should be an environment variable dictionary to lookup the PATH in. By default, when *env* is None, :data:`environ` is used."
msgstr ""

#: ../../library/os.rst:227
msgid "Return the effective group id of the current process.  This corresponds to the \"set id\" bit on the file being executed in the current process."
msgstr ""

#: ../../library/os.rst:237
msgid "Return the current process's effective user id."
msgstr ""

#: ../../library/os.rst:246
msgid "Return the real group id of the current process."
msgstr ""

#: ../../library/os.rst:253
msgid "Return list of group ids that *user* belongs to. If *group* is not in the list, it is included; typically, *group* is specified as the group ID field from the password record for *user*."
msgstr ""

#: ../../library/os.rst:264
msgid "Return list of supplemental group ids associated with the current process."
msgstr ""

#: ../../library/os.rst:270
msgid "On Mac OS X, :func:`getgroups` behavior differs somewhat from other Unix platforms. If the Python interpreter was built with a deployment target of :const:`10.5` or earlier, :func:`getgroups` returns the list of effective group ids associated with the current user process; this list is limited to a system-defined number of entries, typically 16, and may be modified by calls to :func:`setgroups` if suitably privileged. If built with a deployment target greater than :const:`10.5`, :func:`getgroups` returns the current group access list for the user associated with the effective user id of the process; the group access list may change over the lifetime of the process, it is not affected by calls to :func:`setgroups`, and its length is not limited to 16.  The deployment target value, :const:`MACOSX_DEPLOYMENT_TARGET`, can be obtained with :func:`sysconfig.get_config_var`."
msgstr ""

#: ../../library/os.rst:287
msgid "Return the name of the user logged in on the controlling terminal of the process.  For most purposes, it is more useful to use the environment variables :envvar:`LOGNAME` or :envvar:`USERNAME` to find out who the user is, or ``pwd.getpwuid(os.getuid())[0]`` to get the login name of the current real user id."
msgstr ""

#: ../../library/os.rst:293
#: ../../library/os.rst:327
#: ../../library/os.rst:786
#: ../../library/os.rst:795
#: ../../library/os.rst:978
#: ../../library/os.rst:1229
#: ../../library/os.rst:1561
#: ../../library/os.rst:2438
#: ../../library/os.rst:2464
#: ../../library/os.rst:2816
#: ../../library/os.rst:3141
#: ../../library/os.rst:3152
#: ../../library/os.rst:3220
#: ../../library/os.rst:3243
msgid "Availability: Unix, Windows."
msgstr ""

#: ../../library/os.rst:298
msgid "Return the process group id of the process with process id *pid*. If *pid* is 0, the process group id of the current process is returned."
msgstr ""

#: ../../library/os.rst:307
msgid "Return the id of the current process group."
msgstr ""

#: ../../library/os.rst:316
msgid "Return the current process id."
msgstr ""

#: ../../library/os.rst:323
msgid "Return the parent's process id.  When the parent process has exited, on Unix the id returned is the one of the init process (1), on Windows it is still the same id, which may be already reused by another process."
msgstr ""

#: ../../library/os.rst:329
msgid "Added support for Windows."
msgstr ""

#: ../../library/os.rst:337
msgid "Get program scheduling priority.  The value *which* is one of :const:`PRIO_PROCESS`, :const:`PRIO_PGRP`, or :const:`PRIO_USER`, and *who* is interpreted relative to *which* (a process identifier for :const:`PRIO_PROCESS`, process group identifier for :const:`PRIO_PGRP`, and a user ID for :const:`PRIO_USER`).  A zero value for *who* denotes (respectively) the calling process, the process group of the calling process, or the real user ID of the calling process."
msgstr ""

#: ../../library/os.rst:354
msgid "Parameters for the :func:`getpriority` and :func:`setpriority` functions."
msgstr ""

#: ../../library/os.rst:363
msgid "Return a tuple (ruid, euid, suid) denoting the current process's real, effective, and saved user ids."
msgstr ""

#: ../../library/os.rst:373
msgid "Return a tuple (rgid, egid, sgid) denoting the current process's real, effective, and saved group ids."
msgstr ""

#: ../../library/os.rst:385
msgid "Return the current process's real user id."
msgstr ""

#: ../../library/os.rst:392
msgid "Call the system initgroups() to initialize the group access list with all of the groups of which the specified username is a member, plus the specified group id."
msgstr ""

#: ../../library/os.rst:405
msgid "Set the environment variable named *key* to the string *value*.  Such changes to the environment affect subprocesses started with :func:`os.system`, :func:`popen` or :func:`fork` and :func:`execv`."
msgstr ""

#: ../../library/os.rst:413
msgid "On some platforms, including FreeBSD and Mac OS X, setting ``environ`` may cause memory leaks. Refer to the system documentation for putenv."
msgstr ""

#: ../../library/os.rst:416
msgid "When :func:`putenv` is supported, assignments to items in ``os.environ`` are automatically translated into corresponding calls to :func:`putenv`; however, calls to :func:`putenv` don't update ``os.environ``, so it is actually preferable to assign to items of ``os.environ``."
msgstr ""

#: ../../library/os.rst:424
msgid "Set the current process's effective group id."
msgstr ""

#: ../../library/os.rst:431
msgid "Set the current process's effective user id."
msgstr ""

#: ../../library/os.rst:438
msgid "Set the current process' group id."
msgstr ""

#: ../../library/os.rst:445
msgid "Set the list of supplemental group ids associated with the current process to *groups*. *groups* must be a sequence, and each element must be an integer identifying a group. This operation is typically available only to the superuser."
msgstr ""

#: ../../library/os.rst:451
msgid "On Mac OS X, the length of *groups* may not exceed the system-defined maximum number of effective group ids, typically 16. See the documentation for :func:`getgroups` for cases where it may not return the same group list set by calling setgroups()."
msgstr ""

#: ../../library/os.rst:458
msgid "Call the system call :c:func:`setpgrp` or ``setpgrp(0, 0)`` depending on which version is implemented (if any).  See the Unix manual for the semantics."
msgstr ""

#: ../../library/os.rst:466
msgid "Call the system call :c:func:`setpgid` to set the process group id of the process with id *pid* to the process group with id *pgrp*.  See the Unix manual for the semantics."
msgstr ""

#: ../../library/os.rst:477
msgid "Set program scheduling priority. The value *which* is one of :const:`PRIO_PROCESS`, :const:`PRIO_PGRP`, or :const:`PRIO_USER`, and *who* is interpreted relative to *which* (a process identifier for :const:`PRIO_PROCESS`, process group identifier for :const:`PRIO_PGRP`, and a user ID for :const:`PRIO_USER`). A zero value for *who* denotes (respectively) the calling process, the process group of the calling process, or the real user ID of the calling process. *priority* is a value in the range -20 to 19. The default priority is 0; lower priorities cause more favorable scheduling."
msgstr ""

#: ../../library/os.rst:487
msgid "Availability: Unix"
msgstr ""

#: ../../library/os.rst:494
msgid "Set the current process's real and effective group ids."
msgstr ""

#: ../../library/os.rst:501
msgid "Set the current process's real, effective, and saved group ids."
msgstr ""

#: ../../library/os.rst:510
msgid "Set the current process's real, effective, and saved user ids."
msgstr ""

#: ../../library/os.rst:519
msgid "Set the current process's real and effective user ids."
msgstr ""

#: ../../library/os.rst:526
msgid "Call the system call :c:func:`getsid`.  See the Unix manual for the semantics."
msgstr ""

#: ../../library/os.rst:533
msgid "Call the system call :c:func:`setsid`.  See the Unix manual for the semantics."
msgstr ""

#: ../../library/os.rst:542
msgid "Set the current process's user id."
msgstr ""

#: ../../library/os.rst:550
msgid "Return the error message corresponding to the error code in *code*. On platforms where :c:func:`strerror` returns ``NULL`` when given an unknown error number, :exc:`ValueError` is raised."
msgstr ""

#: ../../library/os.rst:557
msgid "``True`` if the native OS type of the environment is bytes (eg. ``False`` on Windows)."
msgstr ""

#: ../../library/os.rst:565
msgid "Set the current numeric umask and return the previous umask."
msgstr ""

#: ../../library/os.rst:574
msgid "Returns information identifying the current operating system. The return value is an object with five attributes:"
msgstr ""

#: ../../library/os.rst:577
msgid ":attr:`sysname` - operating system name"
msgstr ""

#: ../../library/os.rst:578
msgid ":attr:`nodename` - name of machine on network (implementation-defined)"
msgstr ""

#: ../../library/os.rst:579
msgid ":attr:`release` - operating system release"
msgstr ""

#: ../../library/os.rst:580
msgid ":attr:`version` - operating system version"
msgstr ""

#: ../../library/os.rst:581
msgid ":attr:`machine` - hardware identifier"
msgstr ""

#: ../../library/os.rst:583
msgid "For backwards compatibility, this object is also iterable, behaving like a five-tuple containing :attr:`sysname`, :attr:`nodename`, :attr:`release`, :attr:`version`, and :attr:`machine` in that order."
msgstr ""

#: ../../library/os.rst:588
msgid "Some systems truncate :attr:`nodename` to 8 characters or to the leading component; a better way to get the hostname is :func:`socket.gethostname`  or even ``socket.gethostbyaddr(socket.gethostname())``."
msgstr ""

#: ../../library/os.rst:593
msgid "Availability: recent flavors of Unix."
msgstr ""

#: ../../library/os.rst:595
#: ../../library/os.rst:3245
msgid "Return type changed from a tuple to a tuple-like object with named attributes."
msgstr ""

#: ../../library/os.rst:604
msgid "Unset (delete) the environment variable named *key*. Such changes to the environment affect subprocesses started with :func:`os.system`, :func:`popen` or :func:`fork` and :func:`execv`."
msgstr ""

#: ../../library/os.rst:608
msgid "When :func:`unsetenv` is supported, deletion of items in ``os.environ`` is automatically translated into a corresponding call to :func:`unsetenv`; however, calls to :func:`unsetenv` don't update ``os.environ``, so it is actually preferable to delete items of ``os.environ``."
msgstr ""

#: ../../library/os.rst:619
msgid "File Object Creation"
msgstr ""

#: ../../library/os.rst:621
msgid "This function creates new :term:`file objects <file object>`.  (See also :func:`~os.open` for opening file descriptors.)"
msgstr ""

#: ../../library/os.rst:627
msgid "Return an open file object connected to the file descriptor *fd*.  This is an alias of the :func:`open` built-in function and accepts the same arguments. The only difference is that the first argument of :func:`fdopen` must always be an integer."
msgstr ""

#: ../../library/os.rst:636
msgid "File Descriptor Operations"
msgstr ""

#: ../../library/os.rst:638
msgid "These functions operate on I/O streams referenced using file descriptors."
msgstr ""

#: ../../library/os.rst:640
msgid "File descriptors are small integers corresponding to a file that has been opened by the current process.  For example, standard input is usually file descriptor 0, standard output is 1, and standard error is 2.  Further files opened by a process will then be assigned 3, 4, 5, and so forth.  The name \"file descriptor\" is slightly deceptive; on Unix platforms, sockets and pipes are also referenced by file descriptors."
msgstr ""

#: ../../library/os.rst:647
msgid "The :meth:`~io.IOBase.fileno` method can be used to obtain the file descriptor associated with a :term:`file object` when required.  Note that using the file descriptor directly will bypass the file object methods, ignoring aspects such as internal buffering of data."
msgstr ""

#: ../../library/os.rst:655
msgid "Close file descriptor *fd*."
msgstr ""

#: ../../library/os.rst:659
msgid "This function is intended for low-level I/O and must be applied to a file descriptor as returned by :func:`os.open` or :func:`pipe`.  To close a \"file object\" returned by the built-in function :func:`open` or by :func:`popen` or :func:`fdopen`, use its :meth:`~io.IOBase.close` method."
msgstr ""

#: ../../library/os.rst:667
msgid "Close all file descriptors from *fd_low* (inclusive) to *fd_high* (exclusive), ignoring errors. Equivalent to (but much faster than)::"
msgstr ""

#: ../../library/os.rst:679
msgid "Return a string describing the encoding of the device associated with *fd* if it is connected to a terminal; else return :const:`None`."
msgstr ""

#: ../../library/os.rst:685
msgid "Return a duplicate of file descriptor *fd*. The new file descriptor is :ref:`non-inheritable <fd_inheritance>`."
msgstr ""

#: ../../library/os.rst:688
msgid "On Windows, when duplicating a standard stream (0: stdin, 1: stdout, 2: stderr), the new file descriptor is :ref:`inheritable <fd_inheritance>`."
msgstr ""

#: ../../library/os.rst:692
#: ../../library/os.rst:878
msgid "The new file descriptor is now non-inheritable."
msgstr ""

#: ../../library/os.rst:698
msgid "Duplicate file descriptor *fd* to *fd2*, closing the latter first if necessary. The file descriptor *fd2* is :ref:`inheritable <fd_inheritance>` by default, or non-inheritable if *inheritable* is ``False``."
msgstr ""

#: ../../library/os.rst:702
msgid "Add the optional *inheritable* parameter."
msgstr ""

#: ../../library/os.rst:708
msgid "Change the mode of the file given by *fd* to the numeric *mode*.  See the docs for :func:`chmod` for possible values of *mode*.  As of Python 3.3, this is equivalent to ``os.chmod(fd, mode)``."
msgstr ""

#: ../../library/os.rst:717
msgid "Change the owner and group id of the file given by *fd* to the numeric *uid* and *gid*.  To leave one of the ids unchanged, set it to -1.  See :func:`chown`.  As of Python 3.3, this is equivalent to ``os.chown(fd, uid, gid)``."
msgstr ""

#: ../../library/os.rst:727
msgid "Force write of file with filedescriptor *fd* to disk. Does not force update of metadata."
msgstr ""

#: ../../library/os.rst:733
msgid "This function is not available on MacOS."
msgstr ""

#: ../../library/os.rst:738
msgid "Return system configuration information relevant to an open file. *name* specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define additional names as well.  The names known to the host operating system are given in the ``pathconf_names`` dictionary.  For configuration variables not included in that mapping, passing an integer for *name* is also accepted."
msgstr ""

#: ../../library/os.rst:746
#: ../../library/os.rst:1746
msgid "If *name* is a string and is not known, :exc:`ValueError` is raised.  If a specific value for *name* is not supported by the host system, even if it is included in ``pathconf_names``, an :exc:`OSError` is raised with :const:`errno.EINVAL` for the error number."
msgstr ""

#: ../../library/os.rst:751
msgid "As of Python 3.3, this is equivalent to ``os.pathconf(fd, name)``."
msgstr ""

#: ../../library/os.rst:758
msgid "Get the status of the file descriptor *fd*. Return a :class:`stat_result` object."
msgstr ""

#: ../../library/os.rst:761
msgid "As of Python 3.3, this is equivalent to ``os.stat(fd)``."
msgstr ""

#: ../../library/os.rst:765
#: ../../library/os.rst:1616
msgid "The :func:`.stat` function."
msgstr ""

#: ../../library/os.rst:770
msgid "Return information about the filesystem containing the file associated with file descriptor *fd*, like :func:`statvfs`.  As of Python 3.3, this is equivalent to ``os.statvfs(fd)``."
msgstr ""

#: ../../library/os.rst:779
msgid "Force write of file with filedescriptor *fd* to disk.  On Unix, this calls the native :c:func:`fsync` function; on Windows, the MS :c:func:`_commit` function."
msgstr ""

#: ../../library/os.rst:782
msgid "If you're starting with a buffered Python :term:`file object` *f*, first do ``f.flush()``, and then do ``os.fsync(f.fileno())``, to ensure that all internal buffers associated with *f* are written to disk."
msgstr ""

#: ../../library/os.rst:791
msgid "Truncate the file corresponding to file descriptor *fd*, so that it is at most *length* bytes in size.  As of Python 3.3, this is equivalent to ``os.truncate(fd, length)``."
msgstr ""

#: ../../library/os.rst:797
#: ../../library/os.rst:2468
msgid "Added support for Windows"
msgstr ""

#: ../../library/os.rst:802
msgid "Get the blocking mode of the file descriptor: ``False`` if the :data:`O_NONBLOCK` flag is set, ``True`` if the flag is cleared."
msgstr ""

#: ../../library/os.rst:805
msgid "See also :func:`set_blocking` and :meth:`socket.socket.setblocking`."
msgstr ""

#: ../../library/os.rst:813
msgid "Return ``True`` if the file descriptor *fd* is open and connected to a tty(-like) device, else ``False``."
msgstr ""

#: ../../library/os.rst:819
msgid "Apply, test or remove a POSIX lock on an open file descriptor. *fd* is an open file descriptor. *cmd* specifies the command to use - one of :data:`F_LOCK`, :data:`F_TLOCK`, :data:`F_ULOCK` or :data:`F_TEST`. *len* specifies the section of the file to lock."
msgstr ""

#: ../../library/os.rst:835
msgid "Flags that specify what action :func:`lockf` will take."
msgstr ""

#: ../../library/os.rst:844
msgid "Set the current position of file descriptor *fd* to position *pos*, modified by *how*: :const:`SEEK_SET` or ``0`` to set the position relative to the beginning of the file; :const:`SEEK_CUR` or ``1`` to set it relative to the current position; :const:`SEEK_END` or ``2`` to set it relative to the end of the file. Return the new cursor position in bytes, starting from the beginning."
msgstr ""

#: ../../library/os.rst:855
msgid "Parameters to the :func:`lseek` function. Their values are 0, 1, and 2, respectively."
msgstr ""

#: ../../library/os.rst:858
msgid "Some operating systems could support additional values, like :data:`os.SEEK_HOLE` or :data:`os.SEEK_DATA`."
msgstr ""

#: ../../library/os.rst:865
msgid "Open the file *path* and set various flags according to *flags* and possibly its mode according to *mode*.  When computing *mode*, the current umask value is first masked out.  Return the file descriptor for the newly opened file. The new file descriptor is :ref:`non-inheritable <fd_inheritance>`."
msgstr ""

#: ../../library/os.rst:870
msgid "For a description of the flag and mode values, see the C run-time documentation; flag constants (like :const:`O_RDONLY` and :const:`O_WRONLY`) are defined in the :mod:`os` module.  In particular, on Windows adding :const:`O_BINARY` is needed to open files in binary mode."
msgstr ""

#: ../../library/os.rst:875
msgid "This function can support :ref:`paths relative to directory descriptors <dir_fd>` with the *dir_fd* parameter."
msgstr ""

#: ../../library/os.rst:883
msgid "This function is intended for low-level I/O.  For normal usage, use the built-in function :func:`open`, which returns a :term:`file object` with :meth:`~file.read` and :meth:`~file.write` methods (and many more).  To wrap a file descriptor in a file object, use :func:`fdopen`."
msgstr ""

#: ../../library/os.rst:888
#: ../../library/os.rst:1645
#: ../../library/os.rst:1698
#: ../../library/os.rst:1715
#: ../../library/os.rst:1785
#: ../../library/os.rst:1803
msgid "The *dir_fd* argument."
msgstr ""

#: ../../library/os.rst:891
#: ../../library/os.rst:1071
#: ../../library/os.rst:1189
#: ../../library/os.rst:3340
msgid "If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an :exc:`InterruptedError` exception (see :pep:`475` for the rationale)."
msgstr ""

#: ../../library/os.rst:896
msgid "The following constants are options for the *flags* parameter to the :func:`~os.open` function.  They can be combined using the bitwise OR operator ``|``.  Some of them are not available on all platforms.  For descriptions of their availability and use, consult the :manpage:`open(2)` manual page on Unix or `the MSDN <https://msdn.microsoft.com/en-us/library/z0kc8e3z.aspx>`_ on Windows."
msgstr ""

#: ../../library/os.rst:911
msgid "These constants are available on Unix and Windows."
msgstr ""

#: ../../library/os.rst:924
msgid "These constants are only available on Unix."
msgstr ""

#: ../../library/os.rst:926
msgid "Add :data:`O_CLOEXEC` constant."
msgstr ""

#: ../../library/os.rst:937
msgid "These constants are only available on Windows."
msgstr ""

#: ../../library/os.rst:948
msgid "These constants are GNU extensions and not present if they are not defined by the C library."
msgstr ""

#: ../../library/os.rst:951
msgid "Add :data:`O_PATH` on systems that support it. Add :data:`O_TMPFILE`, only available on Linux Kernel 3.11   or newer."
msgstr ""

#: ../../library/os.rst:961
msgid "Open a new pseudo-terminal pair. Return a pair of file descriptors ``(master, slave)`` for the pty and the tty, respectively. The new file descriptors are :ref:`non-inheritable <fd_inheritance>`. For a (slightly) more portable approach, use the :mod:`pty` module."
msgstr ""

#: ../../library/os.rst:966
#: ../../library/os.rst:992
#: ../../library/os.rst:2992
msgid "Availability: some flavors of Unix."
msgstr ""

#: ../../library/os.rst:968
#: ../../library/os.rst:980
msgid "The new file descriptors are now non-inheritable."
msgstr ""

#: ../../library/os.rst:974
msgid "Create a pipe.  Return a pair of file descriptors ``(r, w)`` usable for reading and writing, respectively. The new file descriptor is :ref:`non-inheritable <fd_inheritance>`."
msgstr ""

#: ../../library/os.rst:986
msgid "Create a pipe with *flags* set atomically. *flags* can be constructed by ORing together one or more of these values: :data:`O_NONBLOCK`, :data:`O_CLOEXEC`. Return a pair of file descriptors ``(r, w)`` usable for reading and writing, respectively."
msgstr ""

#: ../../library/os.rst:999
msgid "Ensures that enough disk space is allocated for the file specified by *fd* starting from *offset* and continuing for *len* bytes."
msgstr ""

#: ../../library/os.rst:1009
msgid "Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations. The advice applies to the region of the file specified by *fd* starting at *offset* and continuing for *len* bytes. *advice* is one of :data:`POSIX_FADV_NORMAL`, :data:`POSIX_FADV_SEQUENTIAL`, :data:`POSIX_FADV_RANDOM`, :data:`POSIX_FADV_NOREUSE`, :data:`POSIX_FADV_WILLNEED` or :data:`POSIX_FADV_DONTNEED`."
msgstr ""

#: ../../library/os.rst:1029
msgid "Flags that can be used in *advice* in :func:`posix_fadvise` that specify the access pattern that is likely to be used."
msgstr ""

#: ../../library/os.rst:1039
msgid "Read from a file descriptor, *fd*, at a position of *offset*. It will read up to *buffersize* number of bytes. The file offset remains unchanged."
msgstr ""

#: ../../library/os.rst:1049
msgid "Write *bytestring* to a file descriptor, *fd*, from *offset*, leaving the file offset unchanged."
msgstr ""

#: ../../library/os.rst:1059
msgid "Read at most *n* bytes from file descriptor *fd*. Return a bytestring containing the bytes read.  If the end of the file referred to by *fd* has been reached, an empty bytes object is returned."
msgstr ""

#: ../../library/os.rst:1065
msgid "This function is intended for low-level I/O and must be applied to a file descriptor as returned by :func:`os.open` or :func:`pipe`.  To read a \"file object\" returned by the built-in function :func:`open` or by :func:`popen` or :func:`fdopen`, or :data:`sys.stdin`, use its :meth:`~file.read` or :meth:`~file.readline` methods."
msgstr ""

#: ../../library/os.rst:1080
msgid "Copy *count* bytes from file descriptor *in* to file descriptor *out* starting at *offset*. Return the number of bytes sent. When EOF is reached return 0."
msgstr ""

#: ../../library/os.rst:1084
msgid "The first function notation is supported by all platforms that define :func:`sendfile`."
msgstr ""

#: ../../library/os.rst:1087
msgid "On Linux, if *offset* is given as ``None``, the bytes are read from the current position of *in* and the position of *in* is updated."
msgstr ""

#: ../../library/os.rst:1090
msgid "The second case may be used on Mac OS X and FreeBSD where *headers* and *trailers* are arbitrary sequences of buffers that are written before and after the data from *in* is written. It returns the same as the first case."
msgstr ""

#: ../../library/os.rst:1094
msgid "On Mac OS X and FreeBSD, a value of 0 for *count* specifies to send until the end of *in* is reached."
msgstr ""

#: ../../library/os.rst:1097
msgid "All platforms support sockets as *out* file descriptor, and some platforms allow other types (e.g. regular file, pipe) as well."
msgstr ""

#: ../../library/os.rst:1100
msgid "Cross-platform applications should not use *headers*, *trailers* and *flags* arguments."
msgstr ""

#: ../../library/os.rst:1107
msgid "For a higher-level wrapper of :func:`sendfile`, see :meth:`socket.socket.sendfile`."
msgstr ""

#: ../../library/os.rst:1115
msgid "Set the blocking mode of the specified file descriptor. Set the :data:`O_NONBLOCK` flag if blocking is ``False``, clear the flag otherwise."
msgstr ""

#: ../../library/os.rst:1118
msgid "See also :func:`get_blocking` and :meth:`socket.socket.setblocking`."
msgstr ""

#: ../../library/os.rst:1129
msgid "Parameters to the :func:`sendfile` function, if the implementation supports them."
msgstr ""

#: ../../library/os.rst:1139
msgid "Read from a file descriptor *fd* into a number of mutable :term:`bytes-like objects <bytes-like object>` *buffers*. :func:`~os.readv` will transfer data into each buffer until it is full and then move on to the next buffer in the sequence to hold the rest of the data. :func:`~os.readv` returns the total number of bytes read (which may be less than the total capacity of all the objects)."
msgstr ""

#: ../../library/os.rst:1153
msgid "Return the process group associated with the terminal given by *fd* (an open file descriptor as returned by :func:`os.open`)."
msgstr ""

#: ../../library/os.rst:1161
msgid "Set the process group associated with the terminal given by *fd* (an open file descriptor as returned by :func:`os.open`) to *pg*."
msgstr ""

#: ../../library/os.rst:1169
msgid "Return a string which specifies the terminal device associated with file descriptor *fd*.  If *fd* is not associated with a terminal device, an exception is raised."
msgstr ""

#: ../../library/os.rst:1178
msgid "Write the bytestring in *str* to file descriptor *fd*. Return the number of bytes actually written."
msgstr ""

#: ../../library/os.rst:1183
msgid "This function is intended for low-level I/O and must be applied to a file descriptor as returned by :func:`os.open` or :func:`pipe`.  To write a \"file object\" returned by the built-in function :func:`open` or by :func:`popen` or :func:`fdopen`, or :data:`sys.stdout` or :data:`sys.stderr`, use its :meth:`~file.write` method."
msgstr ""

#: ../../library/os.rst:1197
msgid "Write the contents of *buffers* to file descriptor *fd*. *buffers* must be a sequence of :term:`bytes-like objects <bytes-like object>`. :func:`~os.writev` writes the contents of each object to the file descriptor and returns the total number of bytes written."
msgstr ""

#: ../../library/os.rst:1210
msgid "Querying the size of a terminal"
msgstr ""

#: ../../library/os.rst:1216
msgid "Return the size of the terminal window as ``(columns, lines)``, tuple of type :class:`terminal_size`."
msgstr ""

#: ../../library/os.rst:1219
msgid "The optional argument ``fd`` (default ``STDOUT_FILENO``, or standard output) specifies which file descriptor should be queried."
msgstr ""

#: ../../library/os.rst:1222
msgid "If the file descriptor is not connected to a terminal, an :exc:`OSError` is raised."
msgstr ""

#: ../../library/os.rst:1225
msgid ":func:`shutil.get_terminal_size` is the high-level function which should normally be used, ``os.get_terminal_size`` is the low-level implementation."
msgstr ""

#: ../../library/os.rst:1233
msgid "A subclass of tuple, holding ``(columns, lines)`` of the terminal window size."
msgstr ""

#: ../../library/os.rst:1237
msgid "Width of the terminal window in characters."
msgstr ""

#: ../../library/os.rst:1241
msgid "Height of the terminal window in characters."
msgstr ""

#: ../../library/os.rst:1247
msgid "Inheritance of File Descriptors"
msgstr ""

#: ../../library/os.rst:1251
msgid "A file descriptor has an \"inheritable\" flag which indicates if the file descriptor can be inherited by child processes.  Since Python 3.4, file descriptors created by Python are non-inheritable by default."
msgstr ""

#: ../../library/os.rst:1255
msgid "On UNIX, non-inheritable file descriptors are closed in child processes at the execution of a new program, other file descriptors are inherited."
msgstr ""

#: ../../library/os.rst:1258
msgid "On Windows, non-inheritable handles and file descriptors are closed in child processes, except for standard streams (file descriptors 0, 1 and 2: stdin, stdout and stderr), which are always inherited.  Using :func:`spawn\\* <spawnl>` functions, all inheritable handles and all inheritable file descriptors are inherited. Using the :mod:`subprocess` module, all file descriptors except standard streams are closed, and inheritable handles are only inherited if the *close_fds* parameter is ``False``."
msgstr ""

#: ../../library/os.rst:1268
msgid "Get the \"inheritable\" flag of the specified file descriptor (a boolean)."
msgstr ""

#: ../../library/os.rst:1272
msgid "Set the \"inheritable\" flag of the specified file descriptor."
msgstr ""

#: ../../library/os.rst:1276
msgid "Get the \"inheritable\" flag of the specified handle (a boolean)."
msgstr ""

#: ../../library/os.rst:1278
#: ../../library/os.rst:1284
#: ../../library/os.rst:3164
#: ../../library/os.rst:3193
msgid "Availability: Windows."
msgstr ""

#: ../../library/os.rst:1282
msgid "Set the \"inheritable\" flag of the specified handle."
msgstr ""

#: ../../library/os.rst:1290
msgid "Files and Directories"
msgstr ""

#: ../../library/os.rst:1292
msgid "On some Unix platforms, many of these functions support one or more of these features:"
msgstr ""

#: ../../library/os.rst:1297
msgid "**specifying a file descriptor:** For some functions, the *path* argument can be not only a string giving a path name, but also a file descriptor.  The function will then operate on the file referred to by the descriptor.  (For POSIX systems, Python will call the ``f...`` version of the function.)"
msgstr ""

#: ../../library/os.rst:1303
msgid "You can check whether or not *path* can be specified as a file descriptor on your platform using :data:`os.supports_fd`.  If it is unavailable, using it will raise a :exc:`NotImplementedError`."
msgstr ""

#: ../../library/os.rst:1307
msgid "If the function also supports *dir_fd* or *follow_symlinks* arguments, it is an error to specify one of those when supplying *path* as a file descriptor."
msgstr ""

#: ../../library/os.rst:1312
msgid "**paths relative to directory descriptors:** If *dir_fd* is not ``None``, it should be a file descriptor referring to a directory, and the path to operate on should be relative; path will then be relative to that directory.  If the path is absolute, *dir_fd* is ignored.  (For POSIX systems, Python will call the ``...at`` or ``f...at`` version of the function.)"
msgstr ""

#: ../../library/os.rst:1318
msgid "You can check whether or not *dir_fd* is supported on your platform using :data:`os.supports_dir_fd`.  If it is unavailable, using it will raise a :exc:`NotImplementedError`."
msgstr ""

#: ../../library/os.rst:1324
msgid "**not following symlinks:** If *follow_symlinks* is ``False``, and the last element of the path to operate on is a symbolic link, the function will operate on the symbolic link itself instead of the file the link points to.  (For POSIX systems, Python will call the ``l...`` version of the function.)"
msgstr ""

#: ../../library/os.rst:1330
msgid "You can check whether or not *follow_symlinks* is supported on your platform using :data:`os.supports_follow_symlinks`.  If it is unavailable, using it will raise a :exc:`NotImplementedError`."
msgstr ""

#: ../../library/os.rst:1338
msgid "Use the real uid/gid to test for access to *path*.  Note that most operations will use the effective uid/gid, therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to *path*.  *mode* should be :const:`F_OK` to test the existence of *path*, or it can be the inclusive OR of one or more of :const:`R_OK`, :const:`W_OK`, and :const:`X_OK` to test permissions.  Return :const:`True` if access is allowed, :const:`False` if not. See the Unix man page :manpage:`access(2)` for more information."
msgstr ""

#: ../../library/os.rst:1347
msgid "This function can support specifying :ref:`paths relative to directory descriptors <dir_fd>` and :ref:`not following symlinks <follow_symlinks>`."
msgstr ""

#: ../../library/os.rst:1350
msgid "If *effective_ids* is ``True``, :func:`access` will perform its access checks using the effective uid/gid instead of the real uid/gid. *effective_ids* may not be supported on your platform; you can check whether or not it is available using :data:`os.supports_effective_ids`.  If it is unavailable, using it will raise a :exc:`NotImplementedError`."
msgstr ""

#: ../../library/os.rst:1358
msgid "Using :func:`access` to check if a user is authorized to e.g. open a file before actually doing so using :func:`open` creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. It's preferable to use :term:`EAFP` techniques. For example::"
msgstr ""

#: ../../library/os.rst:1369
msgid "is better written as::"
msgstr ""

#: ../../library/os.rst:1381
msgid "I/O operations may fail even when :func:`access` indicates that they would succeed, particularly for operations on network filesystems which may have permissions semantics beyond the usual POSIX permission-bit model."
msgstr ""

#: ../../library/os.rst:1385
msgid "Added the *dir_fd*, *effective_ids*, and *follow_symlinks* parameters."
msgstr ""

#: ../../library/os.rst:1394
msgid "Values to pass as the *mode* parameter of :func:`access` to test the existence, readability, writability and executability of *path*, respectively."
msgstr ""

#: ../../library/os.rst:1403
msgid "Change the current working directory to *path*."
msgstr ""

#: ../../library/os.rst:1405
msgid "This function can support :ref:`specifying a file descriptor <path_fd>`.  The descriptor must refer to an opened directory, not an open file."
msgstr ""

#: ../../library/os.rst:1408
msgid "Added support for specifying *path* as a file descriptor on some platforms."
msgstr ""

#: ../../library/os.rst:1415
msgid "Set the flags of *path* to the numeric *flags*. *flags* may take a combination (bitwise OR) of the following values (as defined in the :mod:`stat` module):"
msgstr ""

#: ../../library/os.rst:1418
msgid ":data:`stat.UF_NODUMP`"
msgstr ""

#: ../../library/os.rst:1419
msgid ":data:`stat.UF_IMMUTABLE`"
msgstr ""

#: ../../library/os.rst:1420
msgid ":data:`stat.UF_APPEND`"
msgstr ""

#: ../../library/os.rst:1421
msgid ":data:`stat.UF_OPAQUE`"
msgstr ""

#: ../../library/os.rst:1422
msgid ":data:`stat.UF_NOUNLINK`"
msgstr ""

#: ../../library/os.rst:1423
msgid ":data:`stat.UF_COMPRESSED`"
msgstr ""

#: ../../library/os.rst:1424
msgid ":data:`stat.UF_HIDDEN`"
msgstr ""

#: ../../library/os.rst:1425
msgid ":data:`stat.SF_ARCHIVED`"
msgstr ""

#: ../../library/os.rst:1426
msgid ":data:`stat.SF_IMMUTABLE`"
msgstr ""

#: ../../library/os.rst:1427
msgid ":data:`stat.SF_APPEND`"
msgstr ""

#: ../../library/os.rst:1428
msgid ":data:`stat.SF_NOUNLINK`"
msgstr ""

#: ../../library/os.rst:1429
msgid ":data:`stat.SF_SNAPSHOT`"
msgstr ""

#: ../../library/os.rst:1431
msgid "This function can support :ref:`not following symlinks <follow_symlinks>`."
msgstr ""

#: ../../library/os.rst:1435
msgid "The *follow_symlinks* argument."
msgstr ""

#: ../../library/os.rst:1441
msgid "Change the mode of *path* to the numeric *mode*. *mode* may take one of the following values (as defined in the :mod:`stat` module) or bitwise ORed combinations of them:"
msgstr ""

#: ../../library/os.rst:1445
msgid ":data:`stat.S_ISUID`"
msgstr ""

#: ../../library/os.rst:1446
msgid ":data:`stat.S_ISGID`"
msgstr ""

#: ../../library/os.rst:1447
msgid ":data:`stat.S_ENFMT`"
msgstr ""

#: ../../library/os.rst:1448
msgid ":data:`stat.S_ISVTX`"
msgstr ""

#: ../../library/os.rst:1449
msgid ":data:`stat.S_IREAD`"
msgstr ""

#: ../../library/os.rst:1450
msgid ":data:`stat.S_IWRITE`"
msgstr ""

#: ../../library/os.rst:1451
msgid ":data:`stat.S_IEXEC`"
msgstr ""

#: ../../library/os.rst:1452
msgid ":data:`stat.S_IRWXU`"
msgstr ""

#: ../../library/os.rst:1453
msgid ":data:`stat.S_IRUSR`"
msgstr ""

#: ../../library/os.rst:1454
msgid ":data:`stat.S_IWUSR`"
msgstr ""

#: ../../library/os.rst:1455
msgid ":data:`stat.S_IXUSR`"
msgstr ""

#: ../../library/os.rst:1456
msgid ":data:`stat.S_IRWXG`"
msgstr ""

#: ../../library/os.rst:1457
msgid ":data:`stat.S_IRGRP`"
msgstr ""

#: ../../library/os.rst:1458
msgid ":data:`stat.S_IWGRP`"
msgstr ""

#: ../../library/os.rst:1459
msgid ":data:`stat.S_IXGRP`"
msgstr ""

#: ../../library/os.rst:1460
msgid ":data:`stat.S_IRWXO`"
msgstr ""

#: ../../library/os.rst:1461
msgid ":data:`stat.S_IROTH`"
msgstr ""

#: ../../library/os.rst:1462
msgid ":data:`stat.S_IWOTH`"
msgstr ""

#: ../../library/os.rst:1463
msgid ":data:`stat.S_IXOTH`"
msgstr ""

#: ../../library/os.rst:1465
#: ../../library/os.rst:1485
#: ../../library/os.rst:2510
msgid "This function can support :ref:`specifying a file descriptor <path_fd>`, :ref:`paths relative to directory descriptors <dir_fd>` and :ref:`not following symlinks <follow_symlinks>`."
msgstr ""

#: ../../library/os.rst:1471
msgid "Although Windows supports :func:`chmod`, you can only set the file's read-only flag with it (via the ``stat.S_IWRITE`` and ``stat.S_IREAD`` constants or a corresponding integer value).  All other bits are ignored."
msgstr ""

#: ../../library/os.rst:1475
msgid "Added support for specifying *path* as an open file descriptor, and the *dir_fd* and *follow_symlinks* arguments."
msgstr ""

#: ../../library/os.rst:1482
msgid "Change the owner and group id of *path* to the numeric *uid* and *gid*.  To leave one of the ids unchanged, set it to -1."
msgstr ""

#: ../../library/os.rst:1489
msgid "See :func:`shutil.chown` for a higher-level function that accepts names in addition to numeric ids."
msgstr ""

#: ../../library/os.rst:1494
msgid "Added support for specifying an open file descriptor for *path*, and the *dir_fd* and *follow_symlinks* arguments."
msgstr ""

#: ../../library/os.rst:1501
msgid "Change the root directory of the current process to *path*."
msgstr ""

#: ../../library/os.rst:1508
msgid "Change the current working directory to the directory represented by the file descriptor *fd*.  The descriptor must refer to an opened directory, not an open file.  As of Python 3.3, this is equivalent to ``os.chdir(fd)``."
msgstr ""

#: ../../library/os.rst:1517
msgid "Return a string representing the current working directory."
msgstr ""

#: ../../library/os.rst:1522
msgid "Return a bytestring representing the current working directory."
msgstr ""

#: ../../library/os.rst:1527
msgid "Set the flags of *path* to the numeric *flags*, like :func:`chflags`, but do not follow symbolic links.  As of Python 3.3, this is equivalent to ``os.chflags(path, flags, follow_symlinks=False)``."
msgstr ""

#: ../../library/os.rst:1536
msgid "Change the mode of *path* to the numeric *mode*. If path is a symlink, this affects the symlink rather than the target.  See the docs for :func:`chmod` for possible values of *mode*.  As of Python 3.3, this is equivalent to ``os.chmod(path, mode, follow_symlinks=False)``."
msgstr ""

#: ../../library/os.rst:1546
msgid "Change the owner and group id of *path* to the numeric *uid* and *gid*.  This function will not follow symbolic links.  As of Python 3.3, this is equivalent to ``os.chown(path, uid, gid, follow_symlinks=False)``."
msgstr ""

#: ../../library/os.rst:1555
msgid "Create a hard link pointing to *src* named *dst*."
msgstr ""

#: ../../library/os.rst:1557
msgid "This function can support specifying *src_dir_fd* and/or *dst_dir_fd* to supply :ref:`paths relative to directory descriptors <dir_fd>`, and :ref:`not following symlinks <follow_symlinks>`."
msgstr ""

#: ../../library/os.rst:1563
msgid "Added Windows support."
msgstr ""

#: ../../library/os.rst:1566
msgid "Added the *src_dir_fd*, *dst_dir_fd*, and *follow_symlinks* arguments."
msgstr ""

#: ../../library/os.rst:1572
msgid "Return a list containing the names of the entries in the directory given by *path*.  The list is in arbitrary order, and does not include the special entries ``'.'`` and ``'..'`` even if they are present in the directory."
msgstr ""

#: ../../library/os.rst:1576
msgid "*path* may be either of type ``str`` or of type ``bytes``.  If *path* is of type ``bytes``, the filenames returned will also be of type ``bytes``; in all other circumstances, they will be of type ``str``."
msgstr ""

#: ../../library/os.rst:1580
msgid "This function can also support :ref:`specifying a file descriptor <path_fd>`; the file descriptor must refer to a directory."
msgstr ""

#: ../../library/os.rst:1584
msgid "To encode ``str`` filenames to ``bytes``, use :func:`~os.fsencode`."
msgstr ""

#: ../../library/os.rst:1588
msgid "The :func:`scandir` function returns directory entries along with file attribute information, giving better performance for many common use cases."
msgstr ""

#: ../../library/os.rst:1592
msgid "The *path* parameter became optional."
msgstr ""

#: ../../library/os.rst:1595
#: ../../library/os.rst:2325
msgid "Added support for specifying an open file descriptor for *path*."
msgstr ""

#: ../../library/os.rst:1601
msgid "Perform the equivalent of an :c:func:`lstat` system call on the given path. Similar to :func:`~os.stat`, but does not follow symbolic links. Return a :class:`stat_result` object."
msgstr ""

#: ../../library/os.rst:1605
msgid "On platforms that do not support symbolic links, this is an alias for :func:`~os.stat`."
msgstr ""

#: ../../library/os.rst:1608
msgid "As of Python 3.3, this is equivalent to ``os.stat(path, dir_fd=dir_fd, follow_symlinks=False)``."
msgstr ""

#: ../../library/os.rst:1611
#: ../../library/os.rst:1639
#: ../../library/os.rst:1687
#: ../../library/os.rst:1712
#: ../../library/os.rst:1777
msgid "This function can also support :ref:`paths relative to directory descriptors <dir_fd>`."
msgstr ""

#: ../../library/os.rst:1618
#: ../../library/os.rst:1782
#: ../../library/os.rst:2440
msgid "Added support for Windows 6.0 (Vista) symbolic links."
msgstr ""

#: ../../library/os.rst:1621
msgid "Added the *dir_fd* parameter."
msgstr ""

#: ../../library/os.rst:1627
msgid "Create a directory named *path* with numeric mode *mode*."
msgstr ""

#: ../../library/os.rst:1629
msgid "If the directory already exists, :exc:`FileExistsError` is raised."
msgstr ""

#: ../../library/os.rst:1633
msgid "On some systems, *mode* is ignored.  Where it is used, the current umask value is first masked out.  If bits other than the last 9 (i.e. the last 3 digits of the octal representation of the *mode*) are set, their meaning is platform-dependent.  On some platforms, they are ignored and you should call :func:`chmod` explicitly to set them."
msgstr ""

#: ../../library/os.rst:1642
msgid "It is also possible to create temporary directories; see the :mod:`tempfile` module's :func:`tempfile.mkdtemp` function."
msgstr ""

#: ../../library/os.rst:1655
msgid "Recursive directory creation function.  Like :func:`mkdir`, but makes all intermediate-level directories needed to contain the leaf directory."
msgstr ""

#: ../../library/os.rst:1658
msgid "The *mode* parameter is passed to :func:`mkdir`; see :ref:`the mkdir() description <mkdir_modebits>` for how it is interpreted."
msgstr ""

#: ../../library/os.rst:1661
msgid "If *exist_ok* is ``False`` (the default), an :exc:`OSError` is raised if the target directory already exists."
msgstr ""

#: ../../library/os.rst:1666
msgid ":func:`makedirs` will become confused if the path elements to create include :data:`pardir` (eg. \"..\" on UNIX systems)."
msgstr ""

#: ../../library/os.rst:1669
msgid "This function handles UNC paths correctly."
msgstr ""

#: ../../library/os.rst:1671
msgid "The *exist_ok* parameter."
msgstr ""

#: ../../library/os.rst:1676
msgid "Before Python 3.4.1, if *exist_ok* was ``True`` and the directory existed, :func:`makedirs` would still raise an error if *mode* did not match the mode of the existing directory. Since this behavior was impossible to implement safely, it was removed in Python 3.4.1. See :issue:`21082`."
msgstr ""

#: ../../library/os.rst:1684
msgid "Create a FIFO (a named pipe) named *path* with numeric mode *mode*. The current umask value is first masked out from the mode."
msgstr ""

#: ../../library/os.rst:1690
msgid "FIFOs are pipes that can be accessed like regular files.  FIFOs exist until they are deleted (for example with :func:`os.unlink`). Generally, FIFOs are used as rendezvous between \"client\" and \"server\" type processes: the server opens the FIFO for reading, and the client opens it for writing.  Note that :func:`mkfifo` doesn't open the FIFO --- it just creates the rendezvous point."
msgstr ""

#: ../../library/os.rst:1704
msgid "Create a filesystem node (file, device special file or named pipe) named *path*. *mode* specifies both the permissions to use and the type of node to be created, being combined (bitwise OR) with one of ``stat.S_IFREG``, ``stat.S_IFCHR``, ``stat.S_IFBLK``, and ``stat.S_IFIFO`` (those constants are available in :mod:`stat`).  For ``stat.S_IFCHR`` and ``stat.S_IFBLK``, *device* defines the newly created device special file (probably using :func:`os.makedev`), otherwise it is ignored."
msgstr ""

#: ../../library/os.rst:1721
msgid "Extract the device major number from a raw device number (usually the :attr:`st_dev` or :attr:`st_rdev` field from :c:type:`stat`)."
msgstr ""

#: ../../library/os.rst:1727
msgid "Extract the device minor number from a raw device number (usually the :attr:`st_dev` or :attr:`st_rdev` field from :c:type:`stat`)."
msgstr ""

#: ../../library/os.rst:1733
msgid "Compose a raw device number from the major and minor device numbers."
msgstr ""

#: ../../library/os.rst:1738
msgid "Return system configuration information relevant to a named file. *name* specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define additional names as well.  The names known to the host operating system are given in the ``pathconf_names`` dictionary.  For configuration variables not included in that mapping, passing an integer for *name* is also accepted."
msgstr ""

#: ../../library/os.rst:1751
#: ../../library/os.rst:2312
#: ../../library/os.rst:2462
msgid "This function can support :ref:`specifying a file descriptor <path_fd>`."
msgstr ""

#: ../../library/os.rst:1759
msgid "Dictionary mapping names accepted by :func:`pathconf` and :func:`fpathconf` to the integer values defined for those names by the host operating system.  This can be used to determine the set of names known to the system."
msgstr ""

#: ../../library/os.rst:1768
msgid "Return a string representing the path to which the symbolic link points.  The result may be either an absolute or relative pathname; if it is relative, it may be converted to an absolute pathname using ``os.path.join(os.path.dirname(path), result)``."
msgstr ""

#: ../../library/os.rst:1773
msgid "If the *path* is a string object, the result will also be a string object, and the call may raise a UnicodeDecodeError. If the *path* is a bytes object, the result will be a bytes object."
msgstr ""

#: ../../library/os.rst:1780
msgid "Availability: Unix, Windows"
msgstr ""

#: ../../library/os.rst:1791
msgid "Remove (delete) the file *path*.  If *path* is a directory, :exc:`OSError` is raised.  Use :func:`rmdir` to remove directories."
msgstr ""

#: ../../library/os.rst:1794
#: ../../library/os.rst:1873
#: ../../library/os.rst:2423
msgid "This function can support :ref:`paths relative to directory descriptors <dir_fd>`."
msgstr ""

#: ../../library/os.rst:1797
msgid "On Windows, attempting to remove a file that is in use causes an exception to be raised; on Unix, the directory entry is removed but the storage allocated to the file is not made available until the original file is no longer in use."
msgstr ""

#: ../../library/os.rst:1801
msgid "This function is semantically identical to :func:`unlink`."
msgstr ""

#: ../../library/os.rst:1811
msgid "Remove directories recursively.  Works like :func:`rmdir` except that, if the leaf directory is successfully removed, :func:`removedirs`  tries to successively remove every parent directory mentioned in  *path* until an error is raised (which is ignored, because it generally means that a parent directory is not empty). For example, ``os.removedirs('foo/bar/baz')`` will first remove the directory ``'foo/bar/baz'``, and then remove ``'foo/bar'`` and ``'foo'`` if they are empty. Raises :exc:`OSError` if the leaf directory could not be successfully removed."
msgstr ""

#: ../../library/os.rst:1823
msgid "Rename the file or directory *src* to *dst*.  If *dst* is a directory, :exc:`OSError` will be raised.  On Unix, if *dst* exists and is a file, it will be replaced silently if the user has permission.  The operation may fail on some Unix flavors if *src* and *dst* are on different filesystems.  If successful, the renaming will be an atomic operation (this is a POSIX requirement).  On Windows, if *dst* already exists, :exc:`OSError` will be raised even if it is a file."
msgstr ""

#: ../../library/os.rst:1831
#: ../../library/os.rst:1861
msgid "This function can support specifying *src_dir_fd* and/or *dst_dir_fd* to supply :ref:`paths relative to directory descriptors <dir_fd>`."
msgstr ""

#: ../../library/os.rst:1834
msgid "If you want cross-platform overwriting of the destination, use :func:`replace`."
msgstr ""

#: ../../library/os.rst:1836
msgid "The *src_dir_fd* and *dst_dir_fd* arguments."
msgstr ""

#: ../../library/os.rst:1842
msgid "Recursive directory or file renaming function. Works like :func:`rename`, except creation of any intermediate directories needed to make the new pathname good is attempted first. After the rename, directories corresponding to rightmost path segments of the old name will be pruned away using :func:`removedirs`."
msgstr ""

#: ../../library/os.rst:1849
msgid "This function can fail with the new directory structure made if you lack permissions needed to remove the leaf directory or file."
msgstr ""

#: ../../library/os.rst:1855
msgid "Rename the file or directory *src* to *dst*.  If *dst* is a directory, :exc:`OSError` will be raised.  If *dst* exists and is a file, it will be replaced silently if the user has permission.  The operation may fail if *src* and *dst* are on different filesystems.  If successful, the renaming will be an atomic operation (this is a POSIX requirement)."
msgstr ""

#: ../../library/os.rst:1869
msgid "Remove (delete) the directory *path*.  Only works when the directory is empty, otherwise, :exc:`OSError` is raised.  In order to remove whole directory trees, :func:`shutil.rmtree` can be used."
msgstr ""

#: ../../library/os.rst:1876
#: ../../library/os.rst:2478
msgid "The *dir_fd* parameter."
msgstr ""

#: ../../library/os.rst:1882
msgid "Return an iterator of :class:`DirEntry` objects corresponding to the entries in the directory given by *path*. The entries are yielded in arbitrary order, and the special entries ``'.'`` and ``'..'`` are not included."
msgstr ""

#: ../../library/os.rst:1886
msgid "Using :func:`scandir` instead of :func:`listdir` can significantly increase the performance of code that also needs file type or file attribute information, because :class:`DirEntry` objects expose this information if the operating system provides it when scanning a directory. All :class:`DirEntry` methods may perform a system call, but :func:`~DirEntry.is_dir` and :func:`~DirEntry.is_file` usually only require a system call for symbolic links; :func:`DirEntry.stat` always requires a system call on Unix but only requires one for symbolic links on Windows."
msgstr ""

#: ../../library/os.rst:1896
msgid "On Unix, *path* can be of type :class:`str` or :class:`bytes` (use :func:`~os.fsencode` and :func:`~os.fsdecode` to encode and decode :class:`bytes` paths). On Windows, *path* must be of type :class:`str`. On both sytems, the type of the :attr:`~DirEntry.name` and :attr:`~DirEntry.path` attributes of each :class:`DirEntry` will be of the same type as *path*."
msgstr ""

#: ../../library/os.rst:1903
msgid "The following example shows a simple use of :func:`scandir` to display all the files (excluding directories) in the given *path* that don't start with ``'.'``. The ``entry.is_file()`` call will generally not make an additional system call::"
msgstr ""

#: ../../library/os.rst:1914
msgid "On Unix-based systems, :func:`scandir` uses the system's `opendir() <http://pubs.opengroup.org/onlinepubs/009695399/functions/opendir.html>`_ and `readdir() <http://pubs.opengroup.org/onlinepubs/009695399/functions/readdir_r.html>`_ functions. On Windows, it uses the Win32 `FindFirstFileW <https://msdn.microsoft.com/en-us/library/windows/desktop/aa364418(v=vs.85).aspx>`_ and `FindNextFileW <https://msdn.microsoft.com/en-us/library/windows/desktop/aa364428(v=vs.85).aspx>`_ functions."
msgstr ""

#: ../../library/os.rst:1929
msgid "Object yielded by :func:`scandir` to expose the file path and other file attributes of a directory entry."
msgstr ""

#: ../../library/os.rst:1932
msgid ":func:`scandir` will provide as much of this information as possible without making additional system calls. When a ``stat()`` or ``lstat()`` system call is made, the ``DirEntry`` object will cache the result."
msgstr ""

#: ../../library/os.rst:1936
msgid "``DirEntry`` instances are not intended to be stored in long-lived data structures; if you know the file metadata has changed or if a long time has elapsed since calling :func:`scandir`, call ``os.stat(entry.path)`` to fetch up-to-date information."
msgstr ""

#: ../../library/os.rst:1941
msgid "Because the ``DirEntry`` methods can make operating system calls, they may also raise :exc:`OSError`. If you need very fine-grained control over errors, you can catch :exc:`OSError` when calling one of the ``DirEntry`` methods and handle as appropriate."
msgstr ""

#: ../../library/os.rst:1946
msgid "Attributes and methods on a ``DirEntry`` instance are as follows:"
msgstr ""

#: ../../library/os.rst:1950
msgid "The entry's base filename, relative to the :func:`scandir` *path* argument."
msgstr ""

#: ../../library/os.rst:1953
msgid "The :attr:`name` attribute will be of the same type (``str`` or ``bytes``) as the :func:`scandir` *path* argument. Use :func:`~os.fsdecode` to decode byte filenames."
msgstr ""

#: ../../library/os.rst:1959
msgid "The entry's full path name: equivalent to ``os.path.join(scandir_path, entry.name)`` where *scandir_path* is the :func:`scandir` *path* argument.  The path is only absolute if the :func:`scandir` *path* argument was absolute."
msgstr ""

#: ../../library/os.rst:1964
msgid "The :attr:`path` attribute will be of the same type (``str`` or ``bytes``) as the :func:`scandir` *path* argument. Use :func:`~os.fsdecode` to decode byte filenames."
msgstr ""

#: ../../library/os.rst:1970
msgid "Return the inode number of the entry."
msgstr ""

#: ../../library/os.rst:1972
msgid "The result is cached on the ``DirEntry`` object. Use ``os.stat(entry.path, follow_symlinks=False).st_ino`` to fetch up-to-date information."
msgstr ""

#: ../../library/os.rst:1975
msgid "On the first, uncached call, a system call is required on Windows but not on Unix."
msgstr ""

#: ../../library/os.rst:1980
msgid "Return ``True`` if this entry is a directory or a symbolic link pointing to a directory; return ``False`` if the entry is or points to any other kind of file, or if it doesn't exist anymore."
msgstr ""

#: ../../library/os.rst:1984
msgid "If *follow_symlinks* is ``False``, return ``True`` only if this entry is a directory (without following symlinks); return ``False`` if the entry is any other kind of file or if it doesn't exist anymore."
msgstr ""

#: ../../library/os.rst:1988
msgid "The result is cached on the ``DirEntry`` object, with a separate cache for *follow_symlinks* ``True`` and ``False``. Call :func:`os.stat` along with :func:`stat.S_ISDIR` to fetch up-to-date information."
msgstr ""

#: ../../library/os.rst:1992
msgid "On the first, uncached call, no system call is required in most cases. Specifically, for non-symlinks, neither Windows or Unix require a system call, except on certain Unix file systems, such as network file systems, that return ``dirent.d_type == DT_UNKNOWN``. If the entry is a symlink, a system call will be required to follow the symlink unless *follow_symlinks* is ``False``."
msgstr ""

#: ../../library/os.rst:1999
#: ../../library/os.rst:2029
msgid "This method can raise :exc:`OSError`, such as :exc:`PermissionError`, but :exc:`FileNotFoundError` is caught and not raised."
msgstr ""

#: ../../library/os.rst:2004
msgid "Return ``True`` if this entry is a file or a symbolic link pointing to a file; return ``False`` if the entry is or points to a directory or other non-file entry, or if it doesn't exist anymore."
msgstr ""

#: ../../library/os.rst:2008
msgid "If *follow_symlinks* is ``False``, return ``True`` only if this entry is a file (without following symlinks); return ``False`` if the entry is a directory or other non-file entry, or if it doesn't exist anymore."
msgstr ""

#: ../../library/os.rst:2012
msgid "The result is cached on the ``DirEntry`` object. Caching, system calls made, and exceptions raised are as per :func:`~DirEntry.is_dir`."
msgstr ""

#: ../../library/os.rst:2017
msgid "Return ``True`` if this entry is a symbolic link (even if broken); return ``False`` if the entry points to a directory or any kind of file, or if it doesn't exist anymore."
msgstr ""

#: ../../library/os.rst:2021
msgid "The result is cached on the ``DirEntry`` object. Call :func:`os.path.islink` to fetch up-to-date information."
msgstr ""

#: ../../library/os.rst:2024
msgid "On the first, uncached call, no system call is required in most cases. Specifically, neither Windows or Unix require a system call, except on certain Unix file systems, such as network file systems, that return ``dirent.d_type == DT_UNKNOWN``."
msgstr ""

#: ../../library/os.rst:2034
msgid "Return a :class:`stat_result` object for this entry. This method follows symbolic links by default; to stat a symbolic link add the ``follow_symlinks=False`` argument."
msgstr ""

#: ../../library/os.rst:2038
msgid "On Unix, this method always requires a system call. On Windows, it only requires a system call if *follow_symlinks* is ``True`` and the entry is a symbolic link."
msgstr ""

#: ../../library/os.rst:2042
msgid "On Windows, the ``st_ino``, ``st_dev`` and ``st_nlink`` attributes of the :class:`stat_result` are always set to zero. Call :func:`os.stat` to get these attributes."
msgstr ""

#: ../../library/os.rst:2046
msgid "The result is cached on the ``DirEntry`` object, with a separate cache for *follow_symlinks* ``True`` and ``False``. Call :func:`os.stat` to fetch up-to-date information."
msgstr ""

#: ../../library/os.rst:2050
msgid "Note that there is a nice correspondence between several attributes and methods of ``DirEntry`` and of :class:`pathlib.Path`.  In particular, the ``name`` and ``path`` attributes have the same meaning, as do the ``is_dir()``, ``is_file()``, ``is_symlink()`` and ``stat()`` methods."
msgstr ""

#: ../../library/os.rst:2061
msgid "Get the status of a file or a file descriptor. Perform the equivalent of a :c:func:`stat` system call on the given path. *path* may be specified as either a string or as an open file descriptor. Return a :class:`stat_result` object."
msgstr ""

#: ../../library/os.rst:2066
msgid "This function normally follows symlinks; to stat a symlink add the argument ``follow_symlinks=False``, or use :func:`lstat`."
msgstr ""

#: ../../library/os.rst:2069
#: ../../library/os.rst:2678
#: ../../library/os.rst:2689
#: ../../library/os.rst:2699
#: ../../library/os.rst:2713
msgid "This function can support :ref:`specifying a file descriptor <path_fd>` and :ref:`not following symlinks <follow_symlinks>`."
msgstr ""

#: ../../library/os.rst:2074
msgid "Example::"
msgstr ""

#: ../../library/os.rst:2087
msgid ":func:`fstat` and :func:`lstat` functions."
msgstr ""

#: ../../library/os.rst:2089
msgid "Added the *dir_fd* and *follow_symlinks* arguments, specifying a file descriptor instead of a path."
msgstr ""

#: ../../library/os.rst:2096
msgid "Object whose attributes correspond roughly to the members of the :c:type:`stat` structure. It is used for the result of :func:`os.stat`, :func:`os.fstat` and :func:`os.lstat`."
msgstr ""

#: ../../library/os.rst:2100
msgid "Attributes:"
msgstr ""

#: ../../library/os.rst:2104
msgid "File mode: file type and file mode bits (permissions)."
msgstr ""

#: ../../library/os.rst:2108
msgid "Inode number."
msgstr ""

#: ../../library/os.rst:2112
msgid "Identifier of the device on which this file resides."
msgstr ""

#: ../../library/os.rst:2116
msgid "Number of hard links."
msgstr ""

#: ../../library/os.rst:2120
msgid "User identifier of the file owner."
msgstr ""

#: ../../library/os.rst:2124
msgid "Group identifier of the file owner."
msgstr ""

#: ../../library/os.rst:2128
msgid "Size of the file in bytes, if it is a regular file or a symbolic link. The size of a symbolic link is the length of the pathname it contains, without a terminating null byte."
msgstr ""

#: ../../library/os.rst:2132
msgid "Timestamps:"
msgstr ""

#: ../../library/os.rst:2136
msgid "Time of most recent access expressed in seconds."
msgstr ""

#: ../../library/os.rst:2140
msgid "Time of most recent content modification expressed in seconds."
msgstr ""

#: ../../library/os.rst:2144
#: ../../library/os.rst:2160
msgid "Platform dependent:"
msgstr ""

#: ../../library/os.rst:2146
#: ../../library/os.rst:2162
msgid "the time of most recent metadata change on Unix,"
msgstr ""

#: ../../library/os.rst:2147
msgid "the time of creation on Windows, expressed in seconds."
msgstr ""

#: ../../library/os.rst:2151
msgid "Time of most recent access expressed in nanoseconds as an integer."
msgstr ""

#: ../../library/os.rst:2155
msgid "Time of most recent content modification expressed in nanoseconds as an integer."
msgstr ""

#: ../../library/os.rst:2163
msgid "the time of creation on Windows, expressed in nanoseconds as an integer."
msgstr ""

#: ../../library/os.rst:2166
msgid "See also the :func:`stat_float_times` function."
msgstr ""

#: ../../library/os.rst:2170
msgid "The exact meaning and resolution of the :attr:`st_atime`, :attr:`st_mtime`, and :attr:`st_ctime` attributes depend on the operating system and the file system. For example, on Windows systems using the FAT or FAT32 file systems, :attr:`st_mtime` has 2-second resolution, and :attr:`st_atime` has only 1-day resolution.  See your operating system documentation for details."
msgstr ""

#: ../../library/os.rst:2177
msgid "Similarly, although :attr:`st_atime_ns`, :attr:`st_mtime_ns`, and :attr:`st_ctime_ns` are always expressed in nanoseconds, many systems do not provide nanosecond precision.  On systems that do provide nanosecond precision, the floating-point object used to store :attr:`st_atime`, :attr:`st_mtime`, and :attr:`st_ctime` cannot preserve all of it, and as such will be slightly inexact. If you need the exact timestamps you should always use :attr:`st_atime_ns`, :attr:`st_mtime_ns`, and :attr:`st_ctime_ns`."
msgstr ""

#: ../../library/os.rst:2186
msgid "On some Unix systems (such as Linux), the following attributes may also be available:"
msgstr ""

#: ../../library/os.rst:2191
msgid "Number of 512-byte blocks allocated for file. This may be smaller than :attr:`st_size`/512 when the file has holes."
msgstr ""

#: ../../library/os.rst:2196
msgid "\"Preferred\" blocksize for efficient file system I/O. Writing to a file in smaller chunks may cause an inefficient read-modify-rewrite."
msgstr ""

#: ../../library/os.rst:2201
msgid "Type of device if an inode device."
msgstr ""

#: ../../library/os.rst:2205
msgid "User defined flags for file."
msgstr ""

#: ../../library/os.rst:2207
msgid "On other Unix systems (such as FreeBSD), the following attributes may be available (but may be only filled out if root tries to use them):"
msgstr ""

#: ../../library/os.rst:2212
msgid "File generation number."
msgstr ""

#: ../../library/os.rst:2216
msgid "Time of file creation."
msgstr ""

#: ../../library/os.rst:2218
msgid "On Mac OS systems, the following attributes may also be available:"
msgstr ""

#: ../../library/os.rst:2222
msgid "Real size of the file."
msgstr ""

#: ../../library/os.rst:2226
msgid "Creator of the file."
msgstr ""

#: ../../library/os.rst:2230
msgid "File type."
msgstr ""

#: ../../library/os.rst:2232
msgid "On Windows systems, the following attribute is also available:"
msgstr ""

#: ../../library/os.rst:2236
msgid "Windows file attributes: ``dwFileAttributes`` member of the ``BY_HANDLE_FILE_INFORMATION`` structure returned by :c:func:`GetFileInformationByHandle`. See the ``FILE_ATTRIBUTE_*`` constants in the :mod:`stat` module."
msgstr ""

#: ../../library/os.rst:2241
msgid "The standard module :mod:`stat` defines functions and constants that are useful for extracting information from a :c:type:`stat` structure. (On Windows, some items are filled with dummy values.)"
msgstr ""

#: ../../library/os.rst:2245
msgid "For backward compatibility, a :class:`stat_result` instance is also accessible as a tuple of at least 10 integers giving the most important (and portable) members of the :c:type:`stat` structure, in the order :attr:`st_mode`, :attr:`st_ino`, :attr:`st_dev`, :attr:`st_nlink`, :attr:`st_uid`, :attr:`st_gid`, :attr:`st_size`, :attr:`st_atime`, :attr:`st_mtime`, :attr:`st_ctime`. More items may be added at the end by some implementations. For compatibility with older Python versions, accessing :class:`stat_result` as a tuple always returns integers."
msgstr ""

#: ../../library/os.rst:2254
msgid "Added the :attr:`st_atime_ns`, :attr:`st_mtime_ns`, and :attr:`st_ctime_ns` members."
msgstr ""

#: ../../library/os.rst:2258
msgid "Added the :attr:`st_file_attributes` member on Windows."
msgstr ""

#: ../../library/os.rst:2264
msgid "Determine whether :class:`stat_result` represents time stamps as float objects. If *newvalue* is ``True``, future calls to :func:`~os.stat` return floats, if it is ``False``, future calls return ints. If *newvalue* is omitted, return the current setting."
msgstr ""

#: ../../library/os.rst:2269
msgid "For compatibility with older Python versions, accessing :class:`stat_result` as a tuple always returns integers."
msgstr ""

#: ../../library/os.rst:2272
msgid "Python now returns float values by default. Applications which do not work correctly with floating point time stamps can use this function to restore the old behaviour."
msgstr ""

#: ../../library/os.rst:2276
msgid "The resolution of the timestamps (that is the smallest possible fraction) depends on the system. Some systems only support second resolution; on these systems, the fraction will always be zero."
msgstr ""

#: ../../library/os.rst:2280
msgid "It is recommended that this setting is only changed at program startup time in the *__main__* module; libraries should never change this setting. If an application uses a library that works incorrectly if floating point time stamps are processed, this application should turn the feature off until the library has been corrected."
msgstr ""

#: ../../library/os.rst:2291
msgid "Perform a :c:func:`statvfs` system call on the given path.  The return value is an object whose attributes describe the filesystem on the given path, and correspond to the members of the :c:type:`statvfs` structure, namely: :attr:`f_bsize`, :attr:`f_frsize`, :attr:`f_blocks`, :attr:`f_bfree`, :attr:`f_bavail`, :attr:`f_files`, :attr:`f_ffree`, :attr:`f_favail`, :attr:`f_flag`, :attr:`f_namemax`."
msgstr ""

#: ../../library/os.rst:2298
msgid "Two module-level constants are defined for the :attr:`f_flag` attribute's bit-flags: if :const:`ST_RDONLY` is set, the filesystem is mounted read-only, and if :const:`ST_NOSUID` is set, the semantics of setuid/setgid bits are disabled or not supported."
msgstr ""

#: ../../library/os.rst:2303
msgid "Additional module-level constants are defined for GNU/glibc based systems. These are :const:`ST_NODEV` (disallow access to device special files), :const:`ST_NOEXEC` (disallow program execution), :const:`ST_SYNCHRONOUS` (writes are synced at once), :const:`ST_MANDLOCK` (allow mandatory locks on an FS), :const:`ST_WRITE` (write on file/directory/symlink), :const:`ST_APPEND` (append-only file), :const:`ST_IMMUTABLE` (immutable file), :const:`ST_NOATIME` (do not update access times), :const:`ST_NODIRATIME` (do not update directory access times), :const:`ST_RELATIME` (update atime relative to mtime/ctime)."
msgstr ""

#: ../../library/os.rst:2314
msgid "The :const:`ST_RDONLY` and :const:`ST_NOSUID` constants were added."
msgstr ""

#: ../../library/os.rst:2317
msgid "The :const:`ST_NODEV`, :const:`ST_NOEXEC`, :const:`ST_SYNCHRONOUS`, :const:`ST_MANDLOCK`, :const:`ST_WRITE`, :const:`ST_APPEND`, :const:`ST_IMMUTABLE`, :const:`ST_NOATIME`, :const:`ST_NODIRATIME`, and :const:`ST_RELATIME` constants were added."
msgstr ""

#: ../../library/os.rst:2331
msgid "A :class:`~collections.abc.Set` object indicating which functions in the :mod:`os` module permit use of their *dir_fd* parameter.  Different platforms provide different functionality, and an option that might work on one might be unsupported on another.  For consistency's sakes, functions that support *dir_fd* always allow specifying the parameter, but will raise an exception if the functionality is not actually available."
msgstr ""

#: ../../library/os.rst:2338
msgid "To check whether a particular function permits use of its *dir_fd* parameter, use the ``in`` operator on ``supports_dir_fd``.  As an example, this expression determines whether the *dir_fd* parameter of :func:`os.stat` is locally available::"
msgstr ""

#: ../../library/os.rst:2345
msgid "Currently *dir_fd* parameters only work on Unix platforms; none of them work on Windows."
msgstr ""

#: ../../library/os.rst:2353
msgid "A :class:`~collections.abc.Set` object indicating which functions in the :mod:`os` module permit use of the *effective_ids* parameter for :func:`os.access`.  If the local platform supports it, the collection will contain :func:`os.access`, otherwise it will be empty."
msgstr ""

#: ../../library/os.rst:2358
msgid "To check whether you can use the *effective_ids* parameter for :func:`os.access`, use the ``in`` operator on ``supports_effective_ids``, like so::"
msgstr ""

#: ../../library/os.rst:2364
msgid "Currently *effective_ids* only works on Unix platforms; it does not work on Windows."
msgstr ""

#: ../../library/os.rst:2372
msgid "A :class:`~collections.abc.Set` object indicating which functions in the :mod:`os` module permit specifying their *path* parameter as an open file descriptor.  Different platforms provide different functionality, and an option that might work on one might be unsupported on another.  For consistency's sakes, functions that support *fd* always allow specifying the parameter, but will raise an exception if the functionality is not actually available."
msgstr ""

#: ../../library/os.rst:2380
msgid "To check whether a particular function permits specifying an open file descriptor for its *path* parameter, use the ``in`` operator on ``supports_fd``. As an example, this expression determines whether :func:`os.chdir` accepts open file descriptors when called on your local platform::"
msgstr ""

#: ../../library/os.rst:2393
msgid "A :class:`~collections.abc.Set` object indicating which functions in the :mod:`os` module permit use of their *follow_symlinks* parameter.  Different platforms provide different functionality, and an option that might work on one might be unsupported on another.  For consistency's sakes, functions that support *follow_symlinks* always allow specifying the parameter, but will raise an exception if the functionality is not actually available."
msgstr ""

#: ../../library/os.rst:2400
msgid "To check whether a particular function permits use of its *follow_symlinks* parameter, use the ``in`` operator on ``supports_follow_symlinks``.  As an example, this expression determines whether the *follow_symlinks* parameter of :func:`os.stat` is locally available::"
msgstr ""

#: ../../library/os.rst:2412
msgid "Create a symbolic link pointing to *src* named *dst*."
msgstr ""

#: ../../library/os.rst:2414
msgid "On Windows, a symlink represents either a file or a directory, and does not morph to the target dynamically.  If the target is present, the type of the symlink will be created to match. Otherwise, the symlink will be created as a directory if *target_is_directory* is ``True`` or a file symlink (the default) otherwise.  On non-Window platforms, *target_is_directory* is ignored."
msgstr ""

#: ../../library/os.rst:2420
msgid "Symbolic link support was introduced in Windows 6.0 (Vista).  :func:`symlink` will raise a :exc:`NotImplementedError` on Windows versions earlier than 6.0."
msgstr ""

#: ../../library/os.rst:2428
msgid "On Windows, the *SeCreateSymbolicLinkPrivilege* is required in order to successfully create symlinks. This privilege is not typically granted to regular users but is available to accounts which can escalate privileges to the administrator level. Either obtaining the privilege or running your application as an administrator are ways to successfully create symlinks."
msgstr ""

#: ../../library/os.rst:2435
msgid ":exc:`OSError` is raised when the function is called by an unprivileged user."
msgstr ""

#: ../../library/os.rst:2443
msgid "Added the *dir_fd* argument, and now allow *target_is_directory* on non-Windows platforms."
msgstr ""

#: ../../library/os.rst:2450
msgid "Force write of everything to disk."
msgstr ""

#: ../../library/os.rst:2459
msgid "Truncate the file corresponding to *path*, so that it is at most *length* bytes in size."
msgstr ""

#: ../../library/os.rst:2473
msgid "Remove (delete) the file *path*.  This function is semantically identical to :func:`remove`; the ``unlink`` name is its traditional Unix name.  Please see the documentation for :func:`remove` for further information."
msgstr ""

#: ../../library/os.rst:2484
msgid "Set the access and modified times of the file specified by *path*."
msgstr ""

#: ../../library/os.rst:2486
msgid ":func:`utime` takes two optional parameters, *times* and *ns*. These specify the times set on *path* and are used as follows:"
msgstr ""

#: ../../library/os.rst:2489
msgid "If *ns* is specified, it must be a 2-tuple of the form ``(atime_ns, mtime_ns)`` where each member is an int expressing nanoseconds."
msgstr ""

#: ../../library/os.rst:2492
msgid "If *times* is not ``None``, it must be a 2-tuple of the form ``(atime, mtime)`` where each member is an int or float expressing seconds."
msgstr ""

#: ../../library/os.rst:2495
msgid "If *times* is ``None`` and *ns* is unspecified, this is equivalent to specifying ``ns=(atime_ns, mtime_ns)`` where both times are the current time."
msgstr ""

#: ../../library/os.rst:2499
msgid "It is an error to specify tuples for both *times* and *ns*."
msgstr ""

#: ../../library/os.rst:2501
msgid "Whether a directory can be given for *path* depends on whether the operating system implements directories as files (for example, Windows does not).  Note that the exact times you set here may not be returned by a subsequent :func:`~os.stat` call, depending on the resolution with which your operating system records access and modification times; see :func:`~os.stat`.  The best way to preserve exact times is to use the *st_atime_ns* and *st_mtime_ns* fields from the :func:`os.stat` result object with the *ns* parameter to `utime`."
msgstr ""

#: ../../library/os.rst:2514
msgid "Added support for specifying an open file descriptor for *path*, and the *dir_fd*, *follow_symlinks*, and *ns* parameters."
msgstr ""

#: ../../library/os.rst:2525
msgid "Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory *top* (including *top* itself), it yields a 3-tuple ``(dirpath, dirnames, filenames)``."
msgstr ""

#: ../../library/os.rst:2530
msgid "*dirpath* is a string, the path to the directory.  *dirnames* is a list of the names of the subdirectories in *dirpath* (excluding ``'.'`` and ``'..'``). *filenames* is a list of the names of the non-directory files in *dirpath*. Note that the names in the lists contain no path components.  To get a full path (which begins with *top*) to a file or directory in *dirpath*, do ``os.path.join(dirpath, name)``."
msgstr ""

#: ../../library/os.rst:2537
msgid "If optional argument *topdown* is ``True`` or not specified, the triple for a directory is generated before the triples for any of its subdirectories (directories are generated top-down).  If *topdown* is ``False``, the triple for a directory is generated after the triples for all of its subdirectories (directories are generated bottom-up). No matter the value of *topdown*, the list of subdirectories is retrieved before the tuples for the directory and its subdirectories are generated."
msgstr ""

#: ../../library/os.rst:2545
msgid "When *topdown* is ``True``, the caller can modify the *dirnames* list in-place (perhaps using :keyword:`del` or slice assignment), and :func:`walk` will only recurse into the subdirectories whose names remain in *dirnames*; this can be used to prune the search, impose a specific order of visiting, or even to inform :func:`walk` about directories the caller creates or renames before it resumes :func:`walk` again.  Modifying *dirnames* when *topdown* is ``False`` has no effect on the behavior of the walk, because in bottom-up mode the directories in *dirnames* are generated before *dirpath* itself is generated."
msgstr ""

#: ../../library/os.rst:2554
msgid "By default, errors from the :func:`listdir` call are ignored.  If optional argument *onerror* is specified, it should be a function; it will be called with one argument, an :exc:`OSError` instance.  It can report the error to continue with the walk, or raise the exception to abort the walk.  Note that the filename is available as the ``filename`` attribute of the exception object."
msgstr ""

#: ../../library/os.rst:2560
msgid "By default, :func:`walk` will not walk down into symbolic links that resolve to directories. Set *followlinks* to ``True`` to visit directories pointed to by symlinks, on systems that support them."
msgstr ""

#: ../../library/os.rst:2566
msgid "Be aware that setting *followlinks* to ``True`` can lead to infinite recursion if a link points to a parent directory of itself. :func:`walk` does not keep track of the directories it visited already."
msgstr ""

#: ../../library/os.rst:2572
msgid "If you pass a relative pathname, don't change the current working directory between resumptions of :func:`walk`.  :func:`walk` never changes the current directory, and assumes that its caller doesn't either."
msgstr ""

#: ../../library/os.rst:2576
#: ../../library/os.rst:2632
msgid "This example displays the number of bytes taken by non-directory files in each directory under the starting directory, except that it doesn't look under any CVS subdirectory::"
msgstr ""

#: ../../library/os.rst:2589
msgid "In the next example (simple implementation of :func:`shutil.rmtree`), walking the tree bottom-up is essential, :func:`rmdir` doesn't allow deleting a directory before the directory is empty::"
msgstr ""

#: ../../library/os.rst:2604
msgid "This function now calls :func:`os.scandir` instead of :func:`os.listdir`, making it faster by reducing the number of calls to :func:`os.stat`."
msgstr ""

#: ../../library/os.rst:2615
msgid "This behaves exactly like :func:`walk`, except that it yields a 4-tuple ``(dirpath, dirnames, filenames, dirfd)``, and it supports ``dir_fd``."
msgstr ""

#: ../../library/os.rst:2618
msgid "*dirpath*, *dirnames* and *filenames* are identical to :func:`walk` output, and *dirfd* is a file descriptor referring to the directory *dirpath*."
msgstr ""

#: ../../library/os.rst:2621
msgid "This function always supports :ref:`paths relative to directory descriptors <dir_fd>` and :ref:`not following symlinks <follow_symlinks>`.  Note however that, unlike other functions, the :func:`fwalk` default value for *follow_symlinks* is ``False``."
msgstr ""

#: ../../library/os.rst:2628
msgid "Since :func:`fwalk` yields file descriptors, those are only valid until the next iteration step, so you should duplicate them (e.g. with :func:`dup`) if you want to keep them longer."
msgstr ""

#: ../../library/os.rst:2645
msgid "In the next example, walking the tree bottom-up is essential: :func:`rmdir` doesn't allow deleting a directory before the directory is empty::"
msgstr ""

#: ../../library/os.rst:2666
msgid "Linux extended attributes"
msgstr ""

#: ../../library/os.rst:2670
msgid "These functions are all available on Linux only."
msgstr ""

#: ../../library/os.rst:2674
msgid "Return the value of the extended filesystem attribute *attribute* for *path*. *attribute* can be bytes or str. If it is str, it is encoded with the filesystem encoding."
msgstr ""

#: ../../library/os.rst:2684
msgid "Return a list of the extended filesystem attributes on *path*.  The attributes in the list are represented as strings decoded with the filesystem encoding.  If *path* is ``None``, :func:`listxattr` will examine the current directory."
msgstr ""

#: ../../library/os.rst:2695
msgid "Removes the extended filesystem attribute *attribute* from *path*. *attribute* should be bytes or str. If it is a string, it is encoded with the filesystem encoding."
msgstr ""

#: ../../library/os.rst:2705
msgid "Set the extended filesystem attribute *attribute* on *path* to *value*. *attribute* must be a bytes or str with no embedded NULs. If it is a str, it is encoded with the filesystem encoding.  *flags* may be :data:`XATTR_REPLACE` or :data:`XATTR_CREATE`. If :data:`XATTR_REPLACE` is given and the attribute does not exist, ``EEXISTS`` will be raised. If :data:`XATTR_CREATE` is given and the attribute already exists, the attribute will not be created and ``ENODATA`` will be raised."
msgstr ""

#: ../../library/os.rst:2718
msgid "A bug in Linux kernel versions less than 2.6.39 caused the flags argument to be ignored on some filesystems."
msgstr ""

#: ../../library/os.rst:2724
msgid "The maximum size the value of an extended attribute can be. Currently, this is 64 KiB on Linux."
msgstr ""

#: ../../library/os.rst:2730
msgid "This is a possible value for the flags argument in :func:`setxattr`. It indicates the operation must create an attribute."
msgstr ""

#: ../../library/os.rst:2736
msgid "This is a possible value for the flags argument in :func:`setxattr`. It indicates the operation must replace an existing attribute."
msgstr ""

#: ../../library/os.rst:2743
msgid "Process Management"
msgstr ""

#: ../../library/os.rst:2745
msgid "These functions may be used to create and manage processes."
msgstr ""

#: ../../library/os.rst:2747
msgid "The various :func:`exec\\* <execl>` functions take a list of arguments for the new program loaded into the process.  In each case, the first of these arguments is passed to the new program as its own name rather than as an argument a user may have typed on a command line.  For the C programmer, this is the ``argv[0]`` passed to a program's :c:func:`main`.  For example, ``os.execv('/bin/echo', ['foo', 'bar'])`` will only print ``bar`` on standard output; ``foo`` will seem to be ignored."
msgstr ""

#: ../../library/os.rst:2758
msgid "Generate a :const:`SIGABRT` signal to the current process.  On Unix, the default behavior is to produce a core dump; on Windows, the process immediately returns an exit code of ``3``.  Be aware that calling this function will not call the Python signal handler registered for :const:`SIGABRT` with :func:`signal.signal`."
msgstr ""

#: ../../library/os.rst:2774
msgid "These functions all execute a new program, replacing the current process; they do not return.  On Unix, the new executable is loaded into the current process, and will have the same process id as the caller.  Errors will be reported as :exc:`OSError` exceptions."
msgstr ""

#: ../../library/os.rst:2779
msgid "The current process is replaced immediately. Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using :func:`sys.stdout.flush` or :func:`os.fsync` before calling an :func:`exec\\* <execl>` function."
msgstr ""

#: ../../library/os.rst:2785
msgid "The \"l\" and \"v\" variants of the :func:`exec\\* <execl>` functions differ in how command-line arguments are passed.  The \"l\" variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the :func:`execl\\*` functions.  The \"v\" variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the *args* parameter.  In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced."
msgstr ""

#: ../../library/os.rst:2794
msgid "The variants which include a \"p\" near the end (:func:`execlp`, :func:`execlpe`, :func:`execvp`, and :func:`execvpe`) will use the :envvar:`PATH` environment variable to locate the program *file*.  When the environment is being replaced (using one of the :func:`exec\\*e <execl>` variants, discussed in the next paragraph), the new environment is used as the source of the :envvar:`PATH` variable. The other variants, :func:`execl`, :func:`execle`, :func:`execv`, and :func:`execve`, will not use the :envvar:`PATH` variable to locate the executable; *path* must contain an appropriate absolute or relative path."
msgstr ""

#: ../../library/os.rst:2804
msgid "For :func:`execle`, :func:`execlpe`, :func:`execve`, and :func:`execvpe` (note that these all end in \"e\"), the *env* parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process' environment); the functions :func:`execl`, :func:`execlp`, :func:`execv`, and :func:`execvp` all cause the new process to inherit the environment of the current process."
msgstr ""

#: ../../library/os.rst:2811
msgid "For :func:`execve` on some platforms, *path* may also be specified as an open file descriptor.  This functionality may not be supported on your platform; you can check whether or not it is available using :data:`os.supports_fd`. If it is unavailable, using it will raise a :exc:`NotImplementedError`."
msgstr ""

#: ../../library/os.rst:2818
msgid "Added support for specifying an open file descriptor for *path* for :func:`execve`."
msgstr ""

#: ../../library/os.rst:2824
msgid "Exit the process with status *n*, without calling cleanup handlers, flushing stdio buffers, etc."
msgstr ""

#: ../../library/os.rst:2829
msgid "The standard way to exit is ``sys.exit(n)``.  :func:`_exit` should normally only be used in the child process after a :func:`fork`."
msgstr ""

#: ../../library/os.rst:2832
msgid "The following exit codes are defined and can be used with :func:`_exit`, although they are not required.  These are typically used for system programs written in Python, such as a mail server's external command delivery program."
msgstr ""

#: ../../library/os.rst:2838
msgid "Some of these may not be available on all Unix platforms, since there is some variation.  These constants are defined where they are defined by the underlying platform."
msgstr ""

#: ../../library/os.rst:2845
msgid "Exit code that means no error occurred."
msgstr ""

#: ../../library/os.rst:2852
msgid "Exit code that means the command was used incorrectly, such as when the wrong number of arguments are given."
msgstr ""

#: ../../library/os.rst:2860
msgid "Exit code that means the input data was incorrect."
msgstr ""

#: ../../library/os.rst:2867
msgid "Exit code that means an input file did not exist or was not readable."
msgstr ""

#: ../../library/os.rst:2874
msgid "Exit code that means a specified user did not exist."
msgstr ""

#: ../../library/os.rst:2881
msgid "Exit code that means a specified host did not exist."
msgstr ""

#: ../../library/os.rst:2888
msgid "Exit code that means that a required service is unavailable."
msgstr ""

#: ../../library/os.rst:2895
msgid "Exit code that means an internal software error was detected."
msgstr ""

#: ../../library/os.rst:2902
msgid "Exit code that means an operating system error was detected, such as the inability to fork or create a pipe."
msgstr ""

#: ../../library/os.rst:2910
msgid "Exit code that means some system file did not exist, could not be opened, or had some other kind of error."
msgstr ""

#: ../../library/os.rst:2918
msgid "Exit code that means a user specified output file could not be created."
msgstr ""

#: ../../library/os.rst:2925
msgid "Exit code that means that an error occurred while doing I/O on some file."
msgstr ""

#: ../../library/os.rst:2932
msgid "Exit code that means a temporary failure occurred.  This indicates something that may not really be an error, such as a network connection that couldn't be made during a retryable operation."
msgstr ""

#: ../../library/os.rst:2941
msgid "Exit code that means that a protocol exchange was illegal, invalid, or not understood."
msgstr ""

#: ../../library/os.rst:2949
msgid "Exit code that means that there were insufficient permissions to perform the operation (but not intended for file system problems)."
msgstr ""

#: ../../library/os.rst:2957
msgid "Exit code that means that some kind of configuration error occurred."
msgstr ""

#: ../../library/os.rst:2964
msgid "Exit code that means something like \"an entry was not found\"."
msgstr ""

#: ../../library/os.rst:2971
msgid "Fork a child process.  Return ``0`` in the child and the child's process id in the parent.  If an error occurs :exc:`OSError` is raised."
msgstr ""

#: ../../library/os.rst:2974
msgid "Note that some platforms including FreeBSD <= 6.3 and Cygwin have known issues when using fork() from a thread."
msgstr ""

#: ../../library/os.rst:2979
msgid "See :mod:`ssl` for applications that use the SSL module with fork()."
msgstr ""

#: ../../library/os.rst:2986
msgid "Fork a child process, using a new pseudo-terminal as the child's controlling terminal. Return a pair of ``(pid, fd)``, where *pid* is ``0`` in the child, the new child's process id in the parent, and *fd* is the file descriptor of the master end of the pseudo-terminal.  For a more portable approach, use the :mod:`pty` module.  If an error occurs :exc:`OSError` is raised."
msgstr ""

#: ../../library/os.rst:3001
msgid "Send signal *sig* to the process *pid*.  Constants for the specific signals available on the host platform are defined in the :mod:`signal` module."
msgstr ""

#: ../../library/os.rst:3004
msgid "Windows: The :data:`signal.CTRL_C_EVENT` and :data:`signal.CTRL_BREAK_EVENT` signals are special signals which can only be sent to console processes which share a common console window, e.g., some subprocesses. Any other value for *sig* will cause the process to be unconditionally killed by the TerminateProcess API, and the exit code will be set to *sig*. The Windows version of :func:`kill` additionally takes process handles to be killed."
msgstr ""

#: ../../library/os.rst:3012
msgid "See also :func:`signal.pthread_kill`."
msgstr ""

#: ../../library/os.rst:3014
msgid "Windows support."
msgstr ""

#: ../../library/os.rst:3024
msgid "Send the signal *sig* to the process group *pgid*."
msgstr ""

#: ../../library/os.rst:3031
msgid "Add *increment* to the process's \"niceness\".  Return the new niceness."
msgstr ""

#: ../../library/os.rst:3038
msgid "Lock program segments into memory.  The value of *op* (defined in ``<sys/lock.h>``) determines which segments are locked."
msgstr ""

#: ../../library/os.rst:3046
msgid "Open a pipe to or from command *cmd*. The return value is an open file object connected to the pipe, which can be read or written depending on whether *mode* is ``'r'`` (default) or ``'w'``. The *buffering* argument has the same meaning as the corresponding argument to the built-in :func:`open` function. The returned file object reads or writes text strings rather than bytes."
msgstr ""

#: ../../library/os.rst:3053
msgid "The ``close`` method returns :const:`None` if the subprocess exited successfully, or the subprocess's return code if there was an error. On POSIX systems, if the return code is positive it represents the return value of the process left-shifted by one byte.  If the return code is negative, the process was terminated by the signal given by the negated value of the return code.  (For example, the return value might be ``- signal.SIGKILL`` if the subprocess was killed.)  On Windows systems, the return value contains the signed integer return code from the child process."
msgstr ""

#: ../../library/os.rst:3063
msgid "This is implemented using :class:`subprocess.Popen`; see that class's documentation for more powerful ways to manage and communicate with subprocesses."
msgstr ""

#: ../../library/os.rst:3077
msgid "Execute the program *path* in a new process."
msgstr ""

#: ../../library/os.rst:3079
msgid "(Note that the :mod:`subprocess` module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.  Check especially the :ref:`subprocess-replacements` section.)"
msgstr ""

#: ../../library/os.rst:3084
msgid "If *mode* is :const:`P_NOWAIT`, this function returns the process id of the new process; if *mode* is :const:`P_WAIT`, returns the process's exit code if it exits normally, or ``-signal``, where *signal* is the signal that killed the process.  On Windows, the process id will actually be the process handle, so can be used with the :func:`waitpid` function."
msgstr ""

#: ../../library/os.rst:3090
msgid "The \"l\" and \"v\" variants of the :func:`spawn\\* <spawnl>` functions differ in how command-line arguments are passed.  The \"l\" variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the :func:`spawnl\\*` functions.  The \"v\" variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the *args* parameter.  In either case, the arguments to the child process must start with the name of the command being run."
msgstr ""

#: ../../library/os.rst:3099
msgid "The variants which include a second \"p\" near the end (:func:`spawnlp`, :func:`spawnlpe`, :func:`spawnvp`, and :func:`spawnvpe`) will use the :envvar:`PATH` environment variable to locate the program *file*.  When the environment is being replaced (using one of the :func:`spawn\\*e <spawnl>` variants, discussed in the next paragraph), the new environment is used as the source of the :envvar:`PATH` variable.  The other variants, :func:`spawnl`, :func:`spawnle`, :func:`spawnv`, and :func:`spawnve`, will not use the :envvar:`PATH` variable to locate the executable; *path* must contain an appropriate absolute or relative path."
msgstr ""

#: ../../library/os.rst:3109
msgid "For :func:`spawnle`, :func:`spawnlpe`, :func:`spawnve`, and :func:`spawnvpe` (note that these all end in \"e\"), the *env* parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process' environment); the functions :func:`spawnl`, :func:`spawnlp`, :func:`spawnv`, and :func:`spawnvp` all cause the new process to inherit the environment of the current process.  Note that keys and values in the *env* dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of ``127``."
msgstr ""

#: ../../library/os.rst:3118
msgid "As an example, the following calls to :func:`spawnlp` and :func:`spawnvpe` are equivalent::"
msgstr ""

#: ../../library/os.rst:3127
msgid "Availability: Unix, Windows.  :func:`spawnlp`, :func:`spawnlpe`, :func:`spawnvp` and :func:`spawnvpe` are not available on Windows.  :func:`spawnle` and :func:`spawnve` are not thread-safe on Windows; we advise you to use the :mod:`subprocess` module instead."
msgstr ""

#: ../../library/os.rst:3136
msgid "Possible values for the *mode* parameter to the :func:`spawn\\* <spawnl>` family of functions.  If either of these values is given, the :func:`spawn\\*` functions will return as soon as the new process has been created, with the process id as the return value."
msgstr ""

#: ../../library/os.rst:3146
msgid "Possible value for the *mode* parameter to the :func:`spawn\\* <spawnl>` family of functions.  If this is given as *mode*, the :func:`spawn\\*` functions will not return until the new process has run to completion and will return the exit code of the process the run is successful, or ``-signal`` if a signal kills the process."
msgstr ""

#: ../../library/os.rst:3158
msgid "Possible values for the *mode* parameter to the :func:`spawn\\* <spawnl>` family of functions.  These are less portable than those listed above. :const:`P_DETACH` is similar to :const:`P_NOWAIT`, but the new process is detached from the console of the calling process. If :const:`P_OVERLAY` is used, the current process will be replaced; the :func:`spawn\\* <spawnl>` function will not return."
msgstr ""

#: ../../library/os.rst:3169
msgid "Start a file with its associated application."
msgstr ""

#: ../../library/os.rst:3171
msgid "When *operation* is not specified or ``'open'``, this acts like double-clicking the file in Windows Explorer, or giving the file name as an argument to the :program:`start` command from the interactive command shell: the file is opened with whatever application (if any) its extension is associated."
msgstr ""

#: ../../library/os.rst:3176
msgid "When another *operation* is given, it must be a \"command verb\" that specifies what should be done with the file. Common verbs documented by Microsoft are ``'print'`` and  ``'edit'`` (to be used on files) as well as ``'explore'`` and ``'find'`` (to be used on directories)."
msgstr ""

#: ../../library/os.rst:3181
msgid ":func:`startfile` returns as soon as the associated application is launched. There is no option to wait for the application to close, and no way to retrieve the application's exit status.  The *path* parameter is relative to the current directory.  If you want to use an absolute path, make sure the first character is not a slash (``'/'``); the underlying Win32 :c:func:`ShellExecute` function doesn't work if it is.  Use the :func:`os.path.normpath` function to ensure that the path is properly encoded for Win32."
msgstr ""

#: ../../library/os.rst:3189
msgid "To reduce interpreter startup overhead, the Win32 :c:func:`ShellExecute` function is not resolved until this function is first called.  If the function cannot be resolved, :exc:`NotImplementedError` will be raised."
msgstr ""

#: ../../library/os.rst:3198
msgid "Execute the command (a string) in a subshell.  This is implemented by calling the Standard C function :c:func:`system`, and has the same limitations. Changes to :data:`sys.stdin`, etc. are not reflected in the environment of the executed command. If *command* generates any output, it will be sent to the interpreter standard output stream."
msgstr ""

#: ../../library/os.rst:3204
msgid "On Unix, the return value is the exit status of the process encoded in the format specified for :func:`wait`.  Note that POSIX does not specify the meaning of the return value of the C :c:func:`system` function, so the return value of the Python function is system-dependent."
msgstr ""

#: ../../library/os.rst:3209
msgid "On Windows, the return value is that returned by the system shell after running *command*.  The shell is given by the Windows environment variable :envvar:`COMSPEC`: it is usually :program:`cmd.exe`, which returns the exit status of the command run; on systems using a non-native shell, consult your shell documentation."
msgstr ""

#: ../../library/os.rst:3215
msgid "The :mod:`subprocess` module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function.  See the :ref:`subprocess-replacements` section in the :mod:`subprocess` documentation for some helpful recipes."
msgstr ""

#: ../../library/os.rst:3225
msgid "Returns the current global process times. The return value is an object with five attributes:"
msgstr ""

#: ../../library/os.rst:3228
msgid ":attr:`user` - user time"
msgstr ""

#: ../../library/os.rst:3229
msgid ":attr:`system` - system time"
msgstr ""

#: ../../library/os.rst:3230
msgid ":attr:`children_user` - user time of all child processes"
msgstr ""

#: ../../library/os.rst:3231
msgid ":attr:`children_system` - system time of all child processes"
msgstr ""

#: ../../library/os.rst:3232
msgid ":attr:`elapsed` - elapsed real time since a fixed point in the past"
msgstr ""

#: ../../library/os.rst:3234
msgid "For backwards compatibility, this object also behaves like a five-tuple containing :attr:`user`, :attr:`system`, :attr:`children_user`, :attr:`children_system`, and :attr:`elapsed` in that order."
msgstr ""

#: ../../library/os.rst:3238
msgid "See the Unix manual page :manpage:`times(2)` or the corresponding Windows Platform API documentation. On Windows, only :attr:`user` and :attr:`system` are known; the other attributes are zero."
msgstr ""

#: ../../library/os.rst:3252
msgid "Wait for completion of a child process, and return a tuple containing its pid and exit status indication: a 16-bit number, whose low byte is the signal number that killed the process, and whose high byte is the exit status (if the signal number is zero); the high bit of the low byte is set if a core file was produced."
msgstr ""

#: ../../library/os.rst:3262
msgid "Wait for the completion of one or more child processes. *idtype* can be :data:`P_PID`, :data:`P_PGID` or :data:`P_ALL`. *id* specifies the pid to wait on. *options* is constructed from the ORing of one or more of :data:`WEXITED`, :data:`WSTOPPED` or :data:`WCONTINUED` and additionally may be ORed with :data:`WNOHANG` or :data:`WNOWAIT`. The return value is an object representing the data contained in the :c:type:`siginfo_t` structure, namely: :attr:`si_pid`, :attr:`si_uid`, :attr:`si_signo`, :attr:`si_status`, :attr:`si_code` or ``None`` if :data:`WNOHANG` is specified and there are no children in a waitable state."
msgstr ""

#: ../../library/os.rst:3281
msgid "These are the possible values for *idtype* in :func:`waitid`. They affect how *id* is interpreted."
msgstr ""

#: ../../library/os.rst:3292
msgid "Flags that can be used in *options* in :func:`waitid` that specify what child signal to wait for."
msgstr ""

#: ../../library/os.rst:3305
msgid "These are the possible values for :attr:`si_code` in the result returned by :func:`waitid`."
msgstr ""

#: ../../library/os.rst:3315
msgid "The details of this function differ on Unix and Windows."
msgstr ""

#: ../../library/os.rst:3317
msgid "On Unix: Wait for completion of a child process given by process id *pid*, and return a tuple containing its process id and exit status indication (encoded as for :func:`wait`).  The semantics of the call are affected by the value of the integer *options*, which should be ``0`` for normal operation."
msgstr ""

#: ../../library/os.rst:3322
msgid "If *pid* is greater than ``0``, :func:`waitpid` requests status information for that specific process.  If *pid* is ``0``, the request is for the status of any child in the process group of the current process.  If *pid* is ``-1``, the request pertains to any child of the current process.  If *pid* is less than ``-1``, status is requested for any process in the process group ``-pid`` (the absolute value of *pid*)."
msgstr ""

#: ../../library/os.rst:3329
msgid "An :exc:`OSError` is raised with the value of errno when the syscall returns -1."
msgstr ""

#: ../../library/os.rst:3332
msgid "On Windows: Wait for completion of a process given by process handle *pid*, and return a tuple containing *pid*, and its exit status shifted left by 8 bits (shifting makes cross-platform use of the function easier). A *pid* less than or equal to ``0`` has no special meaning on Windows, and raises an exception. The value of integer *options* has no effect. *pid* can refer to any process whose id is known, not necessarily a child process. The :func:`spawn\\* <spawnl>` functions called with :const:`P_NOWAIT` return suitable process handles."
msgstr ""

#: ../../library/os.rst:3348
msgid "Similar to :func:`waitpid`, except no process id argument is given and a 3-element tuple containing the child's process id, exit status indication, and resource usage information is returned.  Refer to :mod:`resource`.\\ :func:`~resource.getrusage` for details on resource usage information.  The option argument is the same as that provided to :func:`waitpid` and :func:`wait4`."
msgstr ""

#: ../../library/os.rst:3360
msgid "Similar to :func:`waitpid`, except a 3-element tuple, containing the child's process id, exit status indication, and resource usage information is returned. Refer to :mod:`resource`.\\ :func:`~resource.getrusage` for details on resource usage information.  The arguments to :func:`wait4` are the same as those provided to :func:`waitpid`."
msgstr ""

#: ../../library/os.rst:3371
msgid "The option for :func:`waitpid` to return immediately if no child process status is available immediately. The function returns ``(0, 0)`` in this case."
msgstr ""

#: ../../library/os.rst:3379
msgid "This option causes child processes to be reported if they have been continued from a job control stop since their status was last reported."
msgstr ""

#: ../../library/os.rst:3382
msgid "Availability: some Unix systems."
msgstr ""

#: ../../library/os.rst:3387
msgid "This option causes child processes to be reported if they have been stopped but their current state has not been reported since they were stopped."
msgstr ""

#: ../../library/os.rst:3393
msgid "The following functions take a process status code as returned by :func:`system`, :func:`wait`, or :func:`waitpid` as a parameter.  They may be used to determine the disposition of a process."
msgstr ""

#: ../../library/os.rst:3399
msgid "Return ``True`` if a core dump was generated for the process, otherwise return ``False``."
msgstr ""

#: ../../library/os.rst:3407
msgid "Return ``True`` if the process has been continued from a job control stop, otherwise return ``False``."
msgstr ""

#: ../../library/os.rst:3415
msgid "Return ``True`` if the process has been stopped, otherwise return ``False``."
msgstr ""

#: ../../library/os.rst:3423
msgid "Return ``True`` if the process exited due to a signal, otherwise return ``False``."
msgstr ""

#: ../../library/os.rst:3431
msgid "Return ``True`` if the process exited using the :manpage:`exit(2)` system call, otherwise return ``False``."
msgstr ""

#: ../../library/os.rst:3439
msgid "If ``WIFEXITED(status)`` is true, return the integer parameter to the :manpage:`exit(2)` system call.  Otherwise, the return value is meaningless."
msgstr ""

#: ../../library/os.rst:3447
msgid "Return the signal which caused the process to stop."
msgstr ""

#: ../../library/os.rst:3454
msgid "Return the signal which caused the process to exit."
msgstr ""

#: ../../library/os.rst:3460
msgid "Interface to the scheduler"
msgstr ""

#: ../../library/os.rst:3462
msgid "These functions control how a process is allocated CPU time by the operating system. They are only available on some Unix platforms. For more detailed information, consult your Unix manpages."
msgstr ""

#: ../../library/os.rst:3468
msgid "The following scheduling policies are exposed if they are supported by the operating system."
msgstr ""

#: ../../library/os.rst:3473
msgid "The default scheduling policy."
msgstr ""

#: ../../library/os.rst:3477
msgid "Scheduling policy for CPU-intensive processes that tries to preserve interactivity on the rest of the computer."
msgstr ""

#: ../../library/os.rst:3482
msgid "Scheduling policy for extremely low priority background tasks."
msgstr ""

#: ../../library/os.rst:3486
msgid "Scheduling policy for sporadic server programs."
msgstr ""

#: ../../library/os.rst:3490
msgid "A First In First Out scheduling policy."
msgstr ""

#: ../../library/os.rst:3494
msgid "A round-robin scheduling policy."
msgstr ""

#: ../../library/os.rst:3498
msgid "This flag can be OR'ed with any other scheduling policy. When a process with this flag set forks, its child's scheduling policy and priority are reset to the default."
msgstr ""

#: ../../library/os.rst:3505
msgid "This class represents tunable scheduling parameters used in :func:`sched_setparam`, :func:`sched_setscheduler`, and :func:`sched_getparam`. It is immutable."
msgstr ""

#: ../../library/os.rst:3509
msgid "At the moment, there is only one possible parameter:"
msgstr ""

#: ../../library/os.rst:3513
msgid "The scheduling priority for a scheduling policy."
msgstr ""

#: ../../library/os.rst:3518
msgid "Get the minimum priority value for *policy*. *policy* is one of the scheduling policy constants above."
msgstr ""

#: ../../library/os.rst:3524
msgid "Get the maximum priority value for *policy*. *policy* is one of the scheduling policy constants above."
msgstr ""

#: ../../library/os.rst:3530
msgid "Set the scheduling policy for the process with PID *pid*. A *pid* of 0 means the calling process. *policy* is one of the scheduling policy constants above. *param* is a :class:`sched_param` instance."
msgstr ""

#: ../../library/os.rst:3537
msgid "Return the scheduling policy for the process with PID *pid*. A *pid* of 0 means the calling process. The result is one of the scheduling policy constants above."
msgstr ""

#: ../../library/os.rst:3544
msgid "Set a scheduling parameters for the process with PID *pid*. A *pid* of 0 means the calling process. *param* is a :class:`sched_param` instance."
msgstr ""

#: ../../library/os.rst:3550
msgid "Return the scheduling parameters as a :class:`sched_param` instance for the process with PID *pid*. A *pid* of 0 means the calling process."
msgstr ""

#: ../../library/os.rst:3556
msgid "Return the round-robin quantum in seconds for the process with PID *pid*. A *pid* of 0 means the calling process."
msgstr ""

#: ../../library/os.rst:3562
msgid "Voluntarily relinquish the CPU."
msgstr ""

#: ../../library/os.rst:3567
msgid "Restrict the process with PID *pid* (or the current process if zero) to a set of CPUs.  *mask* is an iterable of integers representing the set of CPUs to which the process should be restricted."
msgstr ""

#: ../../library/os.rst:3574
msgid "Return the set of CPUs the process with PID *pid* (or the current process if zero) is restricted to."
msgstr ""

#: ../../library/os.rst:3581
msgid "Miscellaneous System Information"
msgstr ""

#: ../../library/os.rst:3586
msgid "Return string-valued system configuration values. *name* specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX, Unix 95, Unix 98, and others).  Some platforms define additional names as well. The names known to the host operating system are given as the keys of the ``confstr_names`` dictionary.  For configuration variables not included in that mapping, passing an integer for *name* is also accepted."
msgstr ""

#: ../../library/os.rst:3594
msgid "If the configuration value specified by *name* isn't defined, ``None`` is returned."
msgstr ""

#: ../../library/os.rst:3597
msgid "If *name* is a string and is not known, :exc:`ValueError` is raised.  If a specific value for *name* is not supported by the host system, even if it is included in ``confstr_names``, an :exc:`OSError` is raised with :const:`errno.EINVAL` for the error number."
msgstr ""

#: ../../library/os.rst:3607
msgid "Dictionary mapping names accepted by :func:`confstr` to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system."
msgstr ""

#: ../../library/os.rst:3616
msgid "Return the number of CPUs in the system. Returns None if undetermined."
msgstr ""

#: ../../library/os.rst:3623
msgid "Return the number of processes in the system run queue averaged over the last 1, 5, and 15 minutes or raises :exc:`OSError` if the load average was unobtainable."
msgstr ""

#: ../../library/os.rst:3632
msgid "Return integer-valued system configuration values. If the configuration value specified by *name* isn't defined, ``-1`` is returned.  The comments regarding the *name* parameter for :func:`confstr` apply here as well; the dictionary that provides information on the known names is given by ``sysconf_names``."
msgstr ""

#: ../../library/os.rst:3642
msgid "Dictionary mapping names accepted by :func:`sysconf` to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system."
msgstr ""

#: ../../library/os.rst:3648
msgid "The following data values are used to support path manipulation operations.  These are defined for all platforms."
msgstr ""

#: ../../library/os.rst:3651
msgid "Higher-level operations on pathnames are defined in the :mod:`os.path` module."
msgstr ""

#: ../../library/os.rst:3656
msgid "The constant string used by the operating system to refer to the current directory. This is ``'.'`` for Windows and POSIX. Also available via :mod:`os.path`."
msgstr ""

#: ../../library/os.rst:3663
msgid "The constant string used by the operating system to refer to the parent directory. This is ``'..'`` for Windows and POSIX. Also available via :mod:`os.path`."
msgstr ""

#: ../../library/os.rst:3670
msgid "The character used by the operating system to separate pathname components. This is ``'/'`` for POSIX and ``'\\\\'`` for Windows.  Note that knowing this is not sufficient to be able to parse or concatenate pathnames --- use :func:`os.path.split` and :func:`os.path.join` --- but it is occasionally useful. Also available via :mod:`os.path`."
msgstr ""

#: ../../library/os.rst:3679
msgid "An alternative character used by the operating system to separate pathname components, or ``None`` if only one separator character exists.  This is set to ``'/'`` on Windows systems where ``sep`` is a backslash. Also available via :mod:`os.path`."
msgstr ""

#: ../../library/os.rst:3687
msgid "The character which separates the base filename from the extension; for example, the ``'.'`` in :file:`os.py`. Also available via :mod:`os.path`."
msgstr ""

#: ../../library/os.rst:3693
msgid "The character conventionally used by the operating system to separate search path components (as in :envvar:`PATH`), such as ``':'`` for POSIX or ``';'`` for Windows. Also available via :mod:`os.path`."
msgstr ""

#: ../../library/os.rst:3700
msgid "The default search path used by :func:`exec\\*p\\* <execl>` and :func:`spawn\\*p\\* <spawnl>` if the environment doesn't have a ``'PATH'`` key. Also available via :mod:`os.path`."
msgstr ""

#: ../../library/os.rst:3707
msgid "The string used to separate (or, rather, terminate) lines on the current platform.  This may be a single character, such as ``'\\n'`` for POSIX, or multiple characters, for example, ``'\\r\\n'`` for Windows. Do not use *os.linesep* as a line terminator when writing files opened in text mode (the default); use a single ``'\\n'`` instead, on all platforms."
msgstr ""

#: ../../library/os.rst:3716
msgid "The file path of the null device. For example: ``'/dev/null'`` for POSIX, ``'nul'`` for Windows.  Also available via :mod:`os.path`."
msgstr ""

#: ../../library/os.rst:3727
msgid "Flags for use with the :func:`~sys.setdlopenflags` and :func:`~sys.getdlopenflags` functions.  See the Unix manual page :manpage:`dlopen(3)` for what the different flags mean."
msgstr ""

#: ../../library/os.rst:3736
msgid "Miscellaneous Functions"
msgstr ""

#: ../../library/os.rst:3741
msgid "Return a string of *n* random bytes suitable for cryptographic use."
msgstr ""

#: ../../library/os.rst:3743
msgid "This function returns random bytes from an OS-specific randomness source.  The returned data should be unpredictable enough for cryptographic applications, though its exact quality depends on the OS implementation."
msgstr ""

#: ../../library/os.rst:3747
msgid "On Linux, ``getrandom()`` syscall is used if available and the urandom entropy pool is initialized (``getrandom()`` does not block). On a Unix-like system this will query ``/dev/urandom``. On Windows, it will use ``CryptGenRandom()``.  If a randomness source is not found, :exc:`NotImplementedError` will be raised."
msgstr ""

#: ../../library/os.rst:3753
msgid "For an easy-to-use interface to the random number generator provided by your platform, please see :class:`random.SystemRandom`."
msgstr ""

#: ../../library/os.rst:3756
msgid "On Linux, if ``getrandom()`` blocks (the urandom entropy pool is not initialized yet), fall back on reading ``/dev/urandom``."
msgstr ""

#: ../../library/os.rst:3760
msgid "On Linux 3.17 and newer, the ``getrandom()`` syscall is now used when available.  On OpenBSD 5.6 and newer, the C ``getentropy()`` function is now used. These functions avoid the usage of an internal file descriptor."
msgstr ""

