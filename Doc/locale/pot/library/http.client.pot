# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-31 15:04+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/http.client.rst:2
msgid ":mod:`http.client` --- HTTP protocol client"
msgstr ""

#: ../../library/http.client.rst:14
msgid "**Source code:** :source:`Lib/http/client.py`"
msgstr ""

#: ../../library/http.client.rst:18
msgid "This module defines classes which implement the client side of the HTTP and HTTPS protocols.  It is normally not used directly --- the module :mod:`urllib.request` uses it to handle URLs that use HTTP and HTTPS."
msgstr ""

#: ../../library/http.client.rst:24
msgid "The `Requests package <http://requests.readthedocs.org/>`_ is recommended for a higher-level http client interface."
msgstr ""

#: ../../library/http.client.rst:29
msgid "HTTPS support is only available if Python was compiled with SSL support (through the :mod:`ssl` module)."
msgstr ""

#: ../../library/http.client.rst:32
msgid "The module provides the following classes:"
msgstr ""

#: ../../library/http.client.rst:38
msgid "An :class:`HTTPConnection` instance represents one transaction with an HTTP server.  It should be instantiated passing it a host and optional port number.  If no port number is passed, the port is extracted from the host string if it has the form ``host:port``, else the default HTTP port (80) is used.  If the optional *timeout* parameter is given, blocking operations (like connection attempts) will timeout after that many seconds (if it is not given, the global default timeout setting is used). The optional *source_address* parameter may be a tuple of a (host, port) to use as the source address the HTTP connection is made from."
msgstr ""

#: ../../library/http.client.rst:48
msgid "For example, the following calls all create instances that connect to the server at the same host and port::"
msgstr ""

#: ../../library/http.client.rst:56
msgid "*source_address* was added."
msgstr ""

#: ../../library/http.client.rst:59
msgid "The  *strict* parameter was removed. HTTP 0.9-style \"Simple Responses\" are not longer supported."
msgstr ""

#: ../../library/http.client.rst:69
msgid "A subclass of :class:`HTTPConnection` that uses SSL for communication with secure servers.  Default port is ``443``.  If *context* is specified, it must be a :class:`ssl.SSLContext` instance describing the various SSL options."
msgstr ""

#: ../../library/http.client.rst:74
msgid "*key_file* and *cert_file* are deprecated, please use :meth:`ssl.SSLContext.load_cert_chain` instead, or let :func:`ssl.create_default_context` select the system's trusted CA certificates for you.  The *check_hostname* parameter is also deprecated; the :attr:`ssl.SSLContext.check_hostname` attribute of *context* should be used instead."
msgstr ""

#: ../../library/http.client.rst:81
msgid "Please read :ref:`ssl-security` for more information on best practices."
msgstr ""

#: ../../library/http.client.rst:83
msgid "*source_address*, *context* and *check_hostname* were added."
msgstr ""

#: ../../library/http.client.rst:86
msgid "This class now supports HTTPS virtual hosts if possible (that is, if :data:`ssl.HAS_SNI` is true)."
msgstr ""

#: ../../library/http.client.rst:90
msgid "The *strict* parameter was removed. HTTP 0.9-style \"Simple Responses\" are no longer supported."
msgstr ""

#: ../../library/http.client.rst:94
msgid "This class now performs all the necessary certificate and hostname checks by default. To revert to the previous, unverified, behavior :func:`ssl._create_unverified_context` can be passed to the *context* parameter."
msgstr ""

#: ../../library/http.client.rst:103
msgid "Class whose instances are returned upon successful connection.  Not instantiated directly by user."
msgstr ""

#: ../../library/http.client.rst:106
msgid "The *strict* parameter was removed. HTTP 0.9 style \"Simple Responses\" are no longer supported."
msgstr ""

#: ../../library/http.client.rst:111
msgid "The following exceptions are raised as appropriate:"
msgstr ""

#: ../../library/http.client.rst:116
msgid "The base class of the other exceptions in this module.  It is a subclass of :exc:`Exception`."
msgstr ""

#: ../../library/http.client.rst:122
#: ../../library/http.client.rst:133
#: ../../library/http.client.rst:138
#: ../../library/http.client.rst:143
#: ../../library/http.client.rst:148
#: ../../library/http.client.rst:153
msgid "A subclass of :exc:`HTTPException`."
msgstr ""

#: ../../library/http.client.rst:127
msgid "A subclass of :exc:`HTTPException`, raised if a port is given and is either non-numeric or empty."
msgstr ""

#: ../../library/http.client.rst:158
#: ../../library/http.client.rst:163
#: ../../library/http.client.rst:168
msgid "A subclass of :exc:`ImproperConnectionState`."
msgstr ""

#: ../../library/http.client.rst:173
msgid "A subclass of :exc:`HTTPException`.  Raised if a server responds with a HTTP status code that we don't understand."
msgstr ""

#: ../../library/http.client.rst:179
msgid "A subclass of :exc:`HTTPException`.  Raised if an excessively long line is received in the HTTP protocol from the server."
msgstr ""

#: ../../library/http.client.rst:185
msgid "A subclass of :exc:`ConnectionResetError` and :exc:`BadStatusLine`.  Raised by :meth:`HTTPConnection.getresponse` when the attempt to read the response results in no data read from the connection, indicating that the remote end has closed the connection."
msgstr ""

#: ../../library/http.client.rst:190
msgid "Previously, :exc:`BadStatusLine`\\ ``('')`` was raised."
msgstr ""

#: ../../library/http.client.rst:194
msgid "The constants defined in this module are:"
msgstr ""

#: ../../library/http.client.rst:198
msgid "The default port for the HTTP protocol (always ``80``)."
msgstr ""

#: ../../library/http.client.rst:203
msgid "The default port for the HTTPS protocol (always ``443``)."
msgstr ""

#: ../../library/http.client.rst:207
msgid "This dictionary maps the HTTP 1.1 status codes to the W3C names."
msgstr ""

#: ../../library/http.client.rst:209
msgid "Example: ``http.client.responses[http.client.NOT_FOUND]`` is ``'Not Found'``."
msgstr ""

#: ../../library/http.client.rst:211
msgid "See :ref:`http-status-codes` for a list of HTTP status codes that are available in this module as constants."
msgstr ""

#: ../../library/http.client.rst:218
msgid "HTTPConnection Objects"
msgstr ""

#: ../../library/http.client.rst:220
msgid ":class:`HTTPConnection` instances have the following methods:"
msgstr ""

#: ../../library/http.client.rst:225
msgid "This will send a request to the server using the HTTP request method *method* and the selector *url*."
msgstr ""

#: ../../library/http.client.rst:228
msgid "If *body* is specified, the specified data is sent after the headers are finished.  It may be a string, a :term:`bytes-like object`, an open :term:`file object`, or an iterable of :term:`bytes-like object`\\s.  If *body* is a string, it is encoded as ISO-8851-1, the default for HTTP.  If it is a bytes-like object the bytes are sent as is.  If it is a :term:`file object`, the contents of the file is sent; this file object should support at least the ``read()`` method.  If the file object has a ``mode`` attribute, the data returned by the ``read()`` method will be encoded as ISO-8851-1 unless the ``mode`` attribute contains the substring ``b``, otherwise the data returned by ``read()`` is sent as is.  If *body* is an iterable, the elements of the iterable are sent as is until the iterable is exhausted."
msgstr ""

#: ../../library/http.client.rst:241
msgid "The *headers* argument should be a mapping of extra HTTP headers to send with the request."
msgstr ""

#: ../../library/http.client.rst:244
msgid "If *headers* does not contain a Content-Length item, one is added automatically if possible.  If *body* is ``None``, the Content-Length header is set to ``0`` for methods that expect a body (``PUT``, ``POST``, and ``PATCH``).  If *body* is a string or bytes object, the Content-Length header is set to its length.  If *body* is a :term:`file object` and it works to call :func:`~os.fstat` on the result of its ``fileno()`` method, then the Content-Length header is set to the ``st_size`` reported by the ``fstat`` call.  Otherwise no Content-Length header is added."
msgstr ""

#: ../../library/http.client.rst:253
msgid "*body* can now be an iterable."
msgstr ""

#: ../../library/http.client.rst:258
msgid "Should be called after a request is sent to get the response from the server. Returns an :class:`HTTPResponse` instance."
msgstr ""

#: ../../library/http.client.rst:263
msgid "Note that you must have read the whole response before you can send a new request to the server."
msgstr ""

#: ../../library/http.client.rst:266
msgid "If a :exc:`ConnectionError` or subclass is raised, the :class:`HTTPConnection` object will be ready to reconnect when a new request is sent."
msgstr ""

#: ../../library/http.client.rst:274
msgid "Set the debugging level.  The default debug level is ``0``, meaning no debugging output is printed.  Any value greater than ``0`` will cause all currently defined debug output to be printed to stdout.  The ``debuglevel`` is passed to any new :class:`HTTPResponse` objects that are created."
msgstr ""

#: ../../library/http.client.rst:284
msgid "Set the host and the port for HTTP Connect Tunnelling. This allows running the connection through a proxy server."
msgstr ""

#: ../../library/http.client.rst:287
msgid "The host and port arguments specify the endpoint of the tunneled connection (i.e. the address included in the CONNECT request, *not* the address of the proxy server)."
msgstr ""

#: ../../library/http.client.rst:291
msgid "The headers argument should be a mapping of extra HTTP headers to send with the CONNECT request."
msgstr ""

#: ../../library/http.client.rst:294
msgid "For example, to tunnel through a HTTPS proxy server running locally on port 8080, we would pass the address of the proxy to the :class:`HTTPSConnection` constructor, and the address of the host that we eventually want to reach to the :meth:`~HTTPConnection.set_tunnel` method::"
msgstr ""

#: ../../library/http.client.rst:309
msgid "Connect to the server specified when the object was created.  By default, this is called automatically when making a request if the client does not already have a connection."
msgstr ""

#: ../../library/http.client.rst:316
msgid "Close the connection to the server."
msgstr ""

#: ../../library/http.client.rst:318
msgid "As an alternative to using the :meth:`request` method described above, you can also send your request step by step, by using the four functions below."
msgstr ""

#: ../../library/http.client.rst:324
msgid "This should be the first call after the connection to the server has been made. It sends a line to the server consisting of the *request* string, the *selector* string, and the HTTP version (``HTTP/1.1``).  To disable automatic sending of ``Host:`` or ``Accept-Encoding:`` headers (for example to accept additional content encodings), specify *skip_host* or *skip_accept_encoding* with non-False values."
msgstr ""

#: ../../library/http.client.rst:334
msgid "Send an :rfc:`822`\\ -style header to the server.  It sends a line to the server consisting of the header, a colon and a space, and the first argument.  If more arguments are given, continuation lines are sent, each consisting of a tab and an argument."
msgstr ""

#: ../../library/http.client.rst:342
msgid "Send a blank line to the server, signalling the end of the headers. The optional *message_body* argument can be used to pass a message body associated with the request.  The message body will be sent in the same packet as the message headers if it is string, otherwise it is sent in a separate packet."
msgstr ""

#: ../../library/http.client.rst:350
msgid "Send data to the server.  This should be used directly only after the :meth:`endheaders` method has been called and before :meth:`getresponse` is called."
msgstr ""

#: ../../library/http.client.rst:358
msgid "HTTPResponse Objects"
msgstr ""

#: ../../library/http.client.rst:360
msgid "An :class:`HTTPResponse` instance wraps the HTTP response from the server.  It provides access to the request headers and the entity body.  The response is an iterable object and can be used in a with statement."
msgstr ""

#: ../../library/http.client.rst:368
msgid "Reads and returns the response body, or up to the next *amt* bytes."
msgstr ""

#: ../../library/http.client.rst:372
msgid "Reads up to the next len(b) bytes of the response body into the buffer *b*. Returns the number of bytes read."
msgstr ""

#: ../../library/http.client.rst:379
msgid "Return the value of the header *name*, or *default* if there is no header matching *name*.  If there is more than one  header with the name *name*, return all of the values joined by ', '.  If 'default' is any iterable other than a single string, its elements are similarly returned joined by commas."
msgstr ""

#: ../../library/http.client.rst:387
msgid "Return a list of (header, value) tuples."
msgstr ""

#: ../../library/http.client.rst:391
msgid "Return the ``fileno`` of the underlying socket."
msgstr ""

#: ../../library/http.client.rst:395
msgid "A :class:`http.client.HTTPMessage` instance containing the response headers.  :class:`http.client.HTTPMessage` is a subclass of :class:`email.message.Message`."
msgstr ""

#: ../../library/http.client.rst:402
msgid "HTTP protocol version used by server.  10 for HTTP/1.0, 11 for HTTP/1.1."
msgstr ""

#: ../../library/http.client.rst:407
msgid "Status code returned by server."
msgstr ""

#: ../../library/http.client.rst:412
msgid "Reason phrase returned by server."
msgstr ""

#: ../../library/http.client.rst:417
msgid "A debugging hook.  If :attr:`debuglevel` is greater than zero, messages will be printed to stdout as the response is read and parsed."
msgstr ""

#: ../../library/http.client.rst:422
msgid "Is ``True`` if the stream is closed."
msgstr ""

#: ../../library/http.client.rst:425
msgid "Examples"
msgstr ""

#: ../../library/http.client.rst:427
msgid "Here is an example session that uses the ``GET`` method::"
msgstr ""

#: ../../library/http.client.rst:451
msgid "Here is an example session that uses the ``HEAD`` method.  Note that the ``HEAD`` method never returns any data. ::"
msgstr ""

#: ../../library/http.client.rst:466
msgid "Here is an example session that shows how to ``POST`` requests::"
msgstr ""

#: ../../library/http.client.rst:482
msgid "Client side ``HTTP PUT`` requests are very similar to ``POST`` requests. The difference lies only the server side where HTTP server will allow resources to be created via ``PUT`` request. It should be noted that custom HTTP methods +are also handled in :class:`urllib.request.Request` by sending the appropriate +method attribute.Here is an example session that shows how to do ``PUT`` request using http.client::"
msgstr ""

#: ../../library/http.client.rst:504
msgid "HTTPMessage Objects"
msgstr ""

#: ../../library/http.client.rst:506
msgid "An :class:`http.client.HTTPMessage` instance holds the headers from an HTTP response.  It is implemented using the :class:`email.message.Message` class."
msgstr ""

