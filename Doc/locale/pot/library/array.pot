# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-31 15:04+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/array.rst:2
msgid ":mod:`array` --- Efficient arrays of numeric values"
msgstr ""

#: ../../library/array.rst:10
msgid "This module defines an object type which can compactly represent an array of basic values: characters, integers, floating point numbers.  Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained.  The type is specified at object creation time by using a :dfn:`type code`, which is a single character.  The following type codes are defined:"
msgstr ""

#: ../../library/array.rst:18
msgid "Type code"
msgstr ""

#: ../../library/array.rst:18
msgid "C Type"
msgstr ""

#: ../../library/array.rst:18
msgid "Python Type"
msgstr ""

#: ../../library/array.rst:18
msgid "Minimum size in bytes"
msgstr ""

#: ../../library/array.rst:18
msgid "Notes"
msgstr ""

#: ../../library/array.rst:20
msgid "``'b'``"
msgstr ""

#: ../../library/array.rst:20
msgid "signed char"
msgstr ""

#: ../../library/array.rst:20
#: ../../library/array.rst:22
#: ../../library/array.rst:26
#: ../../library/array.rst:28
#: ../../library/array.rst:30
#: ../../library/array.rst:32
#: ../../library/array.rst:34
#: ../../library/array.rst:36
#: ../../library/array.rst:38
#: ../../library/array.rst:40
msgid "int"
msgstr ""

#: ../../library/array.rst:20
#: ../../library/array.rst:22
msgid "1"
msgstr ""

#: ../../library/array.rst:22
msgid "``'B'``"
msgstr ""

#: ../../library/array.rst:22
msgid "unsigned char"
msgstr ""

#: ../../library/array.rst:24
msgid "``'u'``"
msgstr ""

#: ../../library/array.rst:24
msgid "Py_UNICODE"
msgstr ""

#: ../../library/array.rst:24
msgid "Unicode character"
msgstr ""

#: ../../library/array.rst:24
#: ../../library/array.rst:26
#: ../../library/array.rst:28
#: ../../library/array.rst:30
#: ../../library/array.rst:32
msgid "2"
msgstr ""

#: ../../library/array.rst:24
msgid "\\(1)"
msgstr ""

#: ../../library/array.rst:26
msgid "``'h'``"
msgstr ""

#: ../../library/array.rst:26
msgid "signed short"
msgstr ""

#: ../../library/array.rst:28
msgid "``'H'``"
msgstr ""

#: ../../library/array.rst:28
msgid "unsigned short"
msgstr ""

#: ../../library/array.rst:30
msgid "``'i'``"
msgstr ""

#: ../../library/array.rst:30
msgid "signed int"
msgstr ""

#: ../../library/array.rst:32
msgid "``'I'``"
msgstr ""

#: ../../library/array.rst:32
msgid "unsigned int"
msgstr ""

#: ../../library/array.rst:34
msgid "``'l'``"
msgstr ""

#: ../../library/array.rst:34
msgid "signed long"
msgstr ""

#: ../../library/array.rst:34
#: ../../library/array.rst:36
#: ../../library/array.rst:42
msgid "4"
msgstr ""

#: ../../library/array.rst:36
msgid "``'L'``"
msgstr ""

#: ../../library/array.rst:36
msgid "unsigned long"
msgstr ""

#: ../../library/array.rst:38
msgid "``'q'``"
msgstr ""

#: ../../library/array.rst:38
msgid "signed long long"
msgstr ""

#: ../../library/array.rst:38
#: ../../library/array.rst:40
#: ../../library/array.rst:44
msgid "8"
msgstr ""

#: ../../library/array.rst:38
#: ../../library/array.rst:40
msgid "\\(2)"
msgstr ""

#: ../../library/array.rst:40
msgid "``'Q'``"
msgstr ""

#: ../../library/array.rst:40
msgid "unsigned long long"
msgstr ""

#: ../../library/array.rst:42
msgid "``'f'``"
msgstr ""

#: ../../library/array.rst:42
#: ../../library/array.rst:42
#: ../../library/array.rst:44
msgid "float"
msgstr ""

#: ../../library/array.rst:44
msgid "``'d'``"
msgstr ""

#: ../../library/array.rst:44
msgid "double"
msgstr ""

#: ../../library/array.rst:47
msgid "Notes:"
msgstr ""

#: ../../library/array.rst:50
msgid "The ``'u'`` type code corresponds to Python's obsolete unicode character (:c:type:`Py_UNICODE` which is :c:type:`wchar_t`). Depending on the platform, it can be 16 bits or 32 bits."
msgstr ""

#: ../../library/array.rst:54
msgid "``'u'`` will be removed together with the rest of the :c:type:`Py_UNICODE` API."
msgstr ""

#: ../../library/array.rst:58
msgid "Deprecated since version 3.3, will be removed in version 4.0."
msgstr ""

#: ../../library/array.rst:60
msgid "The ``'q'`` and ``'Q'`` type codes are available only if the platform C compiler used to build Python supports C :c:type:`long long`, or, on Windows, :c:type:`__int64`."
msgstr ""

#: ../../library/array.rst:66
msgid "The actual representation of values is determined by the machine architecture (strictly speaking, by the C implementation).  The actual size can be accessed through the :attr:`itemsize` attribute."
msgstr ""

#: ../../library/array.rst:70
msgid "The module defines the following type:"
msgstr ""

#: ../../library/array.rst:75
msgid "A new array whose items are restricted by *typecode*, and initialized from the optional *initializer* value, which must be a list, a :term:`bytes-like object`, or iterable over elements of the appropriate type."
msgstr ""

#: ../../library/array.rst:80
msgid "If given a list or string, the initializer is passed to the new array's :meth:`fromlist`, :meth:`frombytes`, or :meth:`fromunicode` method (see below) to add initial items to the array.  Otherwise, the iterable initializer is passed to the :meth:`extend` method."
msgstr ""

#: ../../library/array.rst:88
msgid "A string with all available type codes."
msgstr ""

#: ../../library/array.rst:90
msgid "Array objects support the ordinary sequence operations of indexing, slicing, concatenation, and multiplication.  When using slice assignment, the assigned value must be an array object with the same type code; in all other cases, :exc:`TypeError` is raised. Array objects also implement the buffer interface, and may be used wherever :term:`bytes-like object`\\ s are supported."
msgstr ""

#: ../../library/array.rst:96
msgid "The following data items and methods are also supported:"
msgstr ""

#: ../../library/array.rst:100
msgid "The typecode character used to create the array."
msgstr ""

#: ../../library/array.rst:105
msgid "The length in bytes of one array item in the internal representation."
msgstr ""

#: ../../library/array.rst:110
msgid "Append a new item with value *x* to the end of the array."
msgstr ""

#: ../../library/array.rst:115
msgid "Return a tuple ``(address, length)`` giving the current memory address and the length in elements of the buffer used to hold array's contents.  The size of the memory buffer in bytes can be computed as ``array.buffer_info()[1] * array.itemsize``.  This is occasionally useful when working with low-level (and inherently unsafe) I/O interfaces that require memory addresses, such as certain :c:func:`ioctl` operations.  The returned numbers are valid as long as the array exists and no length-changing operations are applied to it."
msgstr ""

#: ../../library/array.rst:125
msgid "When using array objects from code written in C or C++ (the only way to effectively make use of this information), it makes more sense to use the buffer interface supported by array objects.  This method is maintained for backward compatibility and should be avoided in new code.  The buffer interface is documented in :ref:`bufferobjects`."
msgstr ""

#: ../../library/array.rst:134
msgid "\"Byteswap\" all items of the array.  This is only supported for values which are 1, 2, 4, or 8 bytes in size; for other types of values, :exc:`RuntimeError` is raised.  It is useful when reading data from a file written on a machine with a different byte order."
msgstr ""

#: ../../library/array.rst:142
msgid "Return the number of occurrences of *x* in the array."
msgstr ""

#: ../../library/array.rst:147
msgid "Append items from *iterable* to the end of the array.  If *iterable* is another array, it must have *exactly* the same type code; if not, :exc:`TypeError` will be raised.  If *iterable* is not an array, it must be iterable and its elements must be the right type to be appended to the array."
msgstr ""

#: ../../library/array.rst:155
msgid "Appends items from the string, interpreting the string as an array of machine values (as if it had been read from a file using the :meth:`fromfile` method)."
msgstr ""

#: ../../library/array.rst:158
msgid ":meth:`fromstring` is renamed to :meth:`frombytes` for clarity."
msgstr ""

#: ../../library/array.rst:164
msgid "Read *n* items (as machine values) from the :term:`file object` *f* and append them to the end of the array.  If less than *n* items are available, :exc:`EOFError` is raised, but the items that were available are still inserted into the array. *f* must be a real built-in file object; something else with a :meth:`read` method won't do."
msgstr ""

#: ../../library/array.rst:173
msgid "Append items from the list.  This is equivalent to ``for x in list: a.append(x)`` except that if there is a type error, the array is unchanged."
msgstr ""

#: ../../library/array.rst:179
msgid "Deprecated alias for :meth:`frombytes`."
msgstr ""

#: ../../library/array.rst:184
msgid "Extends this array with data from the given unicode string.  The array must be a type ``'u'`` array; otherwise a :exc:`ValueError` is raised.  Use ``array.frombytes(unicodestring.encode(enc))`` to append Unicode data to an array of some other type."
msgstr ""

#: ../../library/array.rst:192
msgid "Return the smallest *i* such that *i* is the index of the first occurrence of *x* in the array."
msgstr ""

#: ../../library/array.rst:198
msgid "Insert a new item with value *x* in the array before position *i*. Negative values are treated as being relative to the end of the array."
msgstr ""

#: ../../library/array.rst:204
msgid "Removes the item with the index *i* from the array and returns it. The optional argument defaults to ``-1``, so that by default the last item is removed and returned."
msgstr ""

#: ../../library/array.rst:211
msgid "Remove the first occurrence of *x* from the array."
msgstr ""

#: ../../library/array.rst:216
msgid "Reverse the order of the items in the array."
msgstr ""

#: ../../library/array.rst:221
msgid "Convert the array to an array of machine values and return the bytes representation (the same sequence of bytes that would be written to a file by the :meth:`tofile` method.)"
msgstr ""

#: ../../library/array.rst:225
msgid ":meth:`tostring` is renamed to :meth:`tobytes` for clarity."
msgstr ""

#: ../../library/array.rst:231
msgid "Write all items (as machine values) to the :term:`file object` *f*."
msgstr ""

#: ../../library/array.rst:236
msgid "Convert the array to an ordinary list with the same items."
msgstr ""

#: ../../library/array.rst:241
msgid "Deprecated alias for :meth:`tobytes`."
msgstr ""

#: ../../library/array.rst:246
msgid "Convert the array to a unicode string.  The array must be a type ``'u'`` array; otherwise a :exc:`ValueError` is raised. Use ``array.tobytes().decode(enc)`` to obtain a unicode string from an array of some other type."
msgstr ""

#: ../../library/array.rst:251
msgid "When an array object is printed or converted to a string, it is represented as ``array(typecode, initializer)``.  The *initializer* is omitted if the array is empty, otherwise it is a string if the *typecode* is ``'u'``, otherwise it is a list of numbers.  The string is guaranteed to be able to be converted back to an array with the same type and value using :func:`eval`, so long as the :func:`array` function has been imported using ``from array import array``. Examples::"
msgstr ""

#: ../../library/array.rst:268
msgid "Module :mod:`struct`"
msgstr ""

#: ../../library/array.rst:268
msgid "Packing and unpacking of heterogeneous binary data."
msgstr ""

#: ../../library/array.rst:272
msgid "Module :mod:`xdrlib`"
msgstr ""

#: ../../library/array.rst:271
msgid "Packing and unpacking of External Data Representation (XDR) data as used in some remote procedure call systems."
msgstr ""

#: ../../library/array.rst:275
msgid "`The Numerical Python Documentation <http://docs.scipy.org/doc/>`_"
msgstr ""

#: ../../library/array.rst:275
msgid "The Numeric Python extension (NumPy) defines another array type; see http://www.numpy.org/ for further information about Numerical Python."
msgstr ""

